<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Clion 调试 Rust</title>
      <link href="/2020/07/17/rust/"/>
      <url>/2020/07/17/rust/</url>
      
        <content type="html"><![CDATA[<h2 id="安装-mingw"><a href="#安装-mingw" class="headerlink" title="安装 mingw"></a>安装 mingw</h2><p>安装 msys2 (包含 mingw-64 )</p><p>下载地址  <a href="https://www.msys2.org/" target="_blank" rel="noopener">https://www.msys2.org/</a> </p><p>开一个 mingw 的终端，安装编译工具：</p><pre><code> pacman -Syu pacman -S mingw-w64-x86_64-toolchain</code></pre><p>假设安装在 <code>c:\msys64</code> 目录下，则在系统的环境变量中，增加一个：</p><pre><code> MSYS2_HOME  C:\msys64 PATH        &lt;原来的路&gt;;%MSYS2_HOME%\bin;%MSYS2_HOME%\mingw64\bin</code></pre><h2 id="安装-rust-gnu-工具链"><a href="#安装-rust-gnu-工具链" class="headerlink" title="安装 rust gnu 工具链"></a>安装 rust gnu 工具链</h2><p>在 windows 上使用 rustup 安装的 rust 编译环境默认使用了 msvc 编译链，需要安装 gnu 编译链</p><pre><code> rustup install stable-gnu rustup default stable-gnu</code></pre><h2 id="设置-clion-编译工具链"><a href="#设置-clion-编译工具链" class="headerlink" title="设置 clion 编译工具链"></a>设置 clion 编译工具链</h2><p>在 clion 的 <code>File -&gt; Settings -&gt; Build, Execution, Deployment -&gt; Toolchains</code> ，加上一个 mingw 的工具链，设置目录为 msys2 中的 mingw64 目录。如 msys2 安装在 <code>c:\msys64</code> ，则目录为 <code>c:\msys64\mingw64</code> ，目录正确的情况下，make 、 c-compiler 、 c++ compiler 、 debugger 等自动找到。</p><p>完成这些设置后，就可以使用 clion 调试 rust 了</p><img src="/images/2020/rust01.jpg"><img src="/images/2020/rust02.png"><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Rust </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Rust </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据库学习指南</title>
      <link href="/2020/07/17/database/"/>
      <url>/2020/07/17/database/</url>
      
        <content type="html"><![CDATA[<h1 id="Databases"><a href="#Databases" class="headerlink" title="Databases"></a>Databases</h1><h2 id="General"><a href="#General" class="headerlink" title="General"></a>General</h2><ul><li><input checked="" disabled="" type="checkbox"> 🎥 <a href="https://www.youtube.com/playlist?list=PLSE8ODhjZXjbohkNBWQs_otTrBTrjyohi" target="_blank" rel="noopener"><strong>CMU 15-445 Intro to Database Systems</strong></a> (A Pavlo 2019)</li><li><input checked="" disabled="" type="checkbox"> 🎥 <a href="https://www.youtube.com/playlist?list=PLSE8ODhjZXjasmrEd2_Yi1deeE360zv5O" target="_blank" rel="noopener"><strong>CMU 15-721 Advanced Database Systems</strong></a> (A Pavlo 2020)</li><li><input checked="" disabled="" type="checkbox"> 📖 <a href="https://www.databass.dev" target="_blank" rel="noopener"><strong>Database Internals</strong></a> (A Petrov 2019)</li><li><input checked="" disabled="" type="checkbox"> 📖 <a href="https://dataintensive.net/" target="_blank" rel="noopener"><strong>Designing Data-Intensive Applications</strong></a> (M Kleppmann 2017)</li><li><input checked="" disabled="" type="checkbox"> 📄 <a href="http://www.redbook.io" target="_blank" rel="noopener"><strong>Readings in Database Systems</strong></a> (P Bailis, JM Hellerstein, M Stonebraker) <em>“The Red Book”</em></li><li><input checked="" disabled="" type="checkbox"> 📄 <a href="http://db.cs.berkeley.edu/papers/fntdb07-architecture.pdf" target="_blank" rel="noopener">Architecture of a Database System</a> (JM Hellerstein, M Stonebraker, J Hamilton 2007)</li><li><input checked="" disabled="" type="checkbox"> 📖 <a href="https://www.amazon.com/Data-Reality-Perspective-Perceiving-Information/dp/1935504215" target="_blank" rel="noopener">Data and Reality</a> (W Kent, S Hoberman 2012)</li><li><input checked="" disabled="" type="checkbox"> 📖 <a href="https://www.db-book.com/db7/index.html" target="_blank" rel="noopener">Database System Concepts</a> (A Silberschatz, HF Korth, S Sudarshan 2019)</li><li><input checked="" disabled="" type="checkbox"> 📖 <a href="https://www.amazon.com/Fundamentals-Database-Systems-Ramez-Elmasri/dp/0133970779" target="_blank" rel="noopener">Fundamentals of Database Systems</a> (R Elmasri, SB Navathe 2015)</li><li><input checked="" disabled="" type="checkbox"> 📖 <a href="https://dl.acm.org/doi/book/10.1145/3226595" target="_blank" rel="noopener">Making Databases Work: the Pragmatic Wisdom of Michael Stonebraker</a> (ML Brodie 2018)</li><li><input checked="" disabled="" type="checkbox"> 🎥 <a href="https://archive.org/details/UCBerkeley_Course_Computer_Science_186#" target="_blank" rel="noopener">UC Berkeley CS186 Introduction to Database Systems</a> (J Hellerstein 2012)</li><li><input checked="" disabled="" type="checkbox"> 📄 <a href="https://db.cs.cmu.edu/papers/2016/pavlo-newsql-sigmodrec2016.pdf" target="_blank" rel="noopener">What’s Really New with NewSQL?</a> (A Pavlo, M Aslett 2016)</li></ul><h2 id="Transactions"><a href="#Transactions" class="headerlink" title="Transactions"></a>Transactions</h2><ul><li><input checked="" disabled="" type="checkbox"> 📄 <a href="https://www.microsoft.com/en-us/research/wp-content/uploads/2016/02/tr-95-51.pdf" target="_blank" rel="noopener"><strong>A Critique of ANSI SQL Isolation Levels</strong></a> (H Berenson et al 1995)</li><li><input checked="" disabled="" type="checkbox"> 🔗 <a href="https://jepsen.io/consistency" target="_blank" rel="noopener"><strong>Consistency Models</strong></a> (Jepsen 2016)</li><li><input checked="" disabled="" type="checkbox"> 📄 <a href="http://pmg.csail.mit.edu/papers/icde00.pdf" target="_blank" rel="noopener"><strong>Generalized Isolation Level Definitions</strong></a> (A Adya, B Liskov, P ONeil 2000)</li><li><input checked="" disabled="" type="checkbox"> 📖 <a href="https://www.amazon.com/Transaction-Processing-Concepts-Techniques-Management/dp/1558601902#customerReviews" target="_blank" rel="noopener"><strong>Transaction Processing: Concepts and Techniques</strong></a> (J Gray, A Reuter 1992)</li><li><input checked="" disabled="" type="checkbox"> 📄 <a href="http://www.bailis.org/papers/acidrain-sigmod2017.pdf" target="_blank" rel="noopener">ACIDRain: Concurrency-Related Attacks on Database-Backed Web Applications</a> (P Bailis, T Warszawski 2017)</li><li><input checked="" disabled="" type="checkbox"> 📄 <a href="https://yingjunwu.github.io/papers/vldb2017.pdf" target="_blank" rel="noopener">An Empirical Evaluation of In-Memory Multi-Version Concurrency Control</a> (Y Wu et al 2017)</li><li><input checked="" disabled="" type="checkbox"> 📄 <a href="http://delivery.acm.org/10.1145/2820000/2815404/p263-zhang.pdf" target="_blank" rel="noopener">Building Consistent Transactions with Inconsistent Replication</a> (I Zhang et al 2015)</li><li><input checked="" disabled="" type="checkbox"> 📄 <a href="http://cs.yale.edu/homes/thomson/publications/calvin-sigmod12.pdf" target="_blank" rel="noopener">Calvin: Fast Distributed Transactions for Partitioned Database Systems</a> (DJ Abadi et al 2012) <em>“The Calvin paper”</em></li><li><input checked="" disabled="" type="checkbox"> 📄 <a href="https://arxiv.org/pdf/1512.00168.pdf" target="_blank" rel="noopener">Consistency in Non-Transactional Distributed Storage Systems</a> (P Viotti, M Vukolić 2016)</li><li><input checked="" disabled="" type="checkbox"> 📄 <a href="http://www.vldb.org/pvldb/vol7/p181-bailis.pdf" target="_blank" rel="noopener">Highly Available Transactions: Virtues and Limitations</a> (P Bailis, JM Hellerstein et al 2013)</li><li><input checked="" disabled="" type="checkbox"> 📄 <a href="https://dspace.mit.edu/bitstream/handle/1721.1/16279/05331643-MIT.pdf" target="_blank" rel="noopener">Naming and Synchronization in a Decentralized Computer System</a> (DP Reed 1978) <em>“The MVCC paper”</em></li><li><input checked="" disabled="" type="checkbox"> 📄 <a href="http://www.jmfaleiro.com/pubs/multiversion-vldb2015.pdf" target="_blank" rel="noopener">Rethinking Serializable Multiversion Concurrency Control</a> (JM Faleiro, DJ Abadi 2015)</li><li><input checked="" disabled="" type="checkbox"> 📄 <a href="http://www.bailis.org/papers/ramp-sigmod2014.pdf" target="_blank" rel="noopener">Scalable Atomic Visibility with RAMP Transactions</a> (P Bailis et al 2014)</li><li><input checked="" disabled="" type="checkbox"> 📄 <a href="https://courses.cs.washington.edu/courses/cse444/08au/544M/READING-LIST/fekete-sigmod2008.pdf" target="_blank" rel="noopener">Serializable Isolation for Snapshot Databases</a> (MJ Cahill, U Röhm, AD Fekete 2008)</li><li><input checked="" disabled="" type="checkbox"> 💬 <a href="http://justinjaffray.com/what-does-write-skew-look-like/" target="_blank" rel="noopener">What Does Write Skew Look Like</a> (J Jaffray 2018)</li></ul><h2 id="Queries"><a href="#Queries" class="headerlink" title="Queries"></a>Queries</h2><ul><li><input checked="" disabled="" type="checkbox"> 📄 <a href="https://www2.cs.duke.edu/courses/compsci516/cps216/spring03/papers/selinger-etal-1979.pdf" target="_blank" rel="noopener">Access Path Selection in a Relational Database Management System</a> (PG Selinger et al 1979)</li><li><input checked="" disabled="" type="checkbox"> 📄 <a href="https://web.stanford.edu/class/cs345d-01/rl/chaudhuri98.pdf" target="_blank" rel="noopener">An Overview of Query Optimization in Relational Systems</a> (S Chaudhuri 1998)</li><li><input checked="" disabled="" type="checkbox"> 📖 <a href="http://pi3.informatik.uni-mannheim.de/~moer/querycompiler.pdf" target="_blank" rel="noopener">Building Query Compilers</a> (G Moerkotte 2014)</li><li><input checked="" disabled="" type="checkbox"> 📄 <a href="https://www.cs.purdue.edu/homes/rompf/papers/tahboub-sigmod18.pdf" target="_blank" rel="noopener">How to Architect a Query Compiler, Revisited</a> (RY Tahboub, GM Essertel, T Rompf 2018)</li><li><input checked="" disabled="" type="checkbox"> 📄 <a href="http://www.vldb.org/conf/1996/P087.PDF" target="_blank" rel="noopener">Optimization of Queries with User-Defined Predicates</a> (S Chaudhur, K Shim 1999)</li><li><input checked="" disabled="" type="checkbox"> 📄 <a href="https://www.cse.iitb.ac.in/infolab/Data/Courses/CS632/Papers/Cascades-graefe.pdf" target="_blank" rel="noopener">The Cascades Framework for Query Optimization</a> (G Graefe 1995)</li></ul><h2 id="Storage"><a href="#Storage" class="headerlink" title="Storage"></a>Storage</h2><ul><li><input checked="" disabled="" type="checkbox"> 📄 <a href="https://db.in.tum.de/~leis/papers/ART.pdf" target="_blank" rel="noopener">The Adaptive Radix Tree: ARTful Indexing for Main-Memory Databases</a> (V Leis, A Kemper, T Neumann 2013)</li><li><input checked="" disabled="" type="checkbox"> 📄 <a href="https://cs.stanford.edu/people/chrismre/cs345/rl/aries.pdf" target="_blank" rel="noopener">Aries: A Transaction Recovery Method Supporting Fine-Granularity Locking and Partial Rollbacks Using Write-Ahead Logging</a> (C Mohan et al 1992)</li><li><input checked="" disabled="" type="checkbox"> 📄 <a href="http://www.eecs.harvard.edu/~margo/cs165/papers/gp-lsm.pdf" target="_blank" rel="noopener">bLSM: A General Purpose Log Structured Merge Tree</a> (R Sears, R Ramakrishnan 2012)</li><li><input checked="" disabled="" type="checkbox"> 📄 <a href="http://www.cs.cmu.edu/~huanche1/publications/open_bwtree.pdf" target="_blank" rel="noopener">Building a Bw-Tree Takes More Than Just Buzz Words</a> (Z Wang et al 2018)</li><li><input checked="" disabled="" type="checkbox"> 📄 <a href="https://greensky00.github.io/pdf/jungle_hotstorage19.pdf" target="_blank" rel="noopener">Jungle: Towards Dynamically Adjustable Key-Value Store by Combining LSM-Tree and Copy-On-Write B+-Tree</a> (JS Ahn et al 2019)</li><li><input checked="" disabled="" type="checkbox"> 📄 <a href="https://www.microsoft.com/en-us/research/wp-content/uploads/2016/02/bw-tree-icde2013-final.pdf" target="_blank" rel="noopener">The Bw-Tree: A B-tree for New Hardware Platforms</a> (JJ Levandoski, DB Lomet, S Sengupta 2013)</li><li><input checked="" disabled="" type="checkbox"> 📄 <a href="https://www.cs.umb.edu/~poneil/lsmtree.pdf" target="_blank" rel="noopener">The Log-Structured Merge Tree</a> (P O’Neil, E Cheng, D Gawklik, E O’Neil 1996)</li><li><input checked="" disabled="" type="checkbox"> 📄 <a href="http://cgi.di.uoa.gr/~ad/M149/ubiquitous_btree.pdf" target="_blank" rel="noopener">The Ubiquitous B-Tree</a> (D Comer 1979)</li><li><input checked="" disabled="" type="checkbox"> 📄 <a href="https://www.usenix.org/system/files/conference/fast16/fast16-papers-lu.pdf" target="_blank" rel="noopener">WiscKey: Separating Keys from Values in SSD-Conscious Storage</a> (L Lu, TS Pillai, AC Arpaci-Dusseau, RH Arpaci-Dusseau 2016)</li></ul><h2 id="Verification"><a href="#Verification" class="headerlink" title="Verification"></a>Verification</h2><ul><li><input checked="" disabled="" type="checkbox"> 🎥 <a href="https://www.youtube.com/watch?v=Np46NQ6lqP8" target="_blank" rel="noopener">SQLancer: Finding Logic Bugs in Database Management Systems</a> (M Rigger 2020)</li><li><input checked="" disabled="" type="checkbox"> 📄 <a href="https://www.usenix.org/system/files/conference/osdi14/osdi14-paper-zheng_mai.pdf" target="_blank" rel="noopener">Torturing Databases for Fun and Profit</a> (M Zheng et al 2014)</li></ul><h2 id="Vendors"><a href="#Vendors" class="headerlink" title="Vendors"></a>Vendors</h2><h3 id="CockroachDB"><a href="#CockroachDB" class="headerlink" title="CockroachDB"></a>CockroachDB</h3><ul><li><input checked="" disabled="" type="checkbox"> 🔗 <a href="https://www.cockroachlabs.com/docs/stable/architecture/overview.html" target="_blank" rel="noopener"><strong>Architecture Overview</strong></a></li><li><input checked="" disabled="" type="checkbox"> 📄 <a href="https://dl.acm.org/doi/pdf/10.1145/3318464.3386134" target="_blank" rel="noopener"><strong>CockroachDB: The Resilient Geo-Distributed SQL Database</strong></a> (R Taft et al 2020)</li><li><input checked="" disabled="" type="checkbox"> 💬 <a href="https://www.cockroachlabs.com/blog/serializable-lockless-distributed-isolation-cockroachdb/" target="_blank" rel="noopener"><strong>Serializable, Lockless, Distributed: Isolation in CockroachDB</strong></a> (M Tracy 2016)</li><li><input checked="" disabled="" type="checkbox"> 💬 <a href="https://www.cockroachlabs.com/blog/building-cost-based-sql-optimizer/" target="_blank" rel="noopener">How We Built a Cost-Based SQL Optimizer</a> (A Kimball 2018)</li><li><input checked="" disabled="" type="checkbox"> 💬 <a href="https://www.cockroachlabs.com/blog/living-without-atomic-clocks/" target="_blank" rel="noopener">Living Without Atomic Clocks</a> (S Kimball 2016)</li></ul><h3 id="FaunaDB"><a href="#FaunaDB" class="headerlink" title="FaunaDB"></a>FaunaDB</h3><ul><li><input disabled="" type="checkbox"> 💬 <a href="https://fauna.com/blog/distributed-consistency-at-scale-spanner-vs-calvin" target="_blank" rel="noopener">Spanner vs. Calvin: Distributed Consistency at Scale</a> (DJ Abadi 2017)</li><li><input checked="" disabled="" type="checkbox"> 💬 <a href="https://fauna.com/blog/time-traveling-databases" target="_blank" rel="noopener">Time-Traveling Databases: Exploring Temporality in FaunaDB</a> (M Freels 2016)</li><li><input checked="" disabled="" type="checkbox"> 💬 <a href="https://fauna.com/blog/unifying-relational-document-graph-and-temporal-data-models" target="_blank" rel="noopener">Unifying Relational, Document, Graph, and Temporal Data Models</a> (C Anderson 2018)</li></ul><h3 id="Google-Bigtable"><a href="#Google-Bigtable" class="headerlink" title="Google Bigtable"></a>Google Bigtable</h3><ul><li><input checked="" disabled="" type="checkbox"> 📄 <a href="https://static.googleusercontent.com/media/research.google.com/en//archive/bigtable-osdi06.pdf" target="_blank" rel="noopener"><strong>Bigtable: A Distributed Storage System for Structured Data</strong></a> (F Chang et al 2006) <em>“The Bigtable paper”</em></li></ul><h3 id="Google-F1"><a href="#Google-F1" class="headerlink" title="Google F1"></a>Google F1</h3><ul><li><input checked="" disabled="" type="checkbox"> 📄 <a href="https://static.googleusercontent.com/media/research.google.com/en//pubs/archive/41344.pdf" target="_blank" rel="noopener"><strong>F1: A Distributed SQL Database That Scales</strong></a> <em>“The F1 paper”</em></li></ul><h3 id="Google-Spanner"><a href="#Google-Spanner" class="headerlink" title="Google Spanner"></a>Google Spanner</h3><ul><li><input checked="" disabled="" type="checkbox"> 📄 <a href="http://static.googleusercontent.com/media/research.google.com/en//pubs/archive/39966.pdf" target="_blank" rel="noopener"><strong>Spanner: Google’s Globally-Distributed Database</strong></a> (J Corbett et al 2012) <em>“The Spanner paper”</em></li><li><input checked="" disabled="" type="checkbox"> 📄 <a href="https://dl.acm.org/doi/pdf/10.1145/3035918.3056103" target="_blank" rel="noopener">Spanner: Becoming a SQL System</a> (DF Bacon et al 2017)</li><li><input checked="" disabled="" type="checkbox"> 📄 <a href="https://static.googleusercontent.com/media/research.google.com/en//pubs/archive/45855.pdf" target="_blank" rel="noopener">Spanner, TrueTime &amp; The CAP Theorem</a> (E Brewer 2017)</li></ul><h3 id="PostgreSQL"><a href="#PostgreSQL" class="headerlink" title="PostgreSQL"></a>PostgreSQL</h3><ul><li><input checked="" disabled="" type="checkbox"> 📄 <a href="https://arxiv.org/pdf/1901.01973.pdf" target="_blank" rel="noopener"><strong>Looking Back at Postgres</strong></a> (JM Hellerstein 2019)</li><li><input checked="" disabled="" type="checkbox"> 💬 <a href="https://brandur.org/postgres-atomicity" target="_blank" rel="noopener">How Postgres Makes Transactions Atomic</a> (B Leach 2017)</li><li><input checked="" disabled="" type="checkbox"> 📄 <a href="https://drkp.net/papers/ssi-vldb12.pdf" target="_blank" rel="noopener">Serializable Snapshot Isolation in PostgreSQL</a> (DRK Ports, K Grittner 2012)</li><li><input checked="" disabled="" type="checkbox"> 📖 <a href="http://www.interdb.jp/pg/" target="_blank" rel="noopener">The Internals of PostgreSQL</a> (H Suzuki 2015)</li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Database </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Database </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>深入理解 Kubernetes 之 Kube-scheduler</title>
      <link href="/2020/06/02/k8s04/"/>
      <url>/2020/06/02/k8s04/</url>
      
        <content type="html"><![CDATA[<h1 id="深入理解-Kubernetes-之-Kube-scheduler"><a href="#深入理解-Kubernetes-之-Kube-scheduler" class="headerlink" title="深入理解 Kubernetes 之 Kube-scheduler"></a>深入理解 Kubernetes 之 Kube-scheduler</h1><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>Kube-scheduler 是 kubernetes 的核心组件之一，也是所有核心组件之间功能比较单一的，其代码也相对容易理解。kube-scheduler 的目的就是为每一个 pod 选择一个合适的 node，整体流程可以概括为三步，获取未调度的 podList，通过执行一系列调度算法为 pod 选择一个合适的 node，提交数据到 apiserver，其核心则是一系列调度算法的设计与执行。</p><h2 id="调度算法"><a href="#调度算法" class="headerlink" title="调度算法"></a>调度算法</h2><p>官方对 kube-scheduler 的调度流程描述 <a href="https://github.com/kubernetes/community/blob/master/contributors/devel/sig-scheduling/scheduler.md" target="_blank" rel="noopener">The Kubernetes Scheduler</a>：</p><pre><code>对于一个给定的pod+---------------------------------------------+|             可用于调度的nodes如下：           ||  +--------+     +--------+     +--------+   ||  | node 1 |     | node 2 |     | node 3 |   ||  +--------+     +--------+     +--------+   |+----------------------+----------------------+                       |                       v+----------------------+----------------------+|             初步过滤: node 3 资源不足          |+----------------------+----------------------+                       |                       v+----------------------+----------------------+|                 剩下的nodes:                 ||     +--------+               +--------+     ||     | node 1 |               | node 2 |     ||     +--------+               +--------+     |+----------------------+----------------------+                       |                       v+----------------------+----------------------+|优先级算法计算结果:    node 1: 分数=2            ||                    node 2: 分数=5            |+----------------------+----------------------+                       |                       v            选择分值最高的节点 = node 2</code></pre><p>Scheduler 为每个 pod 寻找一个适合其运行的 node，大体分成三步：</p><ol><li>通过一系列的 <code>predicates</code> 过滤掉不能运行 pod 的 node，比如一个 pod 需要 500M 的内存，有些节点剩余内存只有 100M 了，就会被剔除；</li><li>通过一系列的 <code>priority functions</code> 给剩下的 node 排一个等级，寻找能够运行 pod 的若干 node 中最合适的一个 node；</li><li>得分最高的一个 node，也就是被 <code>priority functions</code> 选中的 node 胜出了，获得了跑对应 pod 的资格。</li></ol><h2 id="源码分析"><a href="#源码分析" class="headerlink" title="源码分析"></a>源码分析</h2><h3 id="主流程："><a href="#主流程：" class="headerlink" title="主流程："></a>主流程：</h3><p><img src="/images/2020/scheduler.png" alt=""></p><p>scheduler的源码可以分为3层：</p><ul><li><code>cmd/kube-scheduler/scheduler.go</code>: main() 函数入口位置，在scheduler过程开始被调用前的一系列初始化工作。</li><li><code>pkg/scheduler/scheduler.go</code>: 调度框架的整体逻辑，在具体的调度算法之上的框架性的代码。</li><li><code>pkg/scheduler/core/generic_scheduler.go</code>: 具体的计算哪些node适合跑哪些pod的算法。</li></ul><h4 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h4><p>代码路径：</p><p><a href="https://github.com/kubernetes/kubernetes/blob/v1.18.0/cmd/kube-scheduler/scheduler.go" target="_blank" rel="noopener">/kubernetes/cmd/kube-scheduler/scheduler.go</a></p><pre class=" language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    rand<span class="token punctuation">.</span><span class="token function">Seed</span><span class="token punctuation">(</span>time<span class="token punctuation">.</span><span class="token function">Now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">UnixNano</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    command <span class="token operator">:=</span> app<span class="token punctuation">.</span><span class="token function">NewSchedulerCommand</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    pflag<span class="token punctuation">.</span>CommandLine<span class="token punctuation">.</span><span class="token function">SetNormalizeFunc</span><span class="token punctuation">(</span>cliflag<span class="token punctuation">.</span>WordSepNormalizeFunc<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// utilflag.InitFlags()</span>    logs<span class="token punctuation">.</span><span class="token function">InitLogs</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">defer</span> logs<span class="token punctuation">.</span><span class="token function">FlushLogs</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> err <span class="token operator">:=</span> command<span class="token punctuation">.</span><span class="token function">Execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>        os<span class="token punctuation">.</span><span class="token function">Exit</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p><a href="https://github.com/kubernetes/kubernetes/blob/v1.18.0/cmd/kube-scheduler/app/server.go" target="_blank" rel="noopener">/kubernetes//cmd/kube-scheduler/app/server.go</a></p><pre class=" language-go"><code class="language-go"><span class="token comment" spellcheck="true">// NewSchedulerCommand creates a *cobra.Command object with default parameters</span><span class="token keyword">func</span> <span class="token function">NewSchedulerCommand</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span>cobra<span class="token punctuation">.</span>Command <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// ...</span>    cmd <span class="token operator">:=</span> <span class="token operator">&amp;</span>cobra<span class="token punctuation">.</span>Command<span class="token punctuation">{</span>        Use<span class="token punctuation">:</span> <span class="token string">"kube-scheduler"</span><span class="token punctuation">,</span>        Long<span class="token punctuation">:</span> <span class="token string">`...`</span><span class="token punctuation">,</span>        Run<span class="token punctuation">:</span> <span class="token keyword">func</span><span class="token punctuation">(</span>cmd <span class="token operator">*</span>cobra<span class="token punctuation">.</span>Command<span class="token punctuation">,</span> args <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// ...</span>            stopCh <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">chan</span> <span class="token keyword">struct</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span>            <span class="token keyword">if</span> err <span class="token operator">:=</span> <span class="token function">Run</span><span class="token punctuation">(</span>c<span class="token punctuation">.</span><span class="token function">Complete</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> stopCh<span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> cmd<span class="token punctuation">}</span></code></pre><h4 id="Run"><a href="#Run" class="headerlink" title="Run()"></a>Run()</h4><p>kube-scheduler 主函数在 <code>Run</code> 函数中，该函数主要的工作包括：</p><ol><li>初始化 scheduler 对象</li><li>启动 kube-scheduler server，kube-scheduler 监听 10251 和 10259 端口，10251 端口不需要认证，可以获取 healthz metrics 等信息，10259 为安全端口，需要认证</li><li>启动所有的 informer</li><li>执行 <code>sched.Run()</code> 方法，执行主调度逻辑</li></ol><pre class=" language-go"><code class="language-go"><span class="token comment" spellcheck="true">// Run executes the scheduler based on the given configuration. It only returns on error or when context is done.</span><span class="token keyword">func</span> <span class="token function">Run</span><span class="token punctuation">(</span>ctx context<span class="token punctuation">.</span>Context<span class="token punctuation">,</span> cc schedulerserverconfig<span class="token punctuation">.</span>CompletedConfig<span class="token punctuation">,</span> outOfTreeRegistryOptions <span class="token operator">...</span>Option<span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">{</span><span class="token operator">...</span>    <span class="token comment" spellcheck="true">// 初始化 scheduler.</span>    sched<span class="token punctuation">,</span> err <span class="token operator">:=</span> scheduler<span class="token punctuation">.</span><span class="token function">New</span><span class="token punctuation">(</span>cc<span class="token punctuation">.</span>Client<span class="token punctuation">,</span>        cc<span class="token punctuation">.</span>InformerFactory<span class="token punctuation">,</span>        cc<span class="token punctuation">.</span>PodInformer<span class="token punctuation">,</span>        recorderFactory<span class="token punctuation">,</span>        ctx<span class="token punctuation">.</span><span class="token function">Done</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        scheduler<span class="token punctuation">.</span><span class="token function">WithProfiles</span><span class="token punctuation">(</span>cc<span class="token punctuation">.</span>ComponentConfig<span class="token punctuation">.</span>Profiles<span class="token operator">...</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        scheduler<span class="token punctuation">.</span><span class="token function">WithAlgorithmSource</span><span class="token punctuation">(</span>cc<span class="token punctuation">.</span>ComponentConfig<span class="token punctuation">.</span>AlgorithmSource<span class="token punctuation">)</span><span class="token punctuation">,</span>        scheduler<span class="token punctuation">.</span><span class="token function">WithPreemptionDisabled</span><span class="token punctuation">(</span>cc<span class="token punctuation">.</span>ComponentConfig<span class="token punctuation">.</span>DisablePreemption<span class="token punctuation">)</span><span class="token punctuation">,</span>        scheduler<span class="token punctuation">.</span><span class="token function">WithPercentageOfNodesToScore</span><span class="token punctuation">(</span>cc<span class="token punctuation">.</span>ComponentConfig<span class="token punctuation">.</span>PercentageOfNodesToScore<span class="token punctuation">)</span><span class="token punctuation">,</span>        scheduler<span class="token punctuation">.</span><span class="token function">WithBindTimeoutSeconds</span><span class="token punctuation">(</span>cc<span class="token punctuation">.</span>ComponentConfig<span class="token punctuation">.</span>BindTimeoutSeconds<span class="token punctuation">)</span><span class="token punctuation">,</span>        scheduler<span class="token punctuation">.</span><span class="token function">WithFrameworkOutOfTreeRegistry</span><span class="token punctuation">(</span>outOfTreeRegistry<span class="token punctuation">)</span><span class="token punctuation">,</span>        scheduler<span class="token punctuation">.</span><span class="token function">WithPodMaxBackoffSeconds</span><span class="token punctuation">(</span>cc<span class="token punctuation">.</span>ComponentConfig<span class="token punctuation">.</span>PodMaxBackoffSeconds<span class="token punctuation">)</span><span class="token punctuation">,</span>        scheduler<span class="token punctuation">.</span><span class="token function">WithPodInitialBackoffSeconds</span><span class="token punctuation">(</span>cc<span class="token punctuation">.</span>ComponentConfig<span class="token punctuation">.</span>PodInitialBackoffSeconds<span class="token punctuation">)</span><span class="token punctuation">,</span>        scheduler<span class="token punctuation">.</span><span class="token function">WithExtenders</span><span class="token punctuation">(</span>cc<span class="token punctuation">.</span>ComponentConfig<span class="token punctuation">.</span>Extenders<span class="token operator">...</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// 启动广播事件</span>    <span class="token keyword">if</span> cc<span class="token punctuation">.</span>Broadcaster <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token operator">&amp;&amp;</span> cc<span class="token punctuation">.</span>EventClient <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>        cc<span class="token punctuation">.</span>Broadcaster<span class="token punctuation">.</span><span class="token function">StartRecordingToSink</span><span class="token punctuation">(</span>ctx<span class="token punctuation">.</span><span class="token function">Done</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> cc<span class="token punctuation">.</span>CoreBroadcaster <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token operator">&amp;&amp;</span> cc<span class="token punctuation">.</span>CoreEventClient <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>        cc<span class="token punctuation">.</span>CoreBroadcaster<span class="token punctuation">.</span><span class="token function">StartRecordingToSink</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>corev1<span class="token punctuation">.</span>EventSinkImpl<span class="token punctuation">{</span>Interface<span class="token punctuation">:</span> cc<span class="token punctuation">.</span>CoreEventClient<span class="token punctuation">.</span><span class="token function">Events</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token operator">...</span>     <span class="token comment" spellcheck="true">// 启动 http server.</span>    <span class="token keyword">if</span> cc<span class="token punctuation">.</span>InsecureServing <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>        separateMetrics <span class="token operator">:=</span> cc<span class="token punctuation">.</span>InsecureMetricsServing <span class="token operator">!=</span> <span class="token boolean">nil</span>        handler <span class="token operator">:=</span> <span class="token function">buildHandlerChain</span><span class="token punctuation">(</span><span class="token function">newHealthzHandler</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>cc<span class="token punctuation">.</span>ComponentConfig<span class="token punctuation">,</span> separateMetrics<span class="token punctuation">,</span> checks<span class="token operator">...</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> <span class="token boolean">nil</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> err <span class="token operator">:=</span> cc<span class="token punctuation">.</span>InsecureServing<span class="token punctuation">.</span><span class="token function">Serve</span><span class="token punctuation">(</span>handler<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> ctx<span class="token punctuation">.</span><span class="token function">Done</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> fmt<span class="token punctuation">.</span><span class="token function">Errorf</span><span class="token punctuation">(</span><span class="token string">"failed to start healthz server: %v"</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> cc<span class="token punctuation">.</span>InsecureMetricsServing <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>        handler <span class="token operator">:=</span> <span class="token function">buildHandlerChain</span><span class="token punctuation">(</span><span class="token function">newMetricsHandler</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>cc<span class="token punctuation">.</span>ComponentConfig<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> <span class="token boolean">nil</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> err <span class="token operator">:=</span> cc<span class="token punctuation">.</span>InsecureMetricsServing<span class="token punctuation">.</span><span class="token function">Serve</span><span class="token punctuation">(</span>handler<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> ctx<span class="token punctuation">.</span><span class="token function">Done</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> fmt<span class="token punctuation">.</span><span class="token function">Errorf</span><span class="token punctuation">(</span><span class="token string">"failed to start metrics server: %v"</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> cc<span class="token punctuation">.</span>SecureServing <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>        handler <span class="token operator">:=</span> <span class="token function">buildHandlerChain</span><span class="token punctuation">(</span><span class="token function">newHealthzHandler</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>cc<span class="token punctuation">.</span>ComponentConfig<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> checks<span class="token operator">...</span><span class="token punctuation">)</span><span class="token punctuation">,</span> cc<span class="token punctuation">.</span>Authentication<span class="token punctuation">.</span>Authenticator<span class="token punctuation">,</span> cc<span class="token punctuation">.</span>Authorization<span class="token punctuation">.</span>Authorizer<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">// TODO: handle stoppedCh returned by c.SecureServing.Serve</span>        <span class="token keyword">if</span> <span class="token boolean">_</span><span class="token punctuation">,</span> err <span class="token operator">:=</span> cc<span class="token punctuation">.</span>SecureServing<span class="token punctuation">.</span><span class="token function">Serve</span><span class="token punctuation">(</span>handler<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> ctx<span class="token punctuation">.</span><span class="token function">Done</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// fail early for secure handlers, removing the old error loop from above</span>            <span class="token keyword">return</span> fmt<span class="token punctuation">.</span><span class="token function">Errorf</span><span class="token punctuation">(</span><span class="token string">"failed to start secure server: %v"</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 启动所有 informer</span>    <span class="token keyword">go</span> cc<span class="token punctuation">.</span>PodInformer<span class="token punctuation">.</span><span class="token function">Informer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Run</span><span class="token punctuation">(</span>ctx<span class="token punctuation">.</span><span class="token function">Done</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    cc<span class="token punctuation">.</span>InformerFactory<span class="token punctuation">.</span><span class="token function">Start</span><span class="token punctuation">(</span>ctx<span class="token punctuation">.</span><span class="token function">Done</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// Wait for all caches to sync before scheduling.</span>    cc<span class="token punctuation">.</span>InformerFactory<span class="token punctuation">.</span><span class="token function">WaitForCacheSync</span><span class="token punctuation">(</span>ctx<span class="token punctuation">.</span><span class="token function">Done</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// 选举 leader</span>    <span class="token keyword">if</span> cc<span class="token punctuation">.</span>LeaderElection <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>        cc<span class="token punctuation">.</span>LeaderElection<span class="token punctuation">.</span>Callbacks <span class="token operator">=</span> leaderelection<span class="token punctuation">.</span>LeaderCallbacks<span class="token punctuation">{</span>            OnStartedLeading<span class="token punctuation">:</span> sched<span class="token punctuation">.</span>Run<span class="token punctuation">,</span>            OnStoppedLeading<span class="token punctuation">:</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                klog<span class="token punctuation">.</span><span class="token function">Fatalf</span><span class="token punctuation">(</span><span class="token string">"leaderelection lost"</span><span class="token punctuation">)</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token punctuation">}</span>        leaderElector<span class="token punctuation">,</span> err <span class="token operator">:=</span> leaderelection<span class="token punctuation">.</span><span class="token function">NewLeaderElector</span><span class="token punctuation">(</span><span class="token operator">*</span>cc<span class="token punctuation">.</span>LeaderElection<span class="token punctuation">)</span>        <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> fmt<span class="token punctuation">.</span><span class="token function">Errorf</span><span class="token punctuation">(</span><span class="token string">"couldn't create leader elector: %v"</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span>        <span class="token punctuation">}</span>        leaderElector<span class="token punctuation">.</span><span class="token function">Run</span><span class="token punctuation">(</span>ctx<span class="token punctuation">)</span>        <span class="token keyword">return</span> fmt<span class="token punctuation">.</span><span class="token function">Errorf</span><span class="token punctuation">(</span><span class="token string">"lost lease"</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 执行 sched.Run() 方法</span>    sched<span class="token punctuation">.</span><span class="token function">Run</span><span class="token punctuation">(</span>ctx<span class="token punctuation">)</span>    <span class="token keyword">return</span> fmt<span class="token punctuation">.</span><span class="token function">Errorf</span><span class="token punctuation">(</span><span class="token string">"finished without leader elect"</span><span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><h4 id="New"><a href="#New" class="headerlink" title="New()"></a>New()</h4><p>Scheduler 是如何初始化的</p><p>代码路径：</p><p><a href="https://github.com/kubernetes/kubernetes/blob/v1.18.0/pkg/scheduler/scheduler.go#L223" target="_blank" rel="noopener">kubernetes/pkg/scheduler/scheduler.go#L223</a></p><pre class=" language-go"><code class="language-go"><span class="token comment" spellcheck="true">// New returns a Scheduler</span><span class="token keyword">func</span> <span class="token function">New</span><span class="token punctuation">(</span>client clientset<span class="token punctuation">.</span>Interface<span class="token punctuation">,</span>    informerFactory informers<span class="token punctuation">.</span>SharedInformerFactory<span class="token punctuation">,</span>    podInformer coreinformers<span class="token punctuation">.</span>PodInformer<span class="token punctuation">,</span>    recorderFactory profile<span class="token punctuation">.</span>RecorderFactory<span class="token punctuation">,</span>    stopCh <span class="token operator">&lt;-</span><span class="token keyword">chan</span> <span class="token keyword">struct</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>    opts <span class="token operator">...</span>Option<span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token operator">*</span>Scheduler<span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token operator">...</span>    <span class="token comment" spellcheck="true">// 创建 scheduler 的配置文件</span>    configurator <span class="token operator">:=</span> <span class="token operator">&amp;</span>Configurator<span class="token punctuation">{</span>        client<span class="token punctuation">:</span>                   client<span class="token punctuation">,</span>        recorderFactory<span class="token punctuation">:</span>          recorderFactory<span class="token punctuation">,</span>        informerFactory<span class="token punctuation">:</span>          informerFactory<span class="token punctuation">,</span>        podInformer<span class="token punctuation">:</span>              podInformer<span class="token punctuation">,</span>        volumeBinder<span class="token punctuation">:</span>             volumeBinder<span class="token punctuation">,</span>        schedulerCache<span class="token punctuation">:</span>           schedulerCache<span class="token punctuation">,</span>        StopEverything<span class="token punctuation">:</span>           stopEverything<span class="token punctuation">,</span>        disablePreemption<span class="token punctuation">:</span>        options<span class="token punctuation">.</span>disablePreemption<span class="token punctuation">,</span>        percentageOfNodesToScore<span class="token punctuation">:</span> options<span class="token punctuation">.</span>percentageOfNodesToScore<span class="token punctuation">,</span>        bindTimeoutSeconds<span class="token punctuation">:</span>       options<span class="token punctuation">.</span>bindTimeoutSeconds<span class="token punctuation">,</span>        podInitialBackoffSeconds<span class="token punctuation">:</span> options<span class="token punctuation">.</span>podInitialBackoffSeconds<span class="token punctuation">,</span>        podMaxBackoffSeconds<span class="token punctuation">:</span>     options<span class="token punctuation">.</span>podMaxBackoffSeconds<span class="token punctuation">,</span>        enableNonPreempting<span class="token punctuation">:</span>      utilfeature<span class="token punctuation">.</span>DefaultFeatureGate<span class="token punctuation">.</span><span class="token function">Enabled</span><span class="token punctuation">(</span>kubefeatures<span class="token punctuation">.</span>NonPreemptingPriority<span class="token punctuation">)</span><span class="token punctuation">,</span>        profiles<span class="token punctuation">:</span>                 <span class="token function">append</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span>schedulerapi<span class="token punctuation">.</span><span class="token function">KubeSchedulerProfile</span><span class="token punctuation">(</span><span class="token boolean">nil</span><span class="token punctuation">)</span><span class="token punctuation">,</span> options<span class="token punctuation">.</span>profiles<span class="token operator">...</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        registry<span class="token punctuation">:</span>                 registry<span class="token punctuation">,</span>        nodeInfoSnapshot<span class="token punctuation">:</span>         snapshot<span class="token punctuation">,</span>        extenders<span class="token punctuation">:</span>                options<span class="token punctuation">.</span>extenders<span class="token punctuation">,</span>    <span class="token punctuation">}</span>    metrics<span class="token punctuation">.</span><span class="token function">Register</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// 加载默认的调度算法</span>    <span class="token keyword">var</span> sched <span class="token operator">*</span>Scheduler    source <span class="token operator">:=</span> options<span class="token punctuation">.</span>schedulerAlgorithmSource    <span class="token comment" spellcheck="true">// 创建调度算法有两种方式  Provider 和 用户指定的 Ploicy 文件（文件或Configmap)</span>    <span class="token keyword">switch</span> <span class="token punctuation">{</span>    <span class="token keyword">case</span> source<span class="token punctuation">.</span>Provider <span class="token operator">!=</span> <span class="token boolean">nil</span><span class="token punctuation">:</span>        <span class="token comment" spellcheck="true">// Create the config from a named algorithm provider.</span>        sc<span class="token punctuation">,</span> err <span class="token operator">:=</span> configurator<span class="token punctuation">.</span><span class="token function">createFromProvider</span><span class="token punctuation">(</span><span class="token operator">*</span>source<span class="token punctuation">.</span>Provider<span class="token punctuation">)</span>        <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> fmt<span class="token punctuation">.</span><span class="token function">Errorf</span><span class="token punctuation">(</span><span class="token string">"couldn't create scheduler using provider %q: %v"</span><span class="token punctuation">,</span> <span class="token operator">*</span>source<span class="token punctuation">.</span>Provider<span class="token punctuation">,</span> err<span class="token punctuation">)</span>        <span class="token punctuation">}</span>        sched <span class="token operator">=</span> sc    <span class="token keyword">case</span> source<span class="token punctuation">.</span>Policy <span class="token operator">!=</span> <span class="token boolean">nil</span><span class="token punctuation">:</span>        <span class="token comment" spellcheck="true">// Create the config from a user specified policy source.</span>        policy <span class="token operator">:=</span> <span class="token operator">&amp;</span>schedulerapi<span class="token punctuation">.</span>Policy<span class="token punctuation">{</span><span class="token punctuation">}</span>        <span class="token keyword">switch</span> <span class="token punctuation">{</span>        <span class="token keyword">case</span> source<span class="token punctuation">.</span>Policy<span class="token punctuation">.</span>File <span class="token operator">!=</span> <span class="token boolean">nil</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> err <span class="token operator">:=</span> <span class="token function">initPolicyFromFile</span><span class="token punctuation">(</span>source<span class="token punctuation">.</span>Policy<span class="token punctuation">.</span>File<span class="token punctuation">.</span>Path<span class="token punctuation">,</span> policy<span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> err            <span class="token punctuation">}</span>        <span class="token keyword">case</span> source<span class="token punctuation">.</span>Policy<span class="token punctuation">.</span>ConfigMap <span class="token operator">!=</span> <span class="token boolean">nil</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> err <span class="token operator">:=</span> <span class="token function">initPolicyFromConfigMap</span><span class="token punctuation">(</span>client<span class="token punctuation">,</span> source<span class="token punctuation">.</span>Policy<span class="token punctuation">.</span>ConfigMap<span class="token punctuation">,</span> policy<span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> err            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// Set extenders on the configurator now that we've decoded the policy</span>        <span class="token comment" spellcheck="true">// In this case, c.extenders should be nil since we're using a policy (and therefore not componentconfig,</span>        <span class="token comment" spellcheck="true">// which would have set extenders in the above instantiation of Configurator from CC options)</span>        configurator<span class="token punctuation">.</span>extenders <span class="token operator">=</span> policy<span class="token punctuation">.</span>Extenders        sc<span class="token punctuation">,</span> err <span class="token operator">:=</span> configurator<span class="token punctuation">.</span><span class="token function">createFromConfig</span><span class="token punctuation">(</span><span class="token operator">*</span>policy<span class="token punctuation">)</span>        <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> fmt<span class="token punctuation">.</span><span class="token function">Errorf</span><span class="token punctuation">(</span><span class="token string">"couldn't create scheduler from policy: %v"</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span>        <span class="token punctuation">}</span>        sched <span class="token operator">=</span> sc    <span class="token keyword">default</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> fmt<span class="token punctuation">.</span><span class="token function">Errorf</span><span class="token punctuation">(</span><span class="token string">"unsupported algorithm source: %v"</span><span class="token punctuation">,</span> source<span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// Additional tweaks to the config produced by the configurator.</span>    sched<span class="token punctuation">.</span>DisablePreemption <span class="token operator">=</span> options<span class="token punctuation">.</span>disablePreemption    sched<span class="token punctuation">.</span>StopEverything <span class="token operator">=</span> stopEverything    sched<span class="token punctuation">.</span>podConditionUpdater <span class="token operator">=</span> <span class="token operator">&amp;</span>podConditionUpdaterImpl<span class="token punctuation">{</span>client<span class="token punctuation">}</span>    sched<span class="token punctuation">.</span>podPreemptor <span class="token operator">=</span> <span class="token operator">&amp;</span>podPreemptorImpl<span class="token punctuation">{</span>client<span class="token punctuation">}</span>    sched<span class="token punctuation">.</span>scheduledPodsHasSynced <span class="token operator">=</span> podInformer<span class="token punctuation">.</span><span class="token function">Informer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>HasSynced    <span class="token function">addAllEventHandlers</span><span class="token punctuation">(</span>sched<span class="token punctuation">,</span> informerFactory<span class="token punctuation">,</span> podInformer<span class="token punctuation">)</span>    <span class="token keyword">return</span> sched<span class="token punctuation">,</span> <span class="token boolean">nil</span><span class="token punctuation">}</span></code></pre><h4 id="NewPodInformer"><a href="#NewPodInformer" class="headerlink" title="NewPodInformer()"></a>NewPodInformer()</h4><p>pod informer 的启动只监听 status.phase 不为 succeeded 以及 failed 状态的 pod，即非 terminating 的 pod。</p><p>代码路径： <code>pkg/scheduler/factory.go:444</code></p><pre class=" language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">NewPodInformer</span><span class="token punctuation">(</span>client clientset<span class="token punctuation">.</span>Interface<span class="token punctuation">,</span> resyncPeriod time<span class="token punctuation">.</span>Duration<span class="token punctuation">)</span> coreinformers<span class="token punctuation">.</span>PodInformer <span class="token punctuation">{</span>    selector <span class="token operator">:=</span> fields<span class="token punctuation">.</span><span class="token function">ParseSelectorOrDie</span><span class="token punctuation">(</span>        <span class="token string">"status.phase!="</span> <span class="token operator">+</span> <span class="token function">string</span><span class="token punctuation">(</span>v1<span class="token punctuation">.</span>PodSucceeded<span class="token punctuation">)</span> <span class="token operator">+</span>            <span class="token string">",status.phase!="</span> <span class="token operator">+</span> <span class="token function">string</span><span class="token punctuation">(</span>v1<span class="token punctuation">.</span>PodFailed<span class="token punctuation">)</span><span class="token punctuation">)</span>    lw <span class="token operator">:=</span> cache<span class="token punctuation">.</span><span class="token function">NewListWatchFromClient</span><span class="token punctuation">(</span>client<span class="token punctuation">.</span><span class="token function">CoreV1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">RESTClient</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">string</span><span class="token punctuation">(</span>v1<span class="token punctuation">.</span>ResourcePods<span class="token punctuation">)</span><span class="token punctuation">,</span> metav1<span class="token punctuation">.</span>NamespaceAll<span class="token punctuation">,</span> selector<span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token operator">&amp;</span>podInformer<span class="token punctuation">{</span>        informer<span class="token punctuation">:</span> cache<span class="token punctuation">.</span><span class="token function">NewSharedIndexInformer</span><span class="token punctuation">(</span>lw<span class="token punctuation">,</span> <span class="token operator">&amp;</span>v1<span class="token punctuation">.</span>Pod<span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> resyncPeriod<span class="token punctuation">,</span> cache<span class="token punctuation">.</span>Indexers<span class="token punctuation">{</span>cache<span class="token punctuation">.</span>NamespaceIndex<span class="token punctuation">:</span> cache<span class="token punctuation">.</span>MetaNamespaceIndexFunc<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="Scheduler-Run"><a href="#Scheduler-Run" class="headerlink" title="Scheduler.Run()"></a>Scheduler.Run()</h4><p><code>sched.Run()</code> 调度循环逻辑，若 informer 中的 cache 同步完成后会启动一个循环逻辑执行 <code>sched.scheduleOne</code> 方法。</p><p>代码路径：<code>pkg/scheduler/scheduler.go:363</code></p><pre><code>// Run begins watching and scheduling. It waits for cache to be synced, then starts scheduling and blocked until the context is done.func (sched *Scheduler) Run(ctx context.Context) {    if !cache.WaitForCacheSync(ctx.Done(), sched.scheduledPodsHasSynced) {        return    }    sched.SchedulingQueue.Run()    wait.UntilWithContext(ctx, sched.scheduleOne, 0)    sched.SchedulingQueue.Close()}</code></pre><p><code>scheduleOne()</code> 每次对一个 pod 进行调度，主要有以下步骤：</p><ul><li>从 scheduler 调度队列中取出一个 pod，如果该队列关闭则跳过</li><li>执行调度逻辑 <code>sched.schedule()</code> 返回通过预算及优选算法过滤后选出的最佳 node</li><li>如果过滤算法没有选出合适的 node，则返回 core.FitError</li><li>若没有合适的 node 会判断是否启用了抢占策略，若启用了则执行抢占机制</li><li>判断是否需要 VolumeScheduling 特性</li><li>执行 reserve plugin</li><li>pod 对应的 spec.NodeName 写上 scheduler 最终选择的 node，更新 scheduler cache</li><li>请求 apiserver 异步处理最终的绑定操作，写入到 etcd</li><li>执行 permit plugin</li><li>执行 prebind plugin</li><li>执行 postbind plugin</li></ul><p>代码路径：<code>pkg/scheduler/scheduler.go:548</code></p><pre class=" language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token punctuation">(</span>sched <span class="token operator">*</span>Scheduler<span class="token punctuation">)</span> <span class="token function">scheduleOne</span><span class="token punctuation">(</span>ctx context<span class="token punctuation">.</span>Context<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 取出 pod</span>    podInfo <span class="token operator">:=</span> sched<span class="token punctuation">.</span><span class="token function">NextPod</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// pod could be nil when schedulerQueue is closed</span>    <span class="token keyword">if</span> podInfo <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token operator">||</span> podInfo<span class="token punctuation">.</span>Pod <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span>    <span class="token punctuation">}</span>    pod <span class="token operator">:=</span> podInfo<span class="token punctuation">.</span>Pod    prof<span class="token punctuation">,</span> err <span class="token operator">:=</span> sched<span class="token punctuation">.</span><span class="token function">profileForPod</span><span class="token punctuation">(</span>pod<span class="token punctuation">)</span>    <span class="token keyword">if</span> sched<span class="token punctuation">.</span><span class="token function">skipPodSchedule</span><span class="token punctuation">(</span>prof<span class="token punctuation">,</span> pod<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span>    <span class="token punctuation">}</span>    klog<span class="token punctuation">.</span><span class="token function">V</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Infof</span><span class="token punctuation">(</span><span class="token string">"Attempting to schedule pod: %v/%v"</span><span class="token punctuation">,</span> pod<span class="token punctuation">.</span>Namespace<span class="token punctuation">,</span> pod<span class="token punctuation">.</span>Name<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// Synchronously attempt to find a fit for the pod.</span>    start <span class="token operator">:=</span> time<span class="token punctuation">.</span><span class="token function">Now</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    state <span class="token operator">:=</span> framework<span class="token punctuation">.</span><span class="token function">NewCycleState</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    state<span class="token punctuation">.</span><span class="token function">SetRecordPluginMetrics</span><span class="token punctuation">(</span>rand<span class="token punctuation">.</span><span class="token function">Intn</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> pluginMetricsSamplePercent<span class="token punctuation">)</span>    schedulingCycleCtx<span class="token punctuation">,</span> cancel <span class="token operator">:=</span> context<span class="token punctuation">.</span><span class="token function">WithCancel</span><span class="token punctuation">(</span>ctx<span class="token punctuation">)</span>    <span class="token keyword">defer</span> <span class="token function">cancel</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// 执行调度策略选择 node</span>    scheduleResult<span class="token punctuation">,</span> err <span class="token operator">:=</span> sched<span class="token punctuation">.</span>Algorithm<span class="token punctuation">.</span><span class="token function">Schedule</span><span class="token punctuation">(</span>schedulingCycleCtx<span class="token punctuation">,</span> prof<span class="token punctuation">,</span> state<span class="token punctuation">,</span> pod<span class="token punctuation">)</span>    <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// Schedule() may have failed because the pod would not fit on any host, so we try to</span>        <span class="token comment" spellcheck="true">// preempt, with the expectation that the next time the pod is tried for scheduling it</span>        <span class="token comment" spellcheck="true">// will fit due to the preemption. It is also possible that a different pod will schedule</span>        <span class="token comment" spellcheck="true">// into the resources that were preempted, but this is harmless.</span>        <span class="token keyword">if</span> fitError<span class="token punctuation">,</span> ok <span class="token operator">:=</span> err<span class="token punctuation">.</span><span class="token punctuation">(</span><span class="token operator">*</span>core<span class="token punctuation">.</span>FitError<span class="token punctuation">)</span><span class="token punctuation">;</span> ok <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 若启用抢占机制则执行</span>            <span class="token keyword">if</span> sched<span class="token punctuation">.</span>DisablePreemption <span class="token punctuation">{</span>                klog<span class="token punctuation">.</span><span class="token function">V</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Infof</span><span class="token punctuation">(</span><span class="token string">"Pod priority feature is not enabled or preemption is disabled by scheduler configuration."</span> <span class="token operator">+</span>                    <span class="token string">" No preemption is performed."</span><span class="token punctuation">)</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                preemptionStartTime <span class="token operator">:=</span> time<span class="token punctuation">.</span><span class="token function">Now</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                sched<span class="token punctuation">.</span><span class="token function">preempt</span><span class="token punctuation">(</span>schedulingCycleCtx<span class="token punctuation">,</span> prof<span class="token punctuation">,</span> state<span class="token punctuation">,</span> pod<span class="token punctuation">,</span> fitError<span class="token punctuation">)</span>                metrics<span class="token punctuation">.</span>PreemptionAttempts<span class="token punctuation">.</span><span class="token function">Inc</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                metrics<span class="token punctuation">.</span>SchedulingAlgorithmPreemptionEvaluationDuration<span class="token punctuation">.</span><span class="token function">Observe</span><span class="token punctuation">(</span>metrics<span class="token punctuation">.</span><span class="token function">SinceInSeconds</span><span class="token punctuation">(</span>preemptionStartTime<span class="token punctuation">)</span><span class="token punctuation">)</span>                metrics<span class="token punctuation">.</span>DeprecatedSchedulingDuration<span class="token punctuation">.</span><span class="token function">WithLabelValues</span><span class="token punctuation">(</span>metrics<span class="token punctuation">.</span>PreemptionEvaluation<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Observe</span><span class="token punctuation">(</span>metrics<span class="token punctuation">.</span><span class="token function">SinceInSeconds</span><span class="token punctuation">(</span>preemptionStartTime<span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            klog<span class="token punctuation">.</span><span class="token function">Errorf</span><span class="token punctuation">(</span><span class="token string">"error selecting node for pod: %v"</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span>            metrics<span class="token punctuation">.</span>PodScheduleErrors<span class="token punctuation">.</span><span class="token function">Inc</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span>        sched<span class="token punctuation">.</span><span class="token function">recordSchedulingFailure</span><span class="token punctuation">(</span>prof<span class="token punctuation">,</span> podInfo<span class="token punctuation">.</span><span class="token function">DeepCopy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> err<span class="token punctuation">,</span> v1<span class="token punctuation">.</span>PodReasonUnschedulable<span class="token punctuation">,</span> err<span class="token punctuation">.</span><span class="token function">Error</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">return</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 判断是否需要 VolumeScheduling 特性</span>    allBound<span class="token punctuation">,</span> err <span class="token operator">:=</span> sched<span class="token punctuation">.</span>VolumeBinder<span class="token punctuation">.</span><span class="token function">AssumePodVolumes</span><span class="token punctuation">(</span>assumedPod<span class="token punctuation">,</span> scheduleResult<span class="token punctuation">.</span>SuggestedHost<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// 执行 "reserve" plugins</span>    <span class="token keyword">if</span> sts <span class="token operator">:=</span> prof<span class="token punctuation">.</span><span class="token function">RunReservePlugins</span><span class="token punctuation">(</span>schedulingCycleCtx<span class="token punctuation">,</span> state<span class="token punctuation">,</span> assumedPod<span class="token punctuation">,</span> scheduleResult<span class="token punctuation">.</span>SuggestedHost<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">!</span>sts<span class="token punctuation">.</span><span class="token function">IsSuccess</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        sched<span class="token punctuation">.</span><span class="token function">recordSchedulingFailure</span><span class="token punctuation">(</span>prof<span class="token punctuation">,</span> assumedPodInfo<span class="token punctuation">,</span> sts<span class="token punctuation">.</span><span class="token function">AsError</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> SchedulerError<span class="token punctuation">,</span> sts<span class="token punctuation">.</span><span class="token function">Message</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        metrics<span class="token punctuation">.</span>PodScheduleErrors<span class="token punctuation">.</span><span class="token function">Inc</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">return</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// assume modifies `assumedPod` by setting NodeName=scheduleResult.SuggestedHost</span>    <span class="token comment" spellcheck="true">// 为 pod 设置 NodeName 字段，更新 scheduler 缓存</span>    err <span class="token operator">=</span> sched<span class="token punctuation">.</span><span class="token function">assume</span><span class="token punctuation">(</span>assumedPod<span class="token punctuation">,</span> scheduleResult<span class="token punctuation">.</span>SuggestedHost<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// 执行 permit 插件</span>    runPermitStatus <span class="token operator">:=</span> prof<span class="token punctuation">.</span><span class="token function">RunPermitPlugins</span><span class="token punctuation">(</span>schedulingCycleCtx<span class="token punctuation">,</span> state<span class="token punctuation">,</span> assumedPod<span class="token punctuation">,</span> scheduleResult<span class="token punctuation">.</span>SuggestedHost<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// 请求apiserver，异步处理最终的绑定，写入到 etcd</span>    <span class="token keyword">go</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// Bind volumes first before Pod</span>        <span class="token keyword">if</span> <span class="token operator">!</span>allBound <span class="token punctuation">{</span>            err <span class="token operator">:=</span> sched<span class="token punctuation">.</span><span class="token function">bindVolumes</span><span class="token punctuation">(</span>assumedPod<span class="token punctuation">)</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 执行 "prebind" plugins</span>        err <span class="token operator">:=</span> sched<span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span>bindingCycleCtx<span class="token punctuation">,</span> prof<span class="token punctuation">,</span> assumedPod<span class="token punctuation">,</span> scheduleResult<span class="token punctuation">.</span>SuggestedHost<span class="token punctuation">,</span> state<span class="token punctuation">)</span>        metrics<span class="token punctuation">.</span>E2eSchedulingLatency<span class="token punctuation">.</span><span class="token function">Observe</span><span class="token punctuation">(</span>metrics<span class="token punctuation">.</span><span class="token function">SinceInSeconds</span><span class="token punctuation">(</span>start<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 执行 "postbind" plugins</span>            prof<span class="token punctuation">.</span><span class="token function">RunPostBindPlugins</span><span class="token punctuation">(</span>bindingCycleCtx<span class="token punctuation">,</span> state<span class="token punctuation">,</span> assumedPod<span class="token punctuation">,</span> scheduleResult<span class="token punctuation">.</span>SuggestedHost<span class="token punctuation">)</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><p><code>scheduleOne()</code> 中通过调用 <code>sched.schedule()</code> 来执行预选与优选算法处理：</p><p><code>ScheduleAlgorithm</code> 是一个 interface，主要包含三个方法，GenericScheduler 是其具体的实现：</p><p>代码路径：<code>pkg/scheduler/core/generic_scheduler.go:104</code></p><pre class=" language-go"><code class="language-go"><span class="token comment" spellcheck="true">// ScheduleAlgorithm is an interface implemented by things that know how to schedule pods</span><span class="token comment" spellcheck="true">// onto machines.</span><span class="token comment" spellcheck="true">// TODO: Rename this type.</span><span class="token keyword">type</span> ScheduleAlgorithm <span class="token keyword">interface</span> <span class="token punctuation">{</span>    <span class="token function">Schedule</span><span class="token punctuation">(</span>context<span class="token punctuation">.</span>Context<span class="token punctuation">,</span> <span class="token operator">*</span>profile<span class="token punctuation">.</span>Profile<span class="token punctuation">,</span> <span class="token operator">*</span>framework<span class="token punctuation">.</span>CycleState<span class="token punctuation">,</span> <span class="token operator">*</span>v1<span class="token punctuation">.</span>Pod<span class="token punctuation">)</span> <span class="token punctuation">(</span>scheduleResult ScheduleResult<span class="token punctuation">,</span> err <span class="token builtin">error</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// Preempt receives scheduling errors for a pod and tries to create room for</span>    <span class="token comment" spellcheck="true">// the pod by preempting lower priority pods if possible.</span>    <span class="token comment" spellcheck="true">// It returns the node where preemption happened, a list of preempted pods, a</span>    <span class="token comment" spellcheck="true">// list of pods whose nominated node name should be removed, and error if any.</span>    <span class="token function">Preempt</span><span class="token punctuation">(</span>context<span class="token punctuation">.</span>Context<span class="token punctuation">,</span> <span class="token operator">*</span>profile<span class="token punctuation">.</span>Profile<span class="token punctuation">,</span> <span class="token operator">*</span>framework<span class="token punctuation">.</span>CycleState<span class="token punctuation">,</span> <span class="token operator">*</span>v1<span class="token punctuation">.</span>Pod<span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>selectedNode <span class="token operator">*</span>v1<span class="token punctuation">.</span>Node<span class="token punctuation">,</span> preemptedPods <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">*</span>v1<span class="token punctuation">.</span>Pod<span class="token punctuation">,</span> cleanupNominatedPods <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">*</span>v1<span class="token punctuation">.</span>Pod<span class="token punctuation">,</span> err <span class="token builtin">error</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// Prioritizers returns a slice of priority config. This is exposed for</span>    <span class="token comment" spellcheck="true">// testing.</span>    <span class="token function">Extenders</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>SchedulerExtender<span class="token punctuation">}</span></code></pre><ul><li><code>Schedule()</code>：正常调度逻辑，包含预算与优选算法的执行</li><li><code>Preempt()</code>：抢占策略，在 pod 调度发生失败的时候尝试抢占低优先级的 pod，函数返回发生抢占的 node，被 抢占的 pods 列表，nominated node name 需要被移除的 pods 列表以及 error</li><li><code>Extenders()</code> 外部流程</li></ul><h4 id="genericScheduler-Schedule"><a href="#genericScheduler-Schedule" class="headerlink" title="genericScheduler.Schedule()"></a>genericScheduler.Schedule()</h4><p>代码路径：<code>pkg/scheduler/core/generic_scheduler.go:150</code></p><pre class=" language-go"><code class="language-go"><span class="token comment" spellcheck="true">// Schedule tries to schedule the given pod to one of the nodes in the node list.</span><span class="token comment" spellcheck="true">// If it succeeds, it will return the name of the node.</span><span class="token comment" spellcheck="true">// If it fails, it will return a FitError error with reasons.</span><span class="token keyword">func</span> <span class="token punctuation">(</span>g <span class="token operator">*</span>genericScheduler<span class="token punctuation">)</span> <span class="token function">Schedule</span><span class="token punctuation">(</span>ctx context<span class="token punctuation">.</span>Context<span class="token punctuation">,</span> prof <span class="token operator">*</span>profile<span class="token punctuation">.</span>Profile<span class="token punctuation">,</span> state <span class="token operator">*</span>framework<span class="token punctuation">.</span>CycleState<span class="token punctuation">,</span> pod <span class="token operator">*</span>v1<span class="token punctuation">.</span>Pod<span class="token punctuation">)</span> <span class="token punctuation">(</span>result ScheduleResult<span class="token punctuation">,</span> err <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    trace <span class="token operator">:=</span> utiltrace<span class="token punctuation">.</span><span class="token function">New</span><span class="token punctuation">(</span><span class="token string">"Scheduling"</span><span class="token punctuation">,</span> utiltrace<span class="token punctuation">.</span>Field<span class="token punctuation">{</span>Key<span class="token punctuation">:</span> <span class="token string">"namespace"</span><span class="token punctuation">,</span> Value<span class="token punctuation">:</span> pod<span class="token punctuation">.</span>Namespace<span class="token punctuation">}</span><span class="token punctuation">,</span> utiltrace<span class="token punctuation">.</span>Field<span class="token punctuation">{</span>Key<span class="token punctuation">:</span> <span class="token string">"name"</span><span class="token punctuation">,</span> Value<span class="token punctuation">:</span> pod<span class="token punctuation">.</span>Name<span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token keyword">defer</span> trace<span class="token punctuation">.</span><span class="token function">LogIfLong</span><span class="token punctuation">(</span><span class="token number">100</span> <span class="token operator">*</span> time<span class="token punctuation">.</span>Millisecond<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// 检查 pod pvc </span>    <span class="token keyword">if</span> err <span class="token operator">:=</span> <span class="token function">podPassesBasicChecks</span><span class="token punctuation">(</span>pod<span class="token punctuation">,</span> g<span class="token punctuation">.</span>pvcLister<span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> result<span class="token punctuation">,</span> err    <span class="token punctuation">}</span>    trace<span class="token punctuation">.</span><span class="token function">Step</span><span class="token punctuation">(</span><span class="token string">"Basic checks done"</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> err <span class="token operator">:=</span> g<span class="token punctuation">.</span><span class="token function">snapshot</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> result<span class="token punctuation">,</span> err    <span class="token punctuation">}</span>    trace<span class="token punctuation">.</span><span class="token function">Step</span><span class="token punctuation">(</span><span class="token string">"Snapshotting scheduler cache and node infos done"</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> g<span class="token punctuation">.</span>nodeInfoSnapshot<span class="token punctuation">.</span><span class="token function">NumNodes</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> result<span class="token punctuation">,</span> ErrNoNodesAvailable    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//执行 "prefilter" plugins</span>    preFilterStatus <span class="token operator">:=</span> prof<span class="token punctuation">.</span><span class="token function">RunPreFilterPlugins</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> state<span class="token punctuation">,</span> pod<span class="token punctuation">)</span>    <span class="token keyword">if</span> <span class="token operator">!</span>preFilterStatus<span class="token punctuation">.</span><span class="token function">IsSuccess</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> result<span class="token punctuation">,</span> preFilterStatus<span class="token punctuation">.</span><span class="token function">AsError</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    trace<span class="token punctuation">.</span><span class="token function">Step</span><span class="token punctuation">(</span><span class="token string">"Running prefilter plugins done"</span><span class="token punctuation">)</span>    startPredicateEvalTime <span class="token operator">:=</span> time<span class="token punctuation">.</span><span class="token function">Now</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// 执行预选算法</span>    filteredNodes<span class="token punctuation">,</span> filteredNodesStatuses<span class="token punctuation">,</span> err <span class="token operator">:=</span> g<span class="token punctuation">.</span><span class="token function">findNodesThatFitPod</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> prof<span class="token punctuation">,</span> state<span class="token punctuation">,</span> pod<span class="token punctuation">)</span>    <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> result<span class="token punctuation">,</span> err    <span class="token punctuation">}</span>    trace<span class="token punctuation">.</span><span class="token function">Step</span><span class="token punctuation">(</span><span class="token string">"Computing predicates done"</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> <span class="token function">len</span><span class="token punctuation">(</span>filteredNodes<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> result<span class="token punctuation">,</span> <span class="token operator">&amp;</span>FitError<span class="token punctuation">{</span>            Pod<span class="token punctuation">:</span>                   pod<span class="token punctuation">,</span>            NumAllNodes<span class="token punctuation">:</span>           g<span class="token punctuation">.</span>nodeInfoSnapshot<span class="token punctuation">.</span><span class="token function">NumNodes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            FilteredNodesStatuses<span class="token punctuation">:</span> filteredNodesStatuses<span class="token punctuation">,</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 执行 "prescore" 插件.</span>    prescoreStatus <span class="token operator">:=</span> prof<span class="token punctuation">.</span><span class="token function">RunPreScorePlugins</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> state<span class="token punctuation">,</span> pod<span class="token punctuation">,</span> filteredNodes<span class="token punctuation">)</span>    <span class="token keyword">if</span> <span class="token operator">!</span>prescoreStatus<span class="token punctuation">.</span><span class="token function">IsSuccess</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> result<span class="token punctuation">,</span> prescoreStatus<span class="token punctuation">.</span><span class="token function">AsError</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    trace<span class="token punctuation">.</span><span class="token function">Step</span><span class="token punctuation">(</span><span class="token string">"Running prescore plugins done"</span><span class="token punctuation">)</span>    metrics<span class="token punctuation">.</span>DeprecatedSchedulingAlgorithmPredicateEvaluationSecondsDuration<span class="token punctuation">.</span><span class="token function">Observe</span><span class="token punctuation">(</span>metrics<span class="token punctuation">.</span><span class="token function">SinceInSeconds</span><span class="token punctuation">(</span>startPredicateEvalTime<span class="token punctuation">)</span><span class="token punctuation">)</span>    metrics<span class="token punctuation">.</span>DeprecatedSchedulingDuration<span class="token punctuation">.</span><span class="token function">WithLabelValues</span><span class="token punctuation">(</span>metrics<span class="token punctuation">.</span>PredicateEvaluation<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Observe</span><span class="token punctuation">(</span>metrics<span class="token punctuation">.</span><span class="token function">SinceInSeconds</span><span class="token punctuation">(</span>startPredicateEvalTime<span class="token punctuation">)</span><span class="token punctuation">)</span>    startPriorityEvalTime <span class="token operator">:=</span> time<span class="token punctuation">.</span><span class="token function">Now</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// When only one node after predicate, just use it.</span>    <span class="token keyword">if</span> <span class="token function">len</span><span class="token punctuation">(</span>filteredNodes<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">1</span> <span class="token punctuation">{</span>        metrics<span class="token punctuation">.</span>DeprecatedSchedulingAlgorithmPriorityEvaluationSecondsDuration<span class="token punctuation">.</span><span class="token function">Observe</span><span class="token punctuation">(</span>metrics<span class="token punctuation">.</span><span class="token function">SinceInSeconds</span><span class="token punctuation">(</span>startPriorityEvalTime<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> ScheduleResult<span class="token punctuation">{</span>            SuggestedHost<span class="token punctuation">:</span>  filteredNodes<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>Name<span class="token punctuation">,</span>            EvaluatedNodes<span class="token punctuation">:</span> <span class="token number">1</span> <span class="token operator">+</span> <span class="token function">len</span><span class="token punctuation">(</span>filteredNodesStatuses<span class="token punctuation">)</span><span class="token punctuation">,</span>            FeasibleNodes<span class="token punctuation">:</span>  <span class="token number">1</span><span class="token punctuation">,</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token boolean">nil</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 执行优选算法</span>    priorityList<span class="token punctuation">,</span> err <span class="token operator">:=</span> g<span class="token punctuation">.</span><span class="token function">prioritizeNodes</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> prof<span class="token punctuation">,</span> state<span class="token punctuation">,</span> pod<span class="token punctuation">,</span> filteredNodes<span class="token punctuation">)</span>    <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> result<span class="token punctuation">,</span> err    <span class="token punctuation">}</span>    metrics<span class="token punctuation">.</span>DeprecatedSchedulingAlgorithmPriorityEvaluationSecondsDuration<span class="token punctuation">.</span><span class="token function">Observe</span><span class="token punctuation">(</span>metrics<span class="token punctuation">.</span><span class="token function">SinceInSeconds</span><span class="token punctuation">(</span>startPriorityEvalTime<span class="token punctuation">)</span><span class="token punctuation">)</span>    metrics<span class="token punctuation">.</span>DeprecatedSchedulingDuration<span class="token punctuation">.</span><span class="token function">WithLabelValues</span><span class="token punctuation">(</span>metrics<span class="token punctuation">.</span>PriorityEvaluation<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Observe</span><span class="token punctuation">(</span>metrics<span class="token punctuation">.</span><span class="token function">SinceInSeconds</span><span class="token punctuation">(</span>startPriorityEvalTime<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// 据打分选择最佳的 node</span>    host<span class="token punctuation">,</span> err <span class="token operator">:=</span> g<span class="token punctuation">.</span><span class="token function">selectHost</span><span class="token punctuation">(</span>priorityList<span class="token punctuation">)</span>    trace<span class="token punctuation">.</span><span class="token function">Step</span><span class="token punctuation">(</span><span class="token string">"Prioritizing done"</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> ScheduleResult<span class="token punctuation">{</span>        SuggestedHost<span class="token punctuation">:</span>  host<span class="token punctuation">,</span>        EvaluatedNodes<span class="token punctuation">:</span> <span class="token function">len</span><span class="token punctuation">(</span>filteredNodes<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token function">len</span><span class="token punctuation">(</span>filteredNodesStatuses<span class="token punctuation">)</span><span class="token punctuation">,</span>        FeasibleNodes<span class="token punctuation">:</span>  <span class="token function">len</span><span class="token punctuation">(</span>filteredNodes<span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span> err<span class="token punctuation">}</span></code></pre><h3 id="调度算法-1"><a href="#调度算法-1" class="headerlink" title="调度算法"></a>调度算法</h3><h4 id="预选调度算法"><a href="#预选调度算法" class="headerlink" title="预选调度算法"></a>预选调度算法</h4><p>predicates 算法主要是对集群中的 node 进行过滤，选出符合当前 pod 运行的 nodes。</p><p>默认的调度算法在<code>pkg/scheduler/framework/plugins/legacy_registry.go:193</code>中定义了：</p><pre class=" language-go"><code class="language-go"><span class="token comment" spellcheck="true">// Used as the default set of predicates if Policy was specified, but predicates was nil.</span>        DefaultPredicates<span class="token punctuation">:</span> sets<span class="token punctuation">.</span><span class="token function">NewString</span><span class="token punctuation">(</span>            NoVolumeZoneConflictPred<span class="token punctuation">,</span>            MaxEBSVolumeCountPred<span class="token punctuation">,</span>            MaxGCEPDVolumeCountPred<span class="token punctuation">,</span>            MaxAzureDiskVolumeCountPred<span class="token punctuation">,</span>            MaxCSIVolumeCountPred<span class="token punctuation">,</span>            MatchInterPodAffinityPred<span class="token punctuation">,</span>            NoDiskConflictPred<span class="token punctuation">,</span>            GeneralPred<span class="token punctuation">,</span>            PodToleratesNodeTaintsPred<span class="token punctuation">,</span>            CheckVolumeBindingPred<span class="token punctuation">,</span>            CheckNodeUnschedulablePred<span class="token punctuation">,</span>        <span class="token punctuation">)</span></code></pre><p>下面是对默认调度算法的一些说明：</p><table><thead><tr><th align="left">predicates 算法</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left">GeneralPred</td><td align="left">GeneralPred 包含 PodFitsResources、PodFitsHost,、PodFitsHostPorts、PodMatchNodeSelector 四种算法</td></tr><tr><td align="left">NoDiskConflictPred</td><td align="left">检查多个 Pod 声明挂载的持久化 Volume 是否有冲突</td></tr><tr><td align="left">MaxGCEPDVolumeCountPred</td><td align="left">检查 GCE 持久化 Volume 是否超过了一定数目</td></tr><tr><td align="left">MaxAzureDiskVolumeCountPred</td><td align="left">检查 Azure 持久化 Volume 是否超过了一定数目</td></tr><tr><td align="left">MaxCSIVolumeCountPred</td><td align="left">检查 CSI 持久化 Volume 是否超过了一定数目（已废弃）</td></tr><tr><td align="left">MaxEBSVolumeCountPred</td><td align="left">检查 EBS 持久化 Volume 是否超过了一定数目</td></tr><tr><td align="left">NoVolumeZoneConflictPred</td><td align="left">检查持久化 Volume 的 Zone（高可用域）标签是否与节点的 Zone 标签相匹配</td></tr><tr><td align="left">CheckVolumeBindingPred</td><td align="left">检查该 Pod 对应 PV 的 nodeAffinity 字段是否跟某个节点的标签相匹配，Local Persistent Volume(本地持久化卷)必须使用 nodeAffinity 来跟某个具体的节点绑定</td></tr><tr><td align="left">PodToleratesNodeTaintsPred</td><td align="left">检查 Node 的 Taint 机制，只有当 Pod 的 Toleration 字段与 Node 的 Taint 字段能够匹配时，这个 Pod 才能被调度到该节点上</td></tr><tr><td align="left">MatchInterPodAffinityPred</td><td align="left">检查待调度 Pod 与 Node 上的已有 Pod 之间的亲密（affinity）和反亲密（anti-affinity）关系</td></tr><tr><td align="left">CheckNodeConditionPred</td><td align="left">检查 NodeCondition</td></tr><tr><td align="left">CheckNodePIDPressurePred</td><td align="left">检查 NodePIDPressure</td></tr><tr><td align="left">CheckNodeDiskPressurePred</td><td align="left">检查 NodeDiskPressure</td></tr><tr><td align="left">CheckNodeMemoryPressurePred</td><td align="left">检查 NodeMemoryPressure</td></tr></tbody></table><p>默认的 predicates 调度算法主要分为五种类型：</p><p>第一种类型叫作 GeneralPredicates，包含 PodFitsResources、PodFitsHost、PodFitsHostPorts、PodMatchNodeSelector 四种策略，其具体含义如下所示：</p><ul><li>PodFitsHost：检查宿主机的名字是否跟 Pod 的 spec.nodeName 一致</li><li>PodFitsHostPorts：检查 Pod 申请的宿主机端口（spec.nodePort）是不是跟已经被使用的端口有冲突</li><li>PodMatchNodeSelector：检查 Pod 的 nodeSelector 或者 nodeAffinity 指定的节点是否与节点匹配等</li><li>PodFitsResources：检查主机的资源是否满足 Pod 的需求，根据实际已经分配（Request）的资源量做调度</li></ul><p>kubelet 在启动 Pod 前，会执行一个 Admit 操作来进行二次确认，这里二次确认的规则就是执行一遍 GeneralPredicates。</p><p>第二种类型是与 Volume 相关的过滤规则，主要有NoDiskConflictPred、MaxGCEPDVolumeCountPred、MaxAzureDiskVolumeCountPred、MaxCSIVolumeCountPred、MaxEBSVolumeCountPred、NoVolumeZoneConflictPred、CheckVolumeBindingPred。</p><p>第三种类型是宿主机相关的过滤规则，主要是 PodToleratesNodeTaintsPred。</p><p>第四种类型是 Pod 相关的过滤规则，主要是 MatchInterPodAffinityPred。</p><p>第五种类型是新增的过滤规则，与宿主机的运行状况有关，主要有 CheckNodeCondition、 CheckNodeMemoryPressure、CheckNodePIDPressure、CheckNodeDiskPressure 四种。若启用了 <code>TaintNodesByCondition FeatureGates</code> 则在 predicates 算法中会将该四种算法移除，<code>TaintNodesByCondition</code> 基于 <a href="https://kubernetes.io/docs/concepts/architecture/nodes/#condition" target="_blank" rel="noopener">node conditions</a> 当 node 出现 pressure 时自动为 node 打上 taints 标签，该功能在 v1.8 引入，v1.12 成为 beta 版本，目前 v1.16 中也是 beta 版本，但在 v1.13 中该功能已默认启用。</p><p>predicates 调度算法也有一个顺序，要不然在一台资源已经严重不足的宿主机上，上来就开始计算 PodAffinityPredicate 是没有实际意义的，其默认顺序如下所示：</p><p>代码路径：<code>pkg/scheduler/framework/plugins/legacy_registry.go:137</code></p><pre><code>// PredicateOrdering returns the ordering of predicate execution.func PredicateOrdering() []string {    return []string{CheckNodeUnschedulablePred,        GeneralPred, HostNamePred, PodFitsHostPortsPred,        MatchNodeSelectorPred, PodFitsResourcesPred, NoDiskConflictPred,        PodToleratesNodeTaintsPred, CheckNodeLabelPresencePred,        CheckServiceAffinityPred, MaxEBSVolumeCountPred, MaxGCEPDVolumeCountPred, MaxCSIVolumeCountPred,        MaxAzureDiskVolumeCountPred, MaxCinderVolumeCountPred, CheckVolumeBindingPred, NoVolumeZoneConflictPred,        EvenPodsSpreadPred, MatchInterPodAffinityPred}}</code></pre><pre class=" language-go"><code class="language-go"><span class="token comment" spellcheck="true">// Filters the nodes to find the ones that fit the pod based on the framework</span><span class="token comment" spellcheck="true">// filter plugins and filter extenders.</span><span class="token keyword">func</span> <span class="token punctuation">(</span>g <span class="token operator">*</span>genericScheduler<span class="token punctuation">)</span> <span class="token function">findNodesThatFitPod</span><span class="token punctuation">(</span>ctx context<span class="token punctuation">.</span>Context<span class="token punctuation">,</span> prof <span class="token operator">*</span>profile<span class="token punctuation">.</span>Profile<span class="token punctuation">,</span> state <span class="token operator">*</span>framework<span class="token punctuation">.</span>CycleState<span class="token punctuation">,</span> pod <span class="token operator">*</span>v1<span class="token punctuation">.</span>Pod<span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">*</span>v1<span class="token punctuation">.</span>Node<span class="token punctuation">,</span> framework<span class="token punctuation">.</span>NodeToStatusMap<span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    filteredNodesStatuses <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span>framework<span class="token punctuation">.</span>NodeToStatusMap<span class="token punctuation">)</span>    filtered<span class="token punctuation">,</span> err <span class="token operator">:=</span> g<span class="token punctuation">.</span><span class="token function">findNodesThatPassFilters</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> prof<span class="token punctuation">,</span> state<span class="token punctuation">,</span> pod<span class="token punctuation">,</span> filteredNodesStatuses<span class="token punctuation">)</span>    <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> err    <span class="token punctuation">}</span>    filtered<span class="token punctuation">,</span> err <span class="token operator">=</span> g<span class="token punctuation">.</span><span class="token function">findNodesThatPassExtenders</span><span class="token punctuation">(</span>pod<span class="token punctuation">,</span> filtered<span class="token punctuation">,</span> filteredNodesStatuses<span class="token punctuation">)</span>    <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> err    <span class="token punctuation">}</span>    <span class="token keyword">return</span> filtered<span class="token punctuation">,</span> filteredNodesStatuses<span class="token punctuation">,</span> <span class="token boolean">nil</span><span class="token punctuation">}</span></code></pre><pre class=" language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token punctuation">(</span>g <span class="token operator">*</span>genericScheduler<span class="token punctuation">)</span> <span class="token function">findNodesThatPassFilters</span><span class="token punctuation">(</span>ctx context<span class="token punctuation">.</span>Context<span class="token punctuation">,</span> prof <span class="token operator">*</span>profile<span class="token punctuation">.</span>Profile<span class="token punctuation">,</span> state <span class="token operator">*</span>framework<span class="token punctuation">.</span>CycleState<span class="token punctuation">,</span> pod <span class="token operator">*</span>v1<span class="token punctuation">.</span>Pod<span class="token punctuation">,</span> statuses framework<span class="token punctuation">.</span>NodeToStatusMap<span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">*</span>v1<span class="token punctuation">.</span>Node<span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 从快照中获取所有节点</span>    allNodes<span class="token punctuation">,</span> err <span class="token operator">:=</span> g<span class="token punctuation">.</span>nodeInfoSnapshot<span class="token punctuation">.</span><span class="token function">NodeInfos</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">List</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// 设定最多需要检查的节点数</span>    numNodesToFind <span class="token operator">:=</span> g<span class="token punctuation">.</span><span class="token function">numFeasibleNodesToFind</span><span class="token punctuation">(</span><span class="token function">int32</span><span class="token punctuation">(</span><span class="token function">len</span><span class="token punctuation">(</span>allNodes<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    filtered <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">*</span>v1<span class="token punctuation">.</span>Node<span class="token punctuation">,</span> numNodesToFind<span class="token punctuation">)</span>    <span class="token keyword">if</span> <span class="token operator">!</span>prof<span class="token punctuation">.</span><span class="token function">HasFilterPlugins</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token keyword">range</span> filtered <span class="token punctuation">{</span>            filtered<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> allNodes<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">Node</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span>        g<span class="token punctuation">.</span>nextStartNodeIndex <span class="token operator">=</span> <span class="token punctuation">(</span>g<span class="token punctuation">.</span>nextStartNodeIndex <span class="token operator">+</span> <span class="token function">len</span><span class="token punctuation">(</span>filtered<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token function">len</span><span class="token punctuation">(</span>allNodes<span class="token punctuation">)</span>        <span class="token keyword">return</span> filtered<span class="token punctuation">,</span> <span class="token boolean">nil</span>    <span class="token punctuation">}</span>    errCh <span class="token operator">:=</span> util<span class="token punctuation">.</span><span class="token function">NewErrorChannel</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">var</span> statusesLock sync<span class="token punctuation">.</span>Mutex    <span class="token keyword">var</span> filteredLen <span class="token builtin">int32</span>    ctx<span class="token punctuation">,</span> cancel <span class="token operator">:=</span> context<span class="token punctuation">.</span><span class="token function">WithCancel</span><span class="token punctuation">(</span>ctx<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// checkNode 为执行预选算法的函数</span>    checkNode <span class="token operator">:=</span> <span class="token keyword">func</span><span class="token punctuation">(</span>i <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// We check the nodes starting from where we left off in the previous scheduling cycle,</span>        <span class="token comment" spellcheck="true">// this is to make sure all nodes have the same chance of being examined across pods.</span>        nodeInfo <span class="token operator">:=</span> allNodes<span class="token punctuation">[</span><span class="token punctuation">(</span>g<span class="token punctuation">.</span>nextStartNodeIndex<span class="token operator">+</span>i<span class="token punctuation">)</span><span class="token operator">%</span><span class="token function">len</span><span class="token punctuation">(</span>allNodes<span class="token punctuation">)</span><span class="token punctuation">]</span>        <span class="token comment" spellcheck="true">// podFitsOnNode 最终执行预选算法的函数 </span>        fits<span class="token punctuation">,</span> status<span class="token punctuation">,</span> err <span class="token operator">:=</span> g<span class="token punctuation">.</span><span class="token function">podPassesFiltersOnNode</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> prof<span class="token punctuation">,</span> state<span class="token punctuation">,</span> pod<span class="token punctuation">,</span> nodeInfo<span class="token punctuation">)</span>        <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>            errCh<span class="token punctuation">.</span><span class="token function">SendErrorWithCancel</span><span class="token punctuation">(</span>err<span class="token punctuation">,</span> cancel<span class="token punctuation">)</span>            <span class="token keyword">return</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> fits <span class="token punctuation">{</span>            length <span class="token operator">:=</span> atomic<span class="token punctuation">.</span><span class="token function">AddInt32</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>filteredLen<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>            <span class="token keyword">if</span> length <span class="token operator">></span> numNodesToFind <span class="token punctuation">{</span>                <span class="token function">cancel</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                atomic<span class="token punctuation">.</span><span class="token function">AddInt32</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>filteredLen<span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                filtered<span class="token punctuation">[</span>length<span class="token number">-1</span><span class="token punctuation">]</span> <span class="token operator">=</span> nodeInfo<span class="token punctuation">.</span><span class="token function">Node</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            statusesLock<span class="token punctuation">.</span><span class="token function">Lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token keyword">if</span> <span class="token operator">!</span>status<span class="token punctuation">.</span><span class="token function">IsSuccess</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                statuses<span class="token punctuation">[</span>nodeInfo<span class="token punctuation">.</span><span class="token function">Node</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>Name<span class="token punctuation">]</span> <span class="token operator">=</span> status            <span class="token punctuation">}</span>            statusesLock<span class="token punctuation">.</span><span class="token function">Unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    beginCheckNode <span class="token operator">:=</span> time<span class="token punctuation">.</span><span class="token function">Now</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    statusCode <span class="token operator">:=</span> framework<span class="token punctuation">.</span>Success    <span class="token keyword">defer</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        metrics<span class="token punctuation">.</span>FrameworkExtensionPointDuration<span class="token punctuation">.</span><span class="token function">WithLabelValues</span><span class="token punctuation">(</span>framework<span class="token punctuation">.</span>Filter<span class="token punctuation">,</span> statusCode<span class="token punctuation">.</span><span class="token function">String</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Observe</span><span class="token punctuation">(</span>metrics<span class="token punctuation">.</span><span class="token function">SinceInSeconds</span><span class="token punctuation">(</span>beginCheckNode<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// 启动 16 个 goroutine 并发执行 checkNode 函数</span>    workqueue<span class="token punctuation">.</span><span class="token function">ParallelizeUntil</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">,</span> <span class="token function">len</span><span class="token punctuation">(</span>allNodes<span class="token punctuation">)</span><span class="token punctuation">,</span> checkNode<span class="token punctuation">)</span>    processedNodes <span class="token operator">:=</span> <span class="token function">int</span><span class="token punctuation">(</span>filteredLen<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token function">len</span><span class="token punctuation">(</span>statuses<span class="token punctuation">)</span>    g<span class="token punctuation">.</span>nextStartNodeIndex <span class="token operator">=</span> <span class="token punctuation">(</span>g<span class="token punctuation">.</span>nextStartNodeIndex <span class="token operator">+</span> processedNodes<span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token function">len</span><span class="token punctuation">(</span>allNodes<span class="token punctuation">)</span>    filtered <span class="token operator">=</span> filtered<span class="token punctuation">[</span><span class="token punctuation">:</span>filteredLen<span class="token punctuation">]</span>    <span class="token keyword">if</span> err <span class="token operator">:=</span> errCh<span class="token punctuation">.</span><span class="token function">ReceiveError</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>        statusCode <span class="token operator">=</span> framework<span class="token punctuation">.</span>Error        <span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> err    <span class="token punctuation">}</span>    <span class="token keyword">return</span> filtered<span class="token punctuation">,</span> <span class="token boolean">nil</span><span class="token punctuation">}</span></code></pre><p>若配置了 extender 则再次进行过滤:</p><pre class=" language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token punctuation">(</span>g <span class="token operator">*</span>genericScheduler<span class="token punctuation">)</span> <span class="token function">findNodesThatPassExtenders</span><span class="token punctuation">(</span>pod <span class="token operator">*</span>v1<span class="token punctuation">.</span>Pod<span class="token punctuation">,</span> filtered <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">*</span>v1<span class="token punctuation">.</span>Node<span class="token punctuation">,</span> statuses framework<span class="token punctuation">.</span>NodeToStatusMap<span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">*</span>v1<span class="token punctuation">.</span>Node<span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> extender <span class="token operator">:=</span> <span class="token keyword">range</span> g<span class="token punctuation">.</span>extenders <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token function">len</span><span class="token punctuation">(</span>filtered<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token punctuation">{</span>            <span class="token keyword">break</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token operator">!</span>extender<span class="token punctuation">.</span><span class="token function">IsInterested</span><span class="token punctuation">(</span>pod<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">continue</span>        <span class="token punctuation">}</span>        filteredList<span class="token punctuation">,</span> failedMap<span class="token punctuation">,</span> err <span class="token operator">:=</span> extender<span class="token punctuation">.</span><span class="token function">Filter</span><span class="token punctuation">(</span>pod<span class="token punctuation">,</span> filtered<span class="token punctuation">)</span>        <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> extender<span class="token punctuation">.</span><span class="token function">IsIgnorable</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                klog<span class="token punctuation">.</span><span class="token function">Warningf</span><span class="token punctuation">(</span><span class="token string">"Skipping extender %v as it returned error %v and has ignorable flag set"</span><span class="token punctuation">,</span>                    extender<span class="token punctuation">,</span> err<span class="token punctuation">)</span>                <span class="token keyword">continue</span>            <span class="token punctuation">}</span>            <span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> err        <span class="token punctuation">}</span>        <span class="token keyword">for</span> failedNodeName<span class="token punctuation">,</span> failedMsg <span class="token operator">:=</span> <span class="token keyword">range</span> failedMap <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token boolean">_</span><span class="token punctuation">,</span> found <span class="token operator">:=</span> statuses<span class="token punctuation">[</span>failedNodeName<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token operator">!</span>found <span class="token punctuation">{</span>                statuses<span class="token punctuation">[</span>failedNodeName<span class="token punctuation">]</span> <span class="token operator">=</span> framework<span class="token punctuation">.</span><span class="token function">NewStatus</span><span class="token punctuation">(</span>framework<span class="token punctuation">.</span>Unschedulable<span class="token punctuation">,</span> failedMsg<span class="token punctuation">)</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                statuses<span class="token punctuation">[</span>failedNodeName<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">AppendReason</span><span class="token punctuation">(</span>failedMsg<span class="token punctuation">)</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        filtered <span class="token operator">=</span> filteredList    <span class="token punctuation">}</span>    <span class="token keyword">return</span> filtered<span class="token punctuation">,</span> <span class="token boolean">nil</span><span class="token punctuation">}</span></code></pre><p><code>findNodesThatFit()</code> 是 predicates 策略的实际调用方法，其基本流程如下：</p><ul><li>设定最多需要检查的节点数，作为预选节点数组的容量，避免总节点过多影响调度效率</li><li>通过<code>NodeTree()</code>不断获取下一个节点来判断该节点是否满足 pod 的调度条件</li><li>通过之前注册的各种 predicates 函数来判断当前节点是否符合 pod 的调度条件</li><li>最后返回满足调度条件的 node 列表，供下一步的优选操作</li></ul><p><code>checkNode()</code>是一个校验 node 是否符合要求的函数，其实际调用到的核心函数是<code>podFitsOnNode()</code>，再通过<code>workqueue()</code> 并发执行<code>checkNode()</code> 函数，<code>workqueue()</code> 会启动 16 个 goroutine 来并行计算需要筛选的 node 列表，其主要流程如下：</p><ul><li>通过 cache 中的 <code>NodeTree()</code> 不断获取下一个 node</li><li>将当前 node 和 pod 传入<code>podFitsOnNode()</code> 方法中来判断当前 node 是否符合要求</li><li>如果当前 node 符合要求就将当前 node 加入预选节点的数组中<code>filtered</code></li><li>如果当前 node 不满足要求，则加入到失败的数组中，并记录原因</li><li>通过<code>workqueue.ParallelizeUntil()</code>并发执行<code>checkNode()</code>函数，一旦找到足够的可行节点数后就停止筛选更多节点</li><li>若配置了 extender 则再次进行过滤已筛选出的 node</li></ul><p>然后继续看如何设定最多需要检查的节点数，此过程由<code>numFeasibleNodesToFind()</code>进行处理，基本流程如下：</p><ul><li>如果总的 node 节点小于<code>minFeasibleNodesToFind</code>(默认为100)则直接返回总节点数</li><li>如果节点数超过 100，则取指定百分比 <code>percentageOfNodesToScore</code>(默认值为 50)的节点数 ，当该百分比后的数目仍小于<code>minFeasibleNodesToFind</code>，则返回<code>minFeasibleNodesToFind</code></li><li>如果百分比后的数目大于<code>minFeasibleNodesToFind</code>，则返回该百分比的节点数</li></ul><p>所以当节点数小于 100 时直接返回，大于 100 时只返回其总数的 50%。<code>percentageOfNodesToScore</code> 参数在 v1.12 引入，默认值为 50，kube-scheduler 在启动时可以设定该参数的值。</p><p>代码路径：<code>pkg/scheduler/core/generic_scheduler.go:390</code></p><pre class=" language-go"><code class="language-go"><span class="token comment" spellcheck="true">// numFeasibleNodesToFind returns the number of feasible nodes that once found, the scheduler stops</span><span class="token comment" spellcheck="true">// its search for more feasible nodes.</span><span class="token keyword">func</span> <span class="token punctuation">(</span>g <span class="token operator">*</span>genericScheduler<span class="token punctuation">)</span> <span class="token function">numFeasibleNodesToFind</span><span class="token punctuation">(</span>numAllNodes <span class="token builtin">int32</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>numNodes <span class="token builtin">int32</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> numAllNodes <span class="token operator">&lt;</span> minFeasibleNodesToFind <span class="token operator">||</span> g<span class="token punctuation">.</span>percentageOfNodesToScore <span class="token operator">>=</span> <span class="token number">100</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> numAllNodes    <span class="token punctuation">}</span>    adaptivePercentage <span class="token operator">:=</span> g<span class="token punctuation">.</span>percentageOfNodesToScore    <span class="token keyword">if</span> adaptivePercentage <span class="token operator">&lt;=</span> <span class="token number">0</span> <span class="token punctuation">{</span>        basePercentageOfNodesToScore <span class="token operator">:=</span> <span class="token function">int32</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span>        adaptivePercentage <span class="token operator">=</span> basePercentageOfNodesToScore <span class="token operator">-</span> numAllNodes<span class="token operator">/</span><span class="token number">125</span>        <span class="token keyword">if</span> adaptivePercentage <span class="token operator">&lt;</span> minFeasibleNodesPercentageToFind <span class="token punctuation">{</span>            adaptivePercentage <span class="token operator">=</span> minFeasibleNodesPercentageToFind        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    numNodes <span class="token operator">=</span> numAllNodes <span class="token operator">*</span> adaptivePercentage <span class="token operator">/</span> <span class="token number">100</span>    <span class="token keyword">if</span> numNodes <span class="token operator">&lt;</span> minFeasibleNodesToFind <span class="token punctuation">{</span>        <span class="token keyword">return</span> minFeasibleNodesToFind    <span class="token punctuation">}</span>    <span class="token keyword">return</span> numNodes<span class="token punctuation">}</span></code></pre><p>pridicates 调度算法的核心是 <code>podPassesFiltersOnNode()</code> ，scheduler 的抢占机制也会执行该函数，<code>podPassesFiltersOnNode()</code>基本流程如下：</p><ul><li>遍历已经注册好的预选策略<code>predicates.Ordering()</code>，按顺序执行对应的策略函数</li><li>遍历执行每个策略函数，并返回是否合适，预选失败的原因和错误</li><li>如果预选函数执行失败，则加入预选失败的数组中，直接返回，后面的预选函数不会再执行</li><li>如果该 node 上存在 nominated pod 则执行两次预选函数</li></ul><p>因为引入了抢占机制，此处主要说明一下执行两次预选函数的原因：</p><p>第一次循环，若该 pod 为抢占者(<code>nominatedPods</code>)，调度器会假设该 pod 已经运行在这个节点上，然后更新<code>meta</code>和<code>nodeInfo</code>，<code>nominatedPods</code>是指执行了抢占机制且已经分配到了 node(<code>pod.Status.NominatedNodeName</code> 已被设定) 但是还没有真正运行起来的 pod，然后再执行所有的预选函数。</p><p>第二次循环，不将<code>nominatedPods</code>加入到 node 内。</p><p>而只有这两遍 predicates 算法都能通过时，这个 pod 和 node 才会被认为是可以绑定(bind)的。这样做是因为考虑到 pod affinity 等策略的执行，如果当前的 pod 与<code>nominatedPods</code>有依赖关系就会有问题，因为<code>nominatedPods</code>不能保证一定可以调度且在已指定的 node 运行成功，也可能出现被其他高优先级的 pod 抢占等问题。</p><pre class=" language-go"><code class="language-go"><span class="token comment" spellcheck="true">// podPassesFiltersOnNode checks whether a node given by NodeInfo satisfies the</span><span class="token comment" spellcheck="true">// filter plugins.</span><span class="token comment" spellcheck="true">// This function is called from two different places: Schedule and Preempt.</span><span class="token comment" spellcheck="true">// When it is called from Schedule, we want to test whether the pod is</span><span class="token comment" spellcheck="true">// schedulable on the node with all the existing pods on the node plus higher</span><span class="token comment" spellcheck="true">// and equal priority pods nominated to run on the node.</span><span class="token comment" spellcheck="true">// When it is called from Preempt, we should remove the victims of preemption</span><span class="token comment" spellcheck="true">// and add the nominated pods. Removal of the victims is done by</span><span class="token comment" spellcheck="true">// SelectVictimsOnNode(). Preempt removes victims from PreFilter state and</span><span class="token comment" spellcheck="true">// NodeInfo before calling this function.</span><span class="token keyword">func</span> <span class="token punctuation">(</span>g <span class="token operator">*</span>genericScheduler<span class="token punctuation">)</span> <span class="token function">podPassesFiltersOnNode</span><span class="token punctuation">(</span>    ctx context<span class="token punctuation">.</span>Context<span class="token punctuation">,</span>    prof <span class="token operator">*</span>profile<span class="token punctuation">.</span>Profile<span class="token punctuation">,</span>    state <span class="token operator">*</span>framework<span class="token punctuation">.</span>CycleState<span class="token punctuation">,</span>    pod <span class="token operator">*</span>v1<span class="token punctuation">.</span>Pod<span class="token punctuation">,</span>    info <span class="token operator">*</span>schedulernodeinfo<span class="token punctuation">.</span>NodeInfo<span class="token punctuation">,</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token builtin">bool</span><span class="token punctuation">,</span> <span class="token operator">*</span>framework<span class="token punctuation">.</span>Status<span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> status <span class="token operator">*</span>framework<span class="token punctuation">.</span>Status    podsAdded <span class="token operator">:=</span> <span class="token boolean">false</span>    <span class="token comment" spellcheck="true">// We run filters twice in some cases. If the node has greater or equal priority</span>    <span class="token comment" spellcheck="true">// nominated pods, we run them when those pods are added to PreFilter state and nodeInfo.</span>    <span class="token comment" spellcheck="true">// If all filters succeed in this pass, we run them again when these</span>    <span class="token comment" spellcheck="true">// nominated pods are not added. This second pass is necessary because some</span>    <span class="token comment" spellcheck="true">// filters such as inter-pod affinity may not pass without the nominated pods.</span>    <span class="token comment" spellcheck="true">// If there are no nominated pods for the node or if the first run of the</span>    <span class="token comment" spellcheck="true">// filters fail, we don't run the second pass.</span>    <span class="token comment" spellcheck="true">// We consider only equal or higher priority pods in the first pass, because</span>    <span class="token comment" spellcheck="true">// those are the current "pod" must yield to them and not take a space opened</span>    <span class="token comment" spellcheck="true">// for running them. It is ok if the current "pod" take resources freed for</span>    <span class="token comment" spellcheck="true">// lower priority pods.</span>    <span class="token comment" spellcheck="true">// Requiring that the new pod is schedulable in both circumstances ensures that</span>    <span class="token comment" spellcheck="true">// we are making a conservative decision: filters like resources and inter-pod</span>    <span class="token comment" spellcheck="true">// anti-affinity are more likely to fail when the nominated pods are treated</span>    <span class="token comment" spellcheck="true">// as running, while filters like pod affinity are more likely to fail when</span>    <span class="token comment" spellcheck="true">// the nominated pods are treated as not running. We can't just assume the</span>    <span class="token comment" spellcheck="true">// nominated pods are running because they are not running right now and in fact,</span>    <span class="token comment" spellcheck="true">// they may end up getting scheduled to a different node.</span>    <span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">2</span><span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">{</span>        stateToUse <span class="token operator">:=</span> state        nodeInfoToUse <span class="token operator">:=</span> info        <span class="token keyword">if</span> i <span class="token operator">==</span> <span class="token number">0</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 第一次循环加入 NominatedPods，计算 nodeInfo</span>            <span class="token keyword">var</span> err <span class="token builtin">error</span>            podsAdded<span class="token punctuation">,</span> stateToUse<span class="token punctuation">,</span> nodeInfoToUse<span class="token punctuation">,</span> err <span class="token operator">=</span> g<span class="token punctuation">.</span><span class="token function">addNominatedPods</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> prof<span class="token punctuation">,</span> pod<span class="token punctuation">,</span> state<span class="token punctuation">,</span> info<span class="token punctuation">)</span>            <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> err            <span class="token punctuation">}</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token operator">!</span>podsAdded <span class="token operator">||</span> <span class="token operator">!</span>status<span class="token punctuation">.</span><span class="token function">IsSuccess</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">break</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 执行过滤插件</span>        statusMap <span class="token operator">:=</span> prof<span class="token punctuation">.</span><span class="token function">RunFilterPlugins</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> stateToUse<span class="token punctuation">,</span> pod<span class="token punctuation">,</span> nodeInfoToUse<span class="token punctuation">)</span>        status <span class="token operator">=</span> statusMap<span class="token punctuation">.</span><span class="token function">Merge</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> <span class="token operator">!</span>status<span class="token punctuation">.</span><span class="token function">IsSuccess</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>status<span class="token punctuation">.</span><span class="token function">IsUnschedulable</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">,</span> status<span class="token punctuation">,</span> status<span class="token punctuation">.</span><span class="token function">AsError</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> status<span class="token punctuation">.</span><span class="token function">IsSuccess</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> status<span class="token punctuation">,</span> <span class="token boolean">nil</span><span class="token punctuation">}</span></code></pre><pre class=" language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token punctuation">(</span>f <span class="token operator">*</span>framework<span class="token punctuation">)</span> <span class="token function">RunFilterPlugins</span><span class="token punctuation">(</span>    ctx context<span class="token punctuation">.</span>Context<span class="token punctuation">,</span>    state <span class="token operator">*</span>CycleState<span class="token punctuation">,</span>    pod <span class="token operator">*</span>v1<span class="token punctuation">.</span>Pod<span class="token punctuation">,</span>    nodeInfo <span class="token operator">*</span>schedulernodeinfo<span class="token punctuation">.</span>NodeInfo<span class="token punctuation">,</span><span class="token punctuation">)</span> PluginToStatus <span class="token punctuation">{</span>    <span class="token keyword">var</span> firstFailedStatus <span class="token operator">*</span>Status    statuses <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span>PluginToStatus<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// 遍历预选算法插件</span>    <span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> pl <span class="token operator">:=</span> <span class="token keyword">range</span> f<span class="token punctuation">.</span>filterPlugins <span class="token punctuation">{</span>        pluginStatus <span class="token operator">:=</span> f<span class="token punctuation">.</span><span class="token function">runFilterPlugin</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> pl<span class="token punctuation">,</span> state<span class="token punctuation">,</span> pod<span class="token punctuation">,</span> nodeInfo<span class="token punctuation">)</span><span class="token operator">...</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> statuses<span class="token punctuation">}</span></code></pre><h4 id="优选调度算法"><a href="#优选调度算法" class="headerlink" title="优选调度算法"></a>优选调度算法</h4><p>priorities 调度算法是在 pridicates 算法后执行的，主要功能是对已经过滤出的 nodes 进行打分并选出最佳的一个 node。</p><p>默认的调度算法在: <code>pkg/scheduler/framework/plugins/legacy_registry.go:208</code></p><pre class=" language-go"><code class="language-go">        <span class="token comment" spellcheck="true">// Used as the default set of predicates if Policy was specified, but priorities was nil.</span>        DefaultPriorities<span class="token punctuation">:</span> <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token builtin">int64</span><span class="token punctuation">{</span>            SelectorSpreadPriority<span class="token punctuation">:</span>      <span class="token number">1</span><span class="token punctuation">,</span>            InterPodAffinityPriority<span class="token punctuation">:</span>    <span class="token number">1</span><span class="token punctuation">,</span>            LeastRequestedPriority<span class="token punctuation">:</span>      <span class="token number">1</span><span class="token punctuation">,</span>            BalancedResourceAllocation<span class="token punctuation">:</span>  <span class="token number">1</span><span class="token punctuation">,</span>            NodePreferAvoidPodsPriority<span class="token punctuation">:</span> <span class="token number">10000</span><span class="token punctuation">,</span>            NodeAffinityPriority<span class="token punctuation">:</span>        <span class="token number">1</span><span class="token punctuation">,</span>            TaintTolerationPriority<span class="token punctuation">:</span>     <span class="token number">1</span><span class="token punctuation">,</span>            ImageLocalityPriority<span class="token punctuation">:</span>       <span class="token number">1</span><span class="token punctuation">,</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span></code></pre><p>默认调度算法的一些说明：</p><table><thead><tr><th align="left">priorities 算法</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left">SelectorSpreadPriority</td><td align="left">按 service，rs，statefulset 归属计算 Node 上分布最少的同类 Pod数量，数量越少得分越高，默认权重为1</td></tr><tr><td align="left">InterPodAffinityPriority</td><td align="left">pod 亲和性选择策略，默认权重为1</td></tr><tr><td align="left">LeastRequestedPriority</td><td align="left">选择空闲资源（CPU 和 Memory）最多的节点，默认权重为1，其计算方式为：score = (cpu((capacity-sum(requested))10/capacity) + memory((capacity-sum(requested))10/capacity))/2</td></tr><tr><td align="left">BalancedResourceAllocation</td><td align="left">CPU、Memory 以及 Volume 资源分配最均衡的节点，默认权重为1，其计算方式为：score = 10 - variance(cpuFraction,memoryFraction,volumeFraction)*10</td></tr><tr><td align="left">NodePreferAvoidPodsPriority</td><td align="left">判断 node annotation 是否有scheduler.alpha.kubernetes.io/preferAvoidPods 标签，类似于 taints 机制，过滤标签中定义类型的 pod，默认权重为10000</td></tr><tr><td align="left">NodeAffinityPriority</td><td align="left">节点亲和性选择策略，默认权重为1</td></tr><tr><td align="left">TaintTolerationPriority</td><td align="left">Pod 是否容忍节点上的 Taint，优先调度到标记了 Taint 的节点，默认权重为1</td></tr><tr><td align="left">ImageLocalityPriority</td><td align="left">待调度 Pod 需要使用的镜像是否存在于该节点，默认权重为1</td></tr></tbody></table><p>执行 priorities 调度算法的逻辑是在 <code>PrioritizeNodes()</code>函数中，其目的是执行每个 priority 函数为 node 打分，分数为 0-10，其功能主要有：</p><ul><li><code>PrioritizeNodes()</code> 通过并行运行各个优先级函数来对节点进行打分</li><li>每个优先级函数会给节点打分，打分范围为 0-10 分，0 表示优先级最低的节点，10表示优先级最高的节点</li><li>每个优先级函数有各自的权重</li><li>优先级函数返回的节点分数乘以权重以获得加权分数</li><li>最后计算所有节点的总加权分数</li></ul><p>代码路径：<code>pkg/scheduler/core/generic_scheduler.go:626</code></p><pre class=" language-go"><code class="language-go"><span class="token comment" spellcheck="true">// prioritizeNodes prioritizes the nodes by running the score plugins,</span><span class="token comment" spellcheck="true">// which return a score for each node from the call to RunScorePlugins().</span><span class="token comment" spellcheck="true">// The scores from each plugin are added together to make the score for that node, then</span><span class="token comment" spellcheck="true">// any extenders are run as well.</span><span class="token comment" spellcheck="true">// All scores are finally combined (added) to get the total weighted scores of all nodes</span><span class="token keyword">func</span> <span class="token punctuation">(</span>g <span class="token operator">*</span>genericScheduler<span class="token punctuation">)</span> <span class="token function">prioritizeNodes</span><span class="token punctuation">(</span>    ctx context<span class="token punctuation">.</span>Context<span class="token punctuation">,</span>    prof <span class="token operator">*</span>profile<span class="token punctuation">.</span>Profile<span class="token punctuation">,</span>    state <span class="token operator">*</span>framework<span class="token punctuation">.</span>CycleState<span class="token punctuation">,</span>    pod <span class="token operator">*</span>v1<span class="token punctuation">.</span>Pod<span class="token punctuation">,</span>    nodes <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">*</span>v1<span class="token punctuation">.</span>Node<span class="token punctuation">,</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>framework<span class="token punctuation">.</span>NodeScoreList<span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// If no priority configs are provided, then all nodes will have a score of one.</span>    <span class="token comment" spellcheck="true">// This is required to generate the priority list in the required format</span>    <span class="token comment" spellcheck="true">// 检查是否有分数插件</span>    <span class="token keyword">if</span> <span class="token function">len</span><span class="token punctuation">(</span>g<span class="token punctuation">.</span>extenders<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>prof<span class="token punctuation">.</span><span class="token function">HasScorePlugins</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        result <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span>framework<span class="token punctuation">.</span>NodeScoreList<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token function">len</span><span class="token punctuation">(</span>nodes<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token keyword">range</span> nodes <span class="token punctuation">{</span>            result <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>result<span class="token punctuation">,</span> framework<span class="token punctuation">.</span>NodeScore<span class="token punctuation">{</span>                Name<span class="token punctuation">:</span>  nodes<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>Name<span class="token punctuation">,</span>                Score<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> result<span class="token punctuation">,</span> <span class="token boolean">nil</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// Run the Score plugins.</span>    <span class="token comment" spellcheck="true">// 运行分数插件</span>    scoresMap<span class="token punctuation">,</span> scoreStatus <span class="token operator">:=</span> prof<span class="token punctuation">.</span><span class="token function">RunScorePlugins</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> state<span class="token punctuation">,</span> pod<span class="token punctuation">,</span> nodes<span class="token punctuation">)</span>    <span class="token keyword">if</span> <span class="token operator">!</span>scoreStatus<span class="token punctuation">.</span><span class="token function">IsSuccess</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> framework<span class="token punctuation">.</span>NodeScoreList<span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> scoreStatus<span class="token punctuation">.</span><span class="token function">AsError</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// Summarize all scores.</span>    <span class="token comment" spellcheck="true">// 收集所有分数</span>    result <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span>framework<span class="token punctuation">.</span>NodeScoreList<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token function">len</span><span class="token punctuation">(</span>nodes<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token keyword">range</span> nodes <span class="token punctuation">{</span>        result <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>result<span class="token punctuation">,</span> framework<span class="token punctuation">.</span>NodeScore<span class="token punctuation">{</span>Name<span class="token punctuation">:</span> nodes<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>Name<span class="token punctuation">,</span> Score<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">)</span>        <span class="token keyword">for</span> j <span class="token operator">:=</span> <span class="token keyword">range</span> scoresMap <span class="token punctuation">{</span>            result<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>Score <span class="token operator">+=</span> scoresMap<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>Score        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 执行 extender </span>    <span class="token keyword">if</span> <span class="token function">len</span><span class="token punctuation">(</span>g<span class="token punctuation">.</span>extenders<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> nodes <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>        <span class="token keyword">var</span> mu sync<span class="token punctuation">.</span>Mutex        <span class="token keyword">var</span> wg sync<span class="token punctuation">.</span>WaitGroup        combinedScores <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token builtin">int64</span><span class="token punctuation">,</span> <span class="token function">len</span><span class="token punctuation">(</span>nodes<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token keyword">range</span> g<span class="token punctuation">.</span>extenders <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token operator">!</span>g<span class="token punctuation">.</span>extenders<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">IsInterested</span><span class="token punctuation">(</span>pod<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">continue</span>            <span class="token punctuation">}</span>            wg<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>            <span class="token keyword">go</span> <span class="token keyword">func</span><span class="token punctuation">(</span>extIndex <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                metrics<span class="token punctuation">.</span>SchedulerGoroutines<span class="token punctuation">.</span><span class="token function">WithLabelValues</span><span class="token punctuation">(</span><span class="token string">"prioritizing_extender"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Inc</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token keyword">defer</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    metrics<span class="token punctuation">.</span>SchedulerGoroutines<span class="token punctuation">.</span><span class="token function">WithLabelValues</span><span class="token punctuation">(</span><span class="token string">"prioritizing_extender"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Dec</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                    wg<span class="token punctuation">.</span><span class="token function">Done</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                prioritizedList<span class="token punctuation">,</span> weight<span class="token punctuation">,</span> err <span class="token operator">:=</span> g<span class="token punctuation">.</span>extenders<span class="token punctuation">[</span>extIndex<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">Prioritize</span><span class="token punctuation">(</span>pod<span class="token punctuation">,</span> nodes<span class="token punctuation">)</span>                <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>                    <span class="token comment" spellcheck="true">// Prioritization errors from extender can be ignored, let k8s/other extenders determine the priorities</span>                    <span class="token keyword">return</span>                <span class="token punctuation">}</span>                mu<span class="token punctuation">.</span><span class="token function">Lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token keyword">range</span> <span class="token operator">*</span>prioritizedList <span class="token punctuation">{</span>                    host<span class="token punctuation">,</span> score <span class="token operator">:=</span> <span class="token punctuation">(</span><span class="token operator">*</span>prioritizedList<span class="token punctuation">)</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>Host<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token operator">*</span>prioritizedList<span class="token punctuation">)</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>Score                    <span class="token keyword">if</span> klog<span class="token punctuation">.</span><span class="token function">V</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                        klog<span class="token punctuation">.</span><span class="token function">Infof</span><span class="token punctuation">(</span><span class="token string">"%v -> %v: %v, Score: (%d)"</span><span class="token punctuation">,</span> util<span class="token punctuation">.</span><span class="token function">GetPodFullName</span><span class="token punctuation">(</span>pod<span class="token punctuation">)</span><span class="token punctuation">,</span> host<span class="token punctuation">,</span> g<span class="token punctuation">.</span>extenders<span class="token punctuation">[</span>extIndex<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">Name</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> score<span class="token punctuation">)</span>                    <span class="token punctuation">}</span>                    combinedScores<span class="token punctuation">[</span>host<span class="token punctuation">]</span> <span class="token operator">+=</span> score <span class="token operator">*</span> weight                <span class="token punctuation">}</span>                mu<span class="token punctuation">.</span><span class="token function">Unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token punctuation">}</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// wait for all go routines to finish</span>        wg<span class="token punctuation">.</span><span class="token function">Wait</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token keyword">range</span> result <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// MaxExtenderPriority may diverge from the max priority used in the scheduler and defined by MaxNodeScore,</span>            <span class="token comment" spellcheck="true">// therefore we need to scale the score returned by extenders to the score range used by the scheduler.</span>            result<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>Score <span class="token operator">+=</span> combinedScores<span class="token punctuation">[</span>result<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>Name<span class="token punctuation">]</span> <span class="token operator">*</span> <span class="token punctuation">(</span>framework<span class="token punctuation">.</span>MaxNodeScore <span class="token operator">/</span> extenderv1<span class="token punctuation">.</span>MaxExtenderPriority<span class="token punctuation">)</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> klog<span class="token punctuation">.</span><span class="token function">V</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token keyword">range</span> result <span class="token punctuation">{</span>            klog<span class="token punctuation">.</span><span class="token function">Infof</span><span class="token punctuation">(</span><span class="token string">"Host %s => Score %d"</span><span class="token punctuation">,</span> result<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>Name<span class="token punctuation">,</span> result<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>Score<span class="token punctuation">)</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> result<span class="token punctuation">,</span> <span class="token boolean">nil</span><span class="token punctuation">}</span></code></pre><h4 id="抢占算法"><a href="#抢占算法" class="headerlink" title="抢占算法"></a>抢占算法</h4><p>正常情况下，当一个 pod 调度失败后，就会被暂时 “搁置” 处于 <code>pending</code> 状态，直到 pod 被更新或者集群状态发生变化，调度器才会对这个 pod 进行重新调度。但在实际的业务场景中会存在在线与离线业务之分，若在线业务的 pod 因资源不足而调度失败时，此时就需要离线业务下掉一部分为在线业务提供资源，即在线业务要抢占离线业务的资源，此时就需要 scheduler 的优先级和抢占机制了，该机制解决的是 pod 调度失败时该怎么办的问题，若该 pod 的优先级比较高此时并不会被”搁置”，而是会”挤走”某个 node 上的一些低优先级的 pod，这样就可以保证高优先级的 pod 调度成功。</p><p>抢占发生的原因，一定是一个高优先级的 pod 调度失败，我们称这个 pod 为“抢占者”，称被抢占的 pod 为“牺牲者”(victims)。而 kubernetes 调度器实现抢占算法的一个最重要的设计，就是在调度队列的实现里，使用了两个不同的队列。</p><p>第一个队列叫作 activeQ，凡是在 activeQ 里的 pod，都是下一个调度周期需要调度的对象。所以，当你在 kubernetes 集群里新创建一个 pod 的时候，调度器会将这个 pod 入队到 activeQ 里面，调度器不断从队列里出队(pop)一个 pod 进行调度，实际上都是从 activeQ 里出队的。</p><p>第二个队列叫作 unschedulableQ，专门用来存放调度失败的 pod，当一个 unschedulableQ 里的 pod 被更新之后，调度器会自动把这个 pod 移动到 activeQ 里，从而给这些调度失败的 pod “重新做人”的机会。</p><p>当 pod 拥有了优先级之后，高优先级的 pod 就可能会比低优先级的 pod 提前出队，从而尽早完成调度过程。</p><p>代码路径：<code>pkg/scheduler/internal/queue/scheduling_queue.go:202</code></p><pre class=" language-go"><code class="language-go"><span class="token comment" spellcheck="true">// NewPriorityQueue creates a PriorityQueue object.</span><span class="token keyword">func</span> <span class="token function">NewPriorityQueue</span><span class="token punctuation">(</span>    lessFn framework<span class="token punctuation">.</span>LessFunc<span class="token punctuation">,</span>    opts <span class="token operator">...</span>Option<span class="token punctuation">,</span><span class="token punctuation">)</span> <span class="token operator">*</span>PriorityQueue <span class="token punctuation">{</span>    options <span class="token operator">:=</span> defaultPriorityQueueOptions    <span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> opt <span class="token operator">:=</span> <span class="token keyword">range</span> opts <span class="token punctuation">{</span>        <span class="token function">opt</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>options<span class="token punctuation">)</span>    <span class="token punctuation">}</span>    comp <span class="token operator">:=</span> <span class="token keyword">func</span><span class="token punctuation">(</span>podInfo1<span class="token punctuation">,</span> podInfo2 <span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token builtin">bool</span> <span class="token punctuation">{</span>        pInfo1 <span class="token operator">:=</span> podInfo1<span class="token punctuation">.</span><span class="token punctuation">(</span><span class="token operator">*</span>framework<span class="token punctuation">.</span>PodInfo<span class="token punctuation">)</span>        pInfo2 <span class="token operator">:=</span> podInfo2<span class="token punctuation">.</span><span class="token punctuation">(</span><span class="token operator">*</span>framework<span class="token punctuation">.</span>PodInfo<span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token function">lessFn</span><span class="token punctuation">(</span>pInfo1<span class="token punctuation">,</span> pInfo2<span class="token punctuation">)</span>    <span class="token punctuation">}</span>    pq <span class="token operator">:=</span> <span class="token operator">&amp;</span>PriorityQueue<span class="token punctuation">{</span>        clock<span class="token punctuation">:</span>                     options<span class="token punctuation">.</span>clock<span class="token punctuation">,</span>        stop<span class="token punctuation">:</span>                      <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">chan</span> <span class="token keyword">struct</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        podInitialBackoffDuration<span class="token punctuation">:</span> options<span class="token punctuation">.</span>podInitialBackoffDuration<span class="token punctuation">,</span>        podMaxBackoffDuration<span class="token punctuation">:</span>     options<span class="token punctuation">.</span>podMaxBackoffDuration<span class="token punctuation">,</span>        activeQ<span class="token punctuation">:</span>                   heap<span class="token punctuation">.</span><span class="token function">NewWithRecorder</span><span class="token punctuation">(</span>podInfoKeyFunc<span class="token punctuation">,</span> comp<span class="token punctuation">,</span> metrics<span class="token punctuation">.</span><span class="token function">NewActivePodsRecorder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        unschedulableQ<span class="token punctuation">:</span>            <span class="token function">newUnschedulablePodsMap</span><span class="token punctuation">(</span>metrics<span class="token punctuation">.</span><span class="token function">NewUnschedulablePodsRecorder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        nominatedPods<span class="token punctuation">:</span>             <span class="token function">newNominatedPodMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        moveRequestCycle<span class="token punctuation">:</span>          <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span>    <span class="token punctuation">}</span>    pq<span class="token punctuation">.</span>cond<span class="token punctuation">.</span>L <span class="token operator">=</span> <span class="token operator">&amp;</span>pq<span class="token punctuation">.</span>lock    pq<span class="token punctuation">.</span>podBackoffQ <span class="token operator">=</span> heap<span class="token punctuation">.</span><span class="token function">NewWithRecorder</span><span class="token punctuation">(</span>podInfoKeyFunc<span class="token punctuation">,</span> pq<span class="token punctuation">.</span>podsCompareBackoffCompleted<span class="token punctuation">,</span> metrics<span class="token punctuation">.</span><span class="token function">NewBackoffPodsRecorder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> pq<span class="token punctuation">}</span></code></pre><p>前面我们知道<code>scheduleOne()</code> 是执行调度算法的主逻辑，其主要功能有：</p><ul><li>调用 <code>sched.schedule()</code>，即执行 predicates 算法和 priorities 算法</li><li>若执行失败，会返回 <code>core.FitError</code></li><li>若开启了抢占机制，则执行抢占机制</li><li>……</li></ul><p>代码路径：<code>pkg/scheduler/scheduler.go:548</code></p><pre class=" language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token punctuation">(</span>sched <span class="token operator">*</span>Scheduler<span class="token punctuation">)</span> <span class="token function">scheduleOne</span><span class="token punctuation">(</span>ctx context<span class="token punctuation">.</span>Context<span class="token punctuation">)</span> <span class="token punctuation">{</span>    podInfo <span class="token operator">:=</span> sched<span class="token punctuation">.</span><span class="token function">NextPod</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token operator">...</span>    scheduleResult<span class="token punctuation">,</span> err <span class="token operator">:=</span> sched<span class="token punctuation">.</span>Algorithm<span class="token punctuation">.</span><span class="token function">Schedule</span><span class="token punctuation">(</span>schedulingCycleCtx<span class="token punctuation">,</span> prof<span class="token punctuation">,</span> state<span class="token punctuation">,</span> pod<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// predicates 算法和 priorities 算法执行失败</span>    <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> fitError<span class="token punctuation">,</span> ok <span class="token operator">:=</span> err<span class="token punctuation">.</span><span class="token punctuation">(</span><span class="token operator">*</span>core<span class="token punctuation">.</span>FitError<span class="token punctuation">)</span><span class="token punctuation">;</span> ok             <span class="token comment" spellcheck="true">// 是否开启抢占机制</span>            <span class="token keyword">if</span> sched<span class="token punctuation">.</span>DisablePreemption <span class="token punctuation">{</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// 执行抢占机制</span>                preemptionStartTime <span class="token operator">:=</span> time<span class="token punctuation">.</span><span class="token function">Now</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                sched<span class="token punctuation">.</span><span class="token function">preempt</span><span class="token punctuation">(</span>schedulingCycleCtx<span class="token punctuation">,</span> prof<span class="token punctuation">,</span> state<span class="token punctuation">,</span> pod<span class="token punctuation">,</span> fitError<span class="token punctuation">)</span>                metrics<span class="token punctuation">.</span>PreemptionAttempts<span class="token punctuation">.</span><span class="token function">Inc</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token operator">...</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token punctuation">}</span>        sched<span class="token punctuation">.</span><span class="token function">recordSchedulingFailure</span><span class="token punctuation">(</span>prof<span class="token punctuation">,</span> podInfo<span class="token punctuation">.</span><span class="token function">DeepCopy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> err<span class="token punctuation">,</span> v1<span class="token punctuation">.</span>PodReasonUnschedulable<span class="token punctuation">,</span> err<span class="token punctuation">.</span><span class="token function">Error</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">return</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>我们主要来看其中的抢占机制，<code>sched.preempt()</code> 是执行抢占机制的主逻辑，主要功能有：</p><ul><li>从 apiserver 获取 pod info</li><li>调用 <code>sched.Algorithm.Preempt()</code>执行抢占逻辑，该函数会返回抢占成功的 node、被抢占的 pods(victims) 以及需要被移除已提名的 pods</li><li>更新 scheduler 缓存，为抢占者绑定 nodeName，即设定 pod.Status.NominatedNodeName</li><li>将 pod info 提交到 apiserver</li><li>删除被抢占的 pods</li><li>删除被抢占 pods 的 NominatedNodeName 字段</li></ul><p>可以看到当上述抢占过程发生时，抢占者并不会立刻被调度到被抢占的 node 上，调度器只会将抢占者的 status.nominatedNodeName 字段设置为被抢占的 node 的名字。然后，抢占者会重新进入下一个调度周期，在新的调度周期里来决定是不是要运行在被抢占的节点上，当然，即使在下一个调度周期，调度器也不会保证抢占者一定会运行在被抢占的节点上。</p><p>这样设计的一个重要原因是调度器只会通过标准的 DELETE API 来删除被抢占的 pod，所以，这些 pod 必然是有一定的“优雅退出”时间（默认是 30s）的。而在这段时间里，其他的节点也是有可能变成可调度的，或者直接有新的节点被添加到这个集群中来。所以，鉴于优雅退出期间集群的可调度性可能会发生的变化，把抢占者交给下一个调度周期再处理，是一个非常合理的选择。而在抢占者等待被调度的过程中，如果有其他更高优先级的 pod 也要抢占同一个节点，那么调度器就会清空原抢占者的 status.nominatedNodeName 字段，从而允许更高优先级的抢占者执行抢占，并且，这也使得原抢占者本身也有机会去重新抢占其他节点。以上这些都是设置 <code>nominatedNodeName</code> 字段的主要目的。</p><p>代码路径：<code>pkg/scheduler/scheduler.go:392</code></p><pre class=" language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token punctuation">(</span>sched <span class="token operator">*</span>Scheduler<span class="token punctuation">)</span> <span class="token function">preempt</span><span class="token punctuation">(</span>ctx context<span class="token punctuation">.</span>Context<span class="token punctuation">,</span> prof <span class="token operator">*</span>profile<span class="token punctuation">.</span>Profile<span class="token punctuation">,</span> state <span class="token operator">*</span>framework<span class="token punctuation">.</span>CycleState<span class="token punctuation">,</span> preemptor <span class="token operator">*</span>v1<span class="token punctuation">.</span>Pod<span class="token punctuation">,</span> scheduleErr <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token builtin">string</span><span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 获取 pod info</span>    preemptor<span class="token punctuation">,</span> err <span class="token operator">:=</span> sched<span class="token punctuation">.</span>podPreemptor<span class="token punctuation">.</span><span class="token function">getUpdatedPod</span><span class="token punctuation">(</span>preemptor<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// 执行抢占算法</span>    node<span class="token punctuation">,</span> victims<span class="token punctuation">,</span> nominatedPodsToClear<span class="token punctuation">,</span> err <span class="token operator">:=</span> sched<span class="token punctuation">.</span>Algorithm<span class="token punctuation">.</span><span class="token function">Preempt</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> prof<span class="token punctuation">,</span> state<span class="token punctuation">,</span> preemptor<span class="token punctuation">,</span> scheduleErr<span class="token punctuation">)</span>    <span class="token keyword">var</span> nodeName <span class="token operator">=</span> <span class="token string">""</span>    <span class="token keyword">if</span> node <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>        nodeName <span class="token operator">=</span> node<span class="token punctuation">.</span>Name        <span class="token comment" spellcheck="true">// Update the scheduling queue with the nominated pod information. Without</span>        <span class="token comment" spellcheck="true">// this, there would be a race condition between the next scheduling cycle</span>        <span class="token comment" spellcheck="true">// and the time the scheduler receives a Pod Update for the nominated pod.</span>        <span class="token comment" spellcheck="true">// 更新 scheduler 缓存，为抢占者绑定 nodename，即设定 pod.Status.NominatedNodeName</span>        sched<span class="token punctuation">.</span>SchedulingQueue<span class="token punctuation">.</span><span class="token function">UpdateNominatedPodForNode</span><span class="token punctuation">(</span>preemptor<span class="token punctuation">,</span> nodeName<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">// Make a call to update nominated node name of the pod on the API server.</span>        <span class="token comment" spellcheck="true">// 将 pod info 提交到 apiserver</span>        err <span class="token operator">=</span> sched<span class="token punctuation">.</span>podPreemptor<span class="token punctuation">.</span><span class="token function">setNominatedNodeName</span><span class="token punctuation">(</span>preemptor<span class="token punctuation">,</span> nodeName<span class="token punctuation">)</span>        <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>            klog<span class="token punctuation">.</span><span class="token function">Errorf</span><span class="token punctuation">(</span><span class="token string">"Error in preemption process. Cannot set 'NominatedPod' on pod %v/%v: %v"</span><span class="token punctuation">,</span> preemptor<span class="token punctuation">.</span>Namespace<span class="token punctuation">,</span> preemptor<span class="token punctuation">.</span>Name<span class="token punctuation">,</span> err<span class="token punctuation">)</span>            sched<span class="token punctuation">.</span>SchedulingQueue<span class="token punctuation">.</span><span class="token function">DeleteNominatedPodIfExists</span><span class="token punctuation">(</span>preemptor<span class="token punctuation">)</span>            <span class="token keyword">return</span> <span class="token string">""</span><span class="token punctuation">,</span> err        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 删除被抢占的 pods</span>        <span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> victim <span class="token operator">:=</span> <span class="token keyword">range</span> victims <span class="token punctuation">{</span>            <span class="token keyword">if</span> err <span class="token operator">:=</span> sched<span class="token punctuation">.</span>podPreemptor<span class="token punctuation">.</span><span class="token function">deletePod</span><span class="token punctuation">(</span>victim<span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>                klog<span class="token punctuation">.</span><span class="token function">Errorf</span><span class="token punctuation">(</span><span class="token string">"Error preempting pod %v/%v: %v"</span><span class="token punctuation">,</span> victim<span class="token punctuation">.</span>Namespace<span class="token punctuation">,</span> victim<span class="token punctuation">.</span>Name<span class="token punctuation">,</span> err<span class="token punctuation">)</span>                <span class="token keyword">return</span> <span class="token string">""</span><span class="token punctuation">,</span> err            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">// If the victim is a WaitingPod, send a reject message to the PermitPlugin</span>            <span class="token keyword">if</span> waitingPod <span class="token operator">:=</span> prof<span class="token punctuation">.</span><span class="token function">GetWaitingPod</span><span class="token punctuation">(</span>victim<span class="token punctuation">.</span>UID<span class="token punctuation">)</span><span class="token punctuation">;</span> waitingPod <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>                waitingPod<span class="token punctuation">.</span><span class="token function">Reject</span><span class="token punctuation">(</span><span class="token string">"preempted"</span><span class="token punctuation">)</span>            <span class="token punctuation">}</span>            prof<span class="token punctuation">.</span>Recorder<span class="token punctuation">.</span><span class="token function">Eventf</span><span class="token punctuation">(</span>victim<span class="token punctuation">,</span> preemptor<span class="token punctuation">,</span> v1<span class="token punctuation">.</span>EventTypeNormal<span class="token punctuation">,</span> <span class="token string">"Preempted"</span><span class="token punctuation">,</span> <span class="token string">"Preempting"</span><span class="token punctuation">,</span> <span class="token string">"Preempted by %v/%v on node %v"</span><span class="token punctuation">,</span> preemptor<span class="token punctuation">.</span>Namespace<span class="token punctuation">,</span> preemptor<span class="token punctuation">.</span>Name<span class="token punctuation">,</span> nodeName<span class="token punctuation">)</span>        <span class="token punctuation">}</span>        metrics<span class="token punctuation">.</span>PreemptionVictims<span class="token punctuation">.</span><span class="token function">Observe</span><span class="token punctuation">(</span><span class="token function">float64</span><span class="token punctuation">(</span><span class="token function">len</span><span class="token punctuation">(</span>victims<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// Clearing nominated pods should happen outside of "if node != nil". Node could</span>    <span class="token comment" spellcheck="true">// be nil when a pod with nominated node name is eligible to preempt again,</span>    <span class="token comment" spellcheck="true">// but preemption logic does not find any node for it. In that case Preempt()</span>    <span class="token comment" spellcheck="true">// function of generic_scheduler.go returns the pod itself for removal of</span>    <span class="token comment" spellcheck="true">// the 'NominatedPod' field.</span>     <span class="token comment" spellcheck="true">// 删除被抢占 pods 的 NominatedNodeName 字段</span>    <span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> p <span class="token operator">:=</span> <span class="token keyword">range</span> nominatedPodsToClear <span class="token punctuation">{</span>        rErr <span class="token operator">:=</span> sched<span class="token punctuation">.</span>podPreemptor<span class="token punctuation">.</span><span class="token function">removeNominatedNodeName</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span>        <span class="token keyword">if</span> rErr <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>            klog<span class="token punctuation">.</span><span class="token function">Errorf</span><span class="token punctuation">(</span><span class="token string">"Cannot remove 'NominatedPod' field of pod: %v"</span><span class="token punctuation">,</span> rErr<span class="token punctuation">)</span>            <span class="token comment" spellcheck="true">// We do not return as this error is not critical.</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> nodeName<span class="token punctuation">,</span> err<span class="token punctuation">}</span></code></pre><p><code>preempt()</code>中会调用 <code>sched.Algorithm.Preempt()</code>来执行实际抢占的算法，其主要功能有：</p><ul><li>判断 err 是否为 <code>FitError</code></li><li>调用<code>podEligibleToPreemptOthers()</code>确认 pod 是否有抢占其他 pod 的资格，若 pod 已经抢占了低优先级的 pod，被抢占的 pod 处于 terminating 状态中，则不会继续进行抢占</li><li>如果确定抢占可以发生，调度器会把自己缓存的所有节点信息复制一份，然后使用这个副本来模拟抢占过程</li><li>过滤预选失败的 node 列表，此处会检查 predicates 失败的原因，若存在 NodeSelectorNotMatch、PodNotMatchHostName 这些 error 则不能成为抢占者，如果过滤出的候选 node 为空则返回抢占者作为 nominatedPodsToClear</li><li>获取 <code>PodDisruptionBudget</code> 对象</li><li>从预选失败的 node 列表中并发计算可以被抢占的 nodes，得到 <code>nodeToVictims</code></li><li>若声明了 extenders 则调用 extenders 再次过滤 <code>nodeToVictims</code></li><li>调用 <code>pickOneNodeForPreemption()</code> 从 <code>nodeToVictims</code> 中选出一个节点作为最佳候选人</li><li>移除低优先级 pod 的 <code>Nominated</code>，更新这些 pod，移动到 activeQ 队列中，让调度器为这些 pod 重新 bind node</li></ul><p>代码路径：<code>pkg/scheduler/core/generic_scheduler.go:270</code></p><pre class=" language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token punctuation">(</span>g <span class="token operator">*</span>genericScheduler<span class="token punctuation">)</span> <span class="token function">Preempt</span><span class="token punctuation">(</span>ctx context<span class="token punctuation">.</span>Context<span class="token punctuation">,</span> prof <span class="token operator">*</span>profile<span class="token punctuation">.</span>Profile<span class="token punctuation">,</span> state <span class="token operator">*</span>framework<span class="token punctuation">.</span>CycleState<span class="token punctuation">,</span> pod <span class="token operator">*</span>v1<span class="token punctuation">.</span>Pod<span class="token punctuation">,</span> scheduleErr <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token operator">*</span>v1<span class="token punctuation">.</span>Node<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">*</span>v1<span class="token punctuation">.</span>Pod<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">*</span>v1<span class="token punctuation">.</span>Pod<span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// Scheduler may return various types of errors. Consider preemption only if</span>    <span class="token comment" spellcheck="true">// the error is of type FitError.</span>    fitError<span class="token punctuation">,</span> ok <span class="token operator">:=</span> scheduleErr<span class="token punctuation">.</span><span class="token punctuation">(</span><span class="token operator">*</span>FitError<span class="token punctuation">)</span>    <span class="token keyword">if</span> <span class="token operator">!</span>ok <span class="token operator">||</span> fitError <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> <span class="token boolean">nil</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 判断 pod 是否支持抢占，若 pod 已经抢占了低优先级的 pod，被抢占的 pod 处于 terminating 状态中，则不会继续进行抢占</span>    <span class="token keyword">if</span> <span class="token operator">!</span><span class="token function">podEligibleToPreemptOthers</span><span class="token punctuation">(</span>pod<span class="token punctuation">,</span> g<span class="token punctuation">.</span>nodeInfoSnapshot<span class="token punctuation">.</span><span class="token function">NodeInfos</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> g<span class="token punctuation">.</span>enableNonPreempting<span class="token punctuation">)</span> <span class="token punctuation">{</span>        klog<span class="token punctuation">.</span><span class="token function">V</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Infof</span><span class="token punctuation">(</span><span class="token string">"Pod %v/%v is not eligible for more preemption."</span><span class="token punctuation">,</span> pod<span class="token punctuation">.</span>Namespace<span class="token punctuation">,</span> pod<span class="token punctuation">.</span>Name<span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> <span class="token boolean">nil</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 从镜像中获取 node list</span>    allNodes<span class="token punctuation">,</span> err <span class="token operator">:=</span> g<span class="token punctuation">.</span>nodeInfoSnapshot<span class="token punctuation">.</span><span class="token function">NodeInfos</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">List</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> err    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token function">len</span><span class="token punctuation">(</span>allNodes<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> ErrNoNodesAvailable    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 过滤 predicates 算法执行失败的 node 作为抢占的候选 node</span>    potentialNodes <span class="token operator">:=</span> <span class="token function">nodesWherePreemptionMightHelp</span><span class="token punctuation">(</span>allNodes<span class="token punctuation">,</span> fitError<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// 如果过滤出的候选 node 为空则返回抢占者作为 nominatedPodsToClear</span>    <span class="token keyword">if</span> <span class="token function">len</span><span class="token punctuation">(</span>potentialNodes<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token punctuation">{</span>        klog<span class="token punctuation">.</span><span class="token function">V</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Infof</span><span class="token punctuation">(</span><span class="token string">"Preemption will not help schedule pod %v/%v on any node."</span><span class="token punctuation">,</span> pod<span class="token punctuation">.</span>Namespace<span class="token punctuation">,</span> pod<span class="token punctuation">.</span>Name<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">// In this case, we should clean-up any existing nominated node name of the pod.</span>        <span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">*</span>v1<span class="token punctuation">.</span>Pod<span class="token punctuation">{</span>pod<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token boolean">nil</span>    <span class="token punctuation">}</span>    <span class="token keyword">var</span> pdbs <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">*</span>policy<span class="token punctuation">.</span>PodDisruptionBudget    <span class="token keyword">if</span> g<span class="token punctuation">.</span>pdbLister <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>        pdbs<span class="token punctuation">,</span> err <span class="token operator">=</span> g<span class="token punctuation">.</span>pdbLister<span class="token punctuation">.</span><span class="token function">List</span><span class="token punctuation">(</span>labels<span class="token punctuation">.</span><span class="token function">Everything</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> err        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 过滤出可以抢占的 node 列表</span>    nodeToVictims<span class="token punctuation">,</span> err <span class="token operator">:=</span> g<span class="token punctuation">.</span><span class="token function">selectNodesForPreemption</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> prof<span class="token punctuation">,</span> state<span class="token punctuation">,</span> pod<span class="token punctuation">,</span> potentialNodes<span class="token punctuation">,</span> pdbs<span class="token punctuation">)</span>    <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> err    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// We will only check nodeToVictims with extenders that support preemption.</span>    <span class="token comment" spellcheck="true">// Extenders which do not support preemption may later prevent preemptor from being scheduled on the nominated</span>    <span class="token comment" spellcheck="true">// node. In that case, scheduler will find a different host for the preemptor in subsequent scheduling cycles.</span>    <span class="token comment" spellcheck="true">// 若有 extender 则执行</span>    nodeToVictims<span class="token punctuation">,</span> err <span class="token operator">=</span> g<span class="token punctuation">.</span><span class="token function">processPreemptionWithExtenders</span><span class="token punctuation">(</span>pod<span class="token punctuation">,</span> nodeToVictims<span class="token punctuation">)</span>    <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> err    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 选出最佳的 node</span>    candidateNode <span class="token operator">:=</span> <span class="token function">pickOneNodeForPreemption</span><span class="token punctuation">(</span>nodeToVictims<span class="token punctuation">)</span>    <span class="token keyword">if</span> candidateNode <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> <span class="token boolean">nil</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// Lower priority pods nominated to run on this node, may no longer fit on</span>    <span class="token comment" spellcheck="true">// this node. So, we should remove their nomination. Removing their</span>    <span class="token comment" spellcheck="true">// nomination updates these pods and moves them to the active queue. It</span>    <span class="token comment" spellcheck="true">// lets scheduler find another place for them.</span>    <span class="token comment" spellcheck="true">// 移除低优先级 pod 的 Nominated，更新这些 pod，移动到 activeQ 队列中，让调度器</span>    <span class="token comment" spellcheck="true">// 为这些 pod 重新 bind node</span>    nominatedPods <span class="token operator">:=</span> g<span class="token punctuation">.</span><span class="token function">getLowerPriorityNominatedPods</span><span class="token punctuation">(</span>pod<span class="token punctuation">,</span> candidateNode<span class="token punctuation">.</span>Name<span class="token punctuation">)</span>    <span class="token keyword">return</span> candidateNode<span class="token punctuation">,</span> nodeToVictims<span class="token punctuation">[</span>candidateNode<span class="token punctuation">]</span><span class="token punctuation">.</span>Pods<span class="token punctuation">,</span> nominatedPods<span class="token punctuation">,</span> <span class="token boolean">nil</span><span class="token punctuation">}</span></code></pre><p>该函数中调用了多个函数：</p><ul><li><code>nodesWherePreemptionMightHelp()</code>：过滤 predicates 算法执行失败的 node</li><li><code>selectNodesForPreemption()</code>：过滤出可以抢占的 node 列表</li><li><code>pickOneNodeForPreemption()</code>：选出最佳的 node</li><li><code>getLowerPriorityNominatedPods()</code>：移除低优先级 pod 的 Nominated</li></ul><p><code>selectNodesForPreemption()</code> 从 prediacates 算法执行失败的 node 列表中来寻找可以被抢占的 node，通过<code>workqueue.ParallelizeUntil()</code>并发执行<code>checkNode()</code>函数检查 node。</p><pre class=" language-go"><code class="language-go"><span class="token comment" spellcheck="true">// selectNodesForPreemption finds all the nodes with possible victims for</span><span class="token comment" spellcheck="true">// preemption in parallel.</span><span class="token keyword">func</span> <span class="token function">selectNodesForPreemption</span><span class="token punctuation">(</span>    ctx context<span class="token punctuation">.</span>Context<span class="token punctuation">,</span>    pr framework<span class="token punctuation">.</span>PluginsRunner<span class="token punctuation">,</span>    nominator framework<span class="token punctuation">.</span>PodNominator<span class="token punctuation">,</span>    state <span class="token operator">*</span>framework<span class="token punctuation">.</span>CycleState<span class="token punctuation">,</span>    pod <span class="token operator">*</span>v1<span class="token punctuation">.</span>Pod<span class="token punctuation">,</span>    potentialNodes <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">*</span>framework<span class="token punctuation">.</span>NodeInfo<span class="token punctuation">,</span>    pdbs <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">*</span>policy<span class="token punctuation">.</span>PodDisruptionBudget<span class="token punctuation">,</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token operator">*</span>extenderv1<span class="token punctuation">.</span>Victims<span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    nodeNameToVictims <span class="token operator">:=</span> <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token operator">*</span>extenderv1<span class="token punctuation">.</span>Victims<span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token keyword">var</span> resultLock sync<span class="token punctuation">.</span>Mutex     <span class="token comment" spellcheck="true">// checkNode 函数</span>    checkNode <span class="token operator">:=</span> <span class="token keyword">func</span><span class="token punctuation">(</span>i <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        nodeInfoCopy <span class="token operator">:=</span> potentialNodes<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">Clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        stateCopy <span class="token operator">:=</span> state<span class="token punctuation">.</span><span class="token function">Clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">// 调用 selectVictimsOnNode 函数进行检查</span>        pods<span class="token punctuation">,</span> numPDBViolations<span class="token punctuation">,</span> fits <span class="token operator">:=</span> <span class="token function">selectVictimsOnNode</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> pr<span class="token punctuation">,</span> nominator<span class="token punctuation">,</span> stateCopy<span class="token punctuation">,</span> pod<span class="token punctuation">,</span> nodeInfoCopy<span class="token punctuation">,</span> pdbs<span class="token punctuation">)</span>        <span class="token keyword">if</span> fits <span class="token punctuation">{</span>            resultLock<span class="token punctuation">.</span><span class="token function">Lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            victims <span class="token operator">:=</span> extenderv1<span class="token punctuation">.</span>Victims<span class="token punctuation">{</span>                Pods<span class="token punctuation">:</span>             pods<span class="token punctuation">,</span>                NumPDBViolations<span class="token punctuation">:</span> <span class="token function">int64</span><span class="token punctuation">(</span>numPDBViolations<span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token punctuation">}</span>            nodeNameToVictims<span class="token punctuation">[</span>potentialNodes<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">Node</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>Name<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">&amp;</span>victims            resultLock<span class="token punctuation">.</span><span class="token function">Unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 启动默认 16 个 goroutine 并发执行</span>    parallelize<span class="token punctuation">.</span><span class="token function">Until</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> <span class="token function">len</span><span class="token punctuation">(</span>potentialNodes<span class="token punctuation">)</span><span class="token punctuation">,</span> checkNode<span class="token punctuation">)</span>    <span class="token keyword">return</span> nodeNameToVictims<span class="token punctuation">,</span> <span class="token boolean">nil</span><span class="token punctuation">}</span></code></pre><p>其中调用的<code>selectVictimsOnNode()</code>是来获取每个 node 上 victims pod 的，首先移除所有低优先级的 pod 尝试抢占者是否可以调度成功，如果能够调度成功，然后基于 pod 是否有 PDB 被分为两组 <code>violatingVictims</code> 和 <code>nonViolatingVictims</code>，再对每一组的 pod 按优先级进行排序。PDB(pod 中断预算)是 kubernetes 保证副本高可用的一个对象。</p><p>然后开始逐一”删除“ pod 即要删掉最少的 pod 数来完成这次抢占即可，先从 <code>violatingVictims</code>(有PDB)的一组中进行”删除“ pod，并且记录删除有 PDB pod 的数量，然后再“删除” <code>nonViolatingVictims</code> 组中的 pod，每次”删除“一个 pod 都要检查一下抢占者是否能够运行在该 node 上即执行一次预选策略，若执行预选策略失败则该 node 当前不满足抢占需要继续”删除“ pod 并将该 pod 加入到 victims 中，直到”删除“足够多的 pod 可以满足抢占，最后返回 victims 以及删除有 PDB pod 的数量。</p><p>代码路径：<code>pkg/scheduler/core/generic_scheduler.go:942</code></p><pre class=" language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">selectVictimsOnNode</span><span class="token punctuation">(</span>    ctx context<span class="token punctuation">.</span>Context<span class="token punctuation">,</span>    pr framework<span class="token punctuation">.</span>PluginsRunner<span class="token punctuation">,</span>    nominator framework<span class="token punctuation">.</span>PodNominator<span class="token punctuation">,</span>    state <span class="token operator">*</span>framework<span class="token punctuation">.</span>CycleState<span class="token punctuation">,</span>    pod <span class="token operator">*</span>v1<span class="token punctuation">.</span>Pod<span class="token punctuation">,</span>    nodeInfo <span class="token operator">*</span>framework<span class="token punctuation">.</span>NodeInfo<span class="token punctuation">,</span>    pdbs <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">*</span>policy<span class="token punctuation">.</span>PodDisruptionBudget<span class="token punctuation">,</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">*</span>v1<span class="token punctuation">.</span>Pod<span class="token punctuation">,</span> <span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token builtin">bool</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> potentialVictims <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">*</span>v1<span class="token punctuation">.</span>Pod    removePod <span class="token operator">:=</span> <span class="token keyword">func</span><span class="token punctuation">(</span>rp <span class="token operator">*</span>v1<span class="token punctuation">.</span>Pod<span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> err <span class="token operator">:=</span> nodeInfo<span class="token punctuation">.</span><span class="token function">RemovePod</span><span class="token punctuation">(</span>rp<span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> err        <span class="token punctuation">}</span>        status <span class="token operator">:=</span> pr<span class="token punctuation">.</span><span class="token function">RunPreFilterExtensionRemovePod</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> state<span class="token punctuation">,</span> pod<span class="token punctuation">,</span> rp<span class="token punctuation">,</span> nodeInfo<span class="token punctuation">)</span>        <span class="token keyword">if</span> <span class="token operator">!</span>status<span class="token punctuation">.</span><span class="token function">IsSuccess</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> status<span class="token punctuation">.</span><span class="token function">AsError</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token boolean">nil</span>    <span class="token punctuation">}</span>    addPod <span class="token operator">:=</span> <span class="token keyword">func</span><span class="token punctuation">(</span>ap <span class="token operator">*</span>v1<span class="token punctuation">.</span>Pod<span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">{</span>        nodeInfo<span class="token punctuation">.</span><span class="token function">AddPod</span><span class="token punctuation">(</span>ap<span class="token punctuation">)</span>        status <span class="token operator">:=</span> pr<span class="token punctuation">.</span><span class="token function">RunPreFilterExtensionAddPod</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> state<span class="token punctuation">,</span> pod<span class="token punctuation">,</span> ap<span class="token punctuation">,</span> nodeInfo<span class="token punctuation">)</span>        <span class="token keyword">if</span> <span class="token operator">!</span>status<span class="token punctuation">.</span><span class="token function">IsSuccess</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> status<span class="token punctuation">.</span><span class="token function">AsError</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token boolean">nil</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// As the first step, remove all the lower priority pods from the node and</span>    <span class="token comment" spellcheck="true">// check if the given pod can be scheduled.</span>     <span class="token comment" spellcheck="true">// 先删除所有的低优先级 pod 检查是否能满足抢占 pod 的调度需求</span>    podPriority <span class="token operator">:=</span> podutil<span class="token punctuation">.</span><span class="token function">GetPodPriority</span><span class="token punctuation">(</span>pod<span class="token punctuation">)</span>    <span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> p <span class="token operator">:=</span> <span class="token keyword">range</span> nodeInfo<span class="token punctuation">.</span>Pods <span class="token punctuation">{</span>        <span class="token keyword">if</span> podutil<span class="token punctuation">.</span><span class="token function">GetPodPriority</span><span class="token punctuation">(</span>p<span class="token punctuation">.</span>Pod<span class="token punctuation">)</span> <span class="token operator">&lt;</span> podPriority <span class="token punctuation">{</span>            potentialVictims <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>potentialVictims<span class="token punctuation">,</span> p<span class="token punctuation">.</span>Pod<span class="token punctuation">)</span>            <span class="token keyword">if</span> err <span class="token operator">:=</span> <span class="token function">removePod</span><span class="token punctuation">(</span>p<span class="token punctuation">.</span>Pod<span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token boolean">false</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 如果删除所有低优先级的 pod 不符合要求则直接过滤掉该 node</span>    <span class="token comment" spellcheck="true">// podPassesFiltersOnNode 是用来执行预选函数的</span>    <span class="token keyword">if</span> fits<span class="token punctuation">,</span> <span class="token boolean">_</span><span class="token punctuation">,</span> err <span class="token operator">:=</span> <span class="token function">podPassesFiltersOnNode</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> pr<span class="token punctuation">,</span> nominator<span class="token punctuation">,</span> state<span class="token punctuation">,</span> pod<span class="token punctuation">,</span> nodeInfo<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">!</span>fits <span class="token punctuation">{</span>        <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>            klog<span class="token punctuation">.</span><span class="token function">Warningf</span><span class="token punctuation">(</span><span class="token string">"Encountered error while selecting victims on node %v: %v"</span><span class="token punctuation">,</span> nodeInfo<span class="token punctuation">.</span><span class="token function">Node</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>Name<span class="token punctuation">,</span> err<span class="token punctuation">)</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token boolean">false</span>    <span class="token punctuation">}</span>    <span class="token keyword">var</span> victims <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">*</span>v1<span class="token punctuation">.</span>Pod    numViolatingVictim <span class="token operator">:=</span> <span class="token number">0</span>    sort<span class="token punctuation">.</span><span class="token function">Slice</span><span class="token punctuation">(</span>potentialVictims<span class="token punctuation">,</span> <span class="token keyword">func</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> j <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token builtin">bool</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> util<span class="token punctuation">.</span><span class="token function">MoreImportantPod</span><span class="token punctuation">(</span>potentialVictims<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> potentialVictims<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// 尝试尽量多地“删除”这些 pods，先从 PDB violating victims 中“删除”，再从 PDB non-violating victims 中“删除”</span>    violatingVictims<span class="token punctuation">,</span> nonViolatingVictims <span class="token operator">:=</span> <span class="token function">filterPodsWithPDBViolation</span><span class="token punctuation">(</span>potentialVictims<span class="token punctuation">,</span> pdbs<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// reprievePod 是“删除” pods 的函数</span>    reprievePod <span class="token operator">:=</span> <span class="token keyword">func</span><span class="token punctuation">(</span>p <span class="token operator">*</span>v1<span class="token punctuation">.</span>Pod<span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token builtin">bool</span><span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> err <span class="token operator">:=</span> <span class="token function">addPod</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">,</span> err        <span class="token punctuation">}</span>         <span class="token comment" spellcheck="true">// 同样也会调用 podPassesFiltersOnNode 再次执行 predicates 算法</span>        fits<span class="token punctuation">,</span> <span class="token boolean">_</span><span class="token punctuation">,</span> <span class="token boolean">_</span> <span class="token operator">:=</span> <span class="token function">podPassesFiltersOnNode</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> pr<span class="token punctuation">,</span> nominator<span class="token punctuation">,</span> state<span class="token punctuation">,</span> pod<span class="token punctuation">,</span> nodeInfo<span class="token punctuation">)</span>        <span class="token keyword">if</span> <span class="token operator">!</span>fits <span class="token punctuation">{</span>            <span class="token keyword">if</span> err <span class="token operator">:=</span> <span class="token function">removePod</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">,</span> err            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">// 加入到 victims 中</span>            victims <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>victims<span class="token punctuation">,</span> p<span class="token punctuation">)</span>            klog<span class="token punctuation">.</span><span class="token function">V</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Infof</span><span class="token punctuation">(</span><span class="token string">"Pod %v/%v is a potential preemption victim on node %v."</span><span class="token punctuation">,</span> p<span class="token punctuation">.</span>Namespace<span class="token punctuation">,</span> p<span class="token punctuation">.</span>Name<span class="token punctuation">,</span> nodeInfo<span class="token punctuation">.</span><span class="token function">Node</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>Name<span class="token punctuation">)</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> fits<span class="token punctuation">,</span> <span class="token boolean">nil</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 删除 violatingVictims 中的 pod，同时也记录删除了多少个</span>    <span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> p <span class="token operator">:=</span> <span class="token keyword">range</span> violatingVictims <span class="token punctuation">{</span>        <span class="token keyword">if</span> fits<span class="token punctuation">,</span> err <span class="token operator">:=</span> <span class="token function">reprievePod</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>            klog<span class="token punctuation">.</span><span class="token function">Warningf</span><span class="token punctuation">(</span><span class="token string">"Failed to reprieve pod %q: %v"</span><span class="token punctuation">,</span> p<span class="token punctuation">.</span>Name<span class="token punctuation">,</span> err<span class="token punctuation">)</span>            <span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token boolean">false</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token operator">!</span>fits <span class="token punctuation">{</span>            numViolatingVictim<span class="token operator">++</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// Now we try to reprieve non-violating victims.</span>    <span class="token comment" spellcheck="true">// 删除 nonViolatingVictims 中的 pod</span>    <span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> p <span class="token operator">:=</span> <span class="token keyword">range</span> nonViolatingVictims <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token boolean">_</span><span class="token punctuation">,</span> err <span class="token operator">:=</span> <span class="token function">reprievePod</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>            klog<span class="token punctuation">.</span><span class="token function">Warningf</span><span class="token punctuation">(</span><span class="token string">"Failed to reprieve pod %q: %v"</span><span class="token punctuation">,</span> p<span class="token punctuation">.</span>Name<span class="token punctuation">,</span> err<span class="token punctuation">)</span>            <span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token boolean">false</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> victims<span class="token punctuation">,</span> numViolatingVictim<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">}</span></code></pre><p><code>pickOneNodeForPreemption()</code> 用来选出最佳的 node 作为抢占者的 node，该函数主要基于 6 个原则：</p><ul><li>PDB violations 值最小的 node</li><li>挑选具有高优先级较少的 node</li><li>对每个 node 上所有 victims 的优先级进项累加，选取最小的</li><li>如果多个 node 优先级总和相等，选择具有最小 victims 数量的 node</li><li>如果多个 node 优先级总和相等，选择具有高优先级且 pod 运行时间最短的</li><li>如果依据以上策略仍然选出了多个 node 则直接返回第一个 node</li></ul><p>代码路径：<code>pkg/scheduler/core/generic_scheduler.go:722</code></p><pre class=" language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">pickOneNodeForPreemption</span><span class="token punctuation">(</span>nodesToVictims <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token operator">*</span>extenderv1<span class="token punctuation">.</span>Victims<span class="token punctuation">)</span> <span class="token builtin">string</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token function">len</span><span class="token punctuation">(</span>nodesToVictims<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">""</span>    <span class="token punctuation">}</span>    minNumPDBViolatingPods <span class="token operator">:=</span> <span class="token function">int64</span><span class="token punctuation">(</span>math<span class="token punctuation">.</span>MaxInt32<span class="token punctuation">)</span>    <span class="token keyword">var</span> minNodes1 <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span>    lenNodes1 <span class="token operator">:=</span> <span class="token number">0</span>    <span class="token keyword">for</span> node<span class="token punctuation">,</span> victims <span class="token operator">:=</span> <span class="token keyword">range</span> nodesToVictims <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 若该 node 没有 victims 则返回</span>        <span class="token keyword">if</span> <span class="token function">len</span><span class="token punctuation">(</span>victims<span class="token punctuation">.</span>Pods<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// We found a node that doesn't need any preemption. Return it!</span>            <span class="token comment" spellcheck="true">// This should happen rarely when one or more pods are terminated between</span>            <span class="token comment" spellcheck="true">// the time that scheduler tries to schedule the pod and the time that</span>            <span class="token comment" spellcheck="true">// preemption logic tries to find nodes for preemption.</span>            <span class="token keyword">return</span> node        <span class="token punctuation">}</span>        numPDBViolatingPods <span class="token operator">:=</span> victims<span class="token punctuation">.</span>NumPDBViolations        <span class="token keyword">if</span> numPDBViolatingPods <span class="token operator">&lt;</span> minNumPDBViolatingPods <span class="token punctuation">{</span>            minNumPDBViolatingPods <span class="token operator">=</span> numPDBViolatingPods            minNodes1 <span class="token operator">=</span> <span class="token boolean">nil</span>            lenNodes1 <span class="token operator">=</span> <span class="token number">0</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> numPDBViolatingPods <span class="token operator">==</span> minNumPDBViolatingPods <span class="token punctuation">{</span>            minNodes1 <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>minNodes1<span class="token punctuation">,</span> node<span class="token punctuation">)</span>            lenNodes1<span class="token operator">++</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> lenNodes1 <span class="token operator">==</span> <span class="token number">1</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> minNodes1<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// There are more than one node with minimum number PDB violating pods. Find</span>    <span class="token comment" spellcheck="true">// the one with minimum highest priority victim.</span>    <span class="token comment" spellcheck="true">// 选出 PDB violating pods 数量最少的或者高优先级 victim 数量少的</span>    minHighestPriority <span class="token operator">:=</span> <span class="token function">int32</span><span class="token punctuation">(</span>math<span class="token punctuation">.</span>MaxInt32<span class="token punctuation">)</span>    <span class="token keyword">var</span> minNodes2 <span class="token operator">=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">,</span> lenNodes1<span class="token punctuation">)</span>    lenNodes2 <span class="token operator">:=</span> <span class="token number">0</span>    <span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> lenNodes1<span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">{</span>        node <span class="token operator">:=</span> minNodes1<span class="token punctuation">[</span>i<span class="token punctuation">]</span>        victims <span class="token operator">:=</span> nodesToVictims<span class="token punctuation">[</span>node<span class="token punctuation">]</span>        <span class="token comment" spellcheck="true">// highestPodPriority is the highest priority among the victims on this node.</span>        highestPodPriority <span class="token operator">:=</span> podutil<span class="token punctuation">.</span><span class="token function">GetPodPriority</span><span class="token punctuation">(</span>victims<span class="token punctuation">.</span>Pods<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> highestPodPriority <span class="token operator">&lt;</span> minHighestPriority <span class="token punctuation">{</span>            minHighestPriority <span class="token operator">=</span> highestPodPriority            lenNodes2 <span class="token operator">=</span> <span class="token number">0</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> highestPodPriority <span class="token operator">==</span> minHighestPriority <span class="token punctuation">{</span>            minNodes2<span class="token punctuation">[</span>lenNodes2<span class="token punctuation">]</span> <span class="token operator">=</span> node            lenNodes2<span class="token operator">++</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> lenNodes2 <span class="token operator">==</span> <span class="token number">1</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> minNodes2<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// There are a few nodes with minimum highest priority victim. Find the</span>    <span class="token comment" spellcheck="true">// smallest sum of priorities.</span>    <span class="token comment" spellcheck="true">// 若多个 node 高优先级的 pod 同样少，则选出加权得分最小的</span>    minSumPriorities <span class="token operator">:=</span> <span class="token function">int64</span><span class="token punctuation">(</span>math<span class="token punctuation">.</span>MaxInt64<span class="token punctuation">)</span>    lenNodes1 <span class="token operator">=</span> <span class="token number">0</span>    <span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> lenNodes2<span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">{</span>        <span class="token keyword">var</span> sumPriorities <span class="token builtin">int64</span>        node <span class="token operator">:=</span> minNodes2<span class="token punctuation">[</span>i<span class="token punctuation">]</span>        <span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> pod <span class="token operator">:=</span> <span class="token keyword">range</span> nodesToVictims<span class="token punctuation">[</span>node<span class="token punctuation">]</span><span class="token punctuation">.</span>Pods <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// We add MaxInt32+1 to all priorities to make all of them >= 0. This is</span>            <span class="token comment" spellcheck="true">// needed so that a node with a few pods with negative priority is not</span>            <span class="token comment" spellcheck="true">// picked over a node with a smaller number of pods with the same negative</span>            <span class="token comment" spellcheck="true">// priority (and similar scenarios).</span>            sumPriorities <span class="token operator">+=</span> <span class="token function">int64</span><span class="token punctuation">(</span>podutil<span class="token punctuation">.</span><span class="token function">GetPodPriority</span><span class="token punctuation">(</span>pod<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token function">int64</span><span class="token punctuation">(</span>math<span class="token punctuation">.</span>MaxInt32<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> sumPriorities <span class="token operator">&lt;</span> minSumPriorities <span class="token punctuation">{</span>            minSumPriorities <span class="token operator">=</span> sumPriorities            lenNodes1 <span class="token operator">=</span> <span class="token number">0</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> sumPriorities <span class="token operator">==</span> minSumPriorities <span class="token punctuation">{</span>            minNodes1<span class="token punctuation">[</span>lenNodes1<span class="token punctuation">]</span> <span class="token operator">=</span> node            lenNodes1<span class="token operator">++</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> lenNodes1 <span class="token operator">==</span> <span class="token number">1</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> minNodes1<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// There are a few nodes with minimum highest priority victim and sum of priorities.</span>    <span class="token comment" spellcheck="true">// Find one with the minimum number of pods.</span>    <span class="token comment" spellcheck="true">// 若多个 node 高优先级的 pod 数量同等且加权分数相等，则选出 pod 数量最少的</span>    minNumPods <span class="token operator">:=</span> math<span class="token punctuation">.</span>MaxInt32    lenNodes2 <span class="token operator">=</span> <span class="token number">0</span>    <span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> lenNodes1<span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">{</span>        node <span class="token operator">:=</span> minNodes1<span class="token punctuation">[</span>i<span class="token punctuation">]</span>        numPods <span class="token operator">:=</span> <span class="token function">len</span><span class="token punctuation">(</span>nodesToVictims<span class="token punctuation">[</span>node<span class="token punctuation">]</span><span class="token punctuation">.</span>Pods<span class="token punctuation">)</span>        <span class="token keyword">if</span> numPods <span class="token operator">&lt;</span> minNumPods <span class="token punctuation">{</span>            minNumPods <span class="token operator">=</span> numPods            lenNodes2 <span class="token operator">=</span> <span class="token number">0</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> numPods <span class="token operator">==</span> minNumPods <span class="token punctuation">{</span>            minNodes2<span class="token punctuation">[</span>lenNodes2<span class="token punctuation">]</span> <span class="token operator">=</span> node            lenNodes2<span class="token operator">++</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> lenNodes2 <span class="token operator">==</span> <span class="token number">1</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> minNodes2<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// There are a few nodes with same number of pods.</span>    <span class="token comment" spellcheck="true">// Find the node that satisfies latest(earliestStartTime(all highest-priority pods on node))</span>    <span class="token comment" spellcheck="true">// 若多个 node 的 pod 数量相等，则选出高优先级 pod 启动时间最短的</span>    latestStartTime <span class="token operator">:=</span> util<span class="token punctuation">.</span><span class="token function">GetEarliestPodStartTime</span><span class="token punctuation">(</span>nodesToVictims<span class="token punctuation">[</span>minNodes2<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> latestStartTime <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// If the earliest start time of all pods on the 1st node is nil, just return it,</span>        <span class="token comment" spellcheck="true">// which is not expected to happen.</span>        klog<span class="token punctuation">.</span><span class="token function">Errorf</span><span class="token punctuation">(</span><span class="token string">"earliestStartTime is nil for node %s. Should not reach here."</span><span class="token punctuation">,</span> minNodes2<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> minNodes2<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>    <span class="token punctuation">}</span>    nodeToReturn <span class="token operator">:=</span> minNodes2<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>    <span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> lenNodes2<span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">{</span>        node <span class="token operator">:=</span> minNodes2<span class="token punctuation">[</span>i<span class="token punctuation">]</span>        <span class="token comment" spellcheck="true">// Get earliest start time of all pods on the current node.</span>        earliestStartTimeOnNode <span class="token operator">:=</span> util<span class="token punctuation">.</span><span class="token function">GetEarliestPodStartTime</span><span class="token punctuation">(</span>nodesToVictims<span class="token punctuation">[</span>node<span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> earliestStartTimeOnNode <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>            klog<span class="token punctuation">.</span><span class="token function">Errorf</span><span class="token punctuation">(</span><span class="token string">"earliestStartTime is nil for node %s. Should not reach here."</span><span class="token punctuation">,</span> node<span class="token punctuation">)</span>            <span class="token keyword">continue</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> earliestStartTimeOnNode<span class="token punctuation">.</span><span class="token function">After</span><span class="token punctuation">(</span>latestStartTime<span class="token punctuation">.</span>Time<span class="token punctuation">)</span> <span class="token punctuation">{</span>            latestStartTime <span class="token operator">=</span> earliestStartTimeOnNode            nodeToReturn <span class="token operator">=</span> node        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> nodeToReturn<span class="token punctuation">}</span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Kubernetes </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Kubernetes </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>深入理解 Kubernetes 之 API server</title>
      <link href="/2020/05/27/k8s03/"/>
      <url>/2020/05/27/k8s03/</url>
      
        <content type="html"><![CDATA[<h1 id="API-server"><a href="#API-server" class="headerlink" title="API server"></a>API server</h1><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>Kubernetes API server 为 api 对象验证并配置数据，包括 pods、 services、 replicationcontrollers 和其它 api 对象。API Server 提供 REST 操作和到集群共享状态的前端，所有其他组件通过它进行交互，是整个系统的数据总线和数据中心。</p><p><img src="/images/2020/communication_paths.png" alt=""></p><p>Kubernetes 中的其它组件都不会和 etcd 进行交互，只有 API Server 可以和 etcd 进行交互,api-server 具有如下功能：</p><ul><li>整个集群管理的API接口：所有对集群进行的查询和管理都是通过API 进行</li><li>集群内部各个模块之间通信的枢纽：所有模块之间并不会互相调用，而是通过和 API Serve r打交道完成这部分的工作</li><li>集群的安全控制:API Server 提供的验证和授权保证了整个集群的安全</li></ul><h2 id="API-server-工作原理"><a href="#API-server-工作原理" class="headerlink" title="API server 工作原理"></a>API server 工作原理</h2><p><img src="/images/2020/API_server.jpg" alt=""></p><h3 id="声明式-API-设计"><a href="#声明式-API-设计" class="headerlink" title="声明式 API 设计"></a>声明式 API 设计</h3><p><strong>描述资源版本信息</strong></p><pre><code>/api/{version}/{resource}/{action}</code></pre><p>上面是一个基础的 web url 通常我们都会为每个版本注册一个对应的 URL, 其中会包含很关键的两个信息即 version与 resource ,通过这两个信息,通常我们就可以知道这可能是某个资源的那个版本, 如果我们把后面的 action 也包裹进来,我们通常就可以知道对应的资源的那个具体操作</p><p><strong>Group组信息</strong></p><p><img src="/images/2020/gvk.png" alt=""></p><p>我们通过 url 里面获取到资源的 GroupVersionKind 信息，如何将其映射为一个具体的类型呢？结合反射和map来做就可以了，我们通过url获取到对应想的GVK信息，然后在通过我们的映射表，就知道对应的模型是哪个，接下来就只需要进行转换就行了</p><p><img src="/images/2020/parse_gvk.png" alt=""></p><h4 id="RESTMapper"><a href="#RESTMapper" class="headerlink" title="RESTMapper"></a>RESTMapper</h4><p>RESTMapper是一个interface，定义在<a href="https://github.com/kubernetes/kubernetes/blob/9e991415386e4cf155a24b1da15becaa390438d8/staging/src/k8s.io/apimachinery/pkg/api/meta/interfaces.go#L113" target="_blank" rel="noopener">kubernetes/staging/src/k8s.io/apimachinery/pkg/api/meta/interfaces.go </a>中:</p><pre class=" language-go"><code class="language-go"><span class="token keyword">type</span> RESTMapper <span class="token keyword">interface</span> <span class="token punctuation">{</span>    <span class="token function">KindFor</span><span class="token punctuation">(</span>resource schema<span class="token punctuation">.</span>GroupVersionResource<span class="token punctuation">)</span> <span class="token punctuation">(</span>schema<span class="token punctuation">.</span>GroupVersionKind<span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span>    <span class="token function">KindsFor</span><span class="token punctuation">(</span>resource schema<span class="token punctuation">.</span>GroupVersionResource<span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span>schema<span class="token punctuation">.</span>GroupVersionKind<span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span>    <span class="token function">ResourceFor</span><span class="token punctuation">(</span>input schema<span class="token punctuation">.</span>GroupVersionResource<span class="token punctuation">)</span> <span class="token punctuation">(</span>schema<span class="token punctuation">.</span>GroupVersionResource<span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span>    <span class="token function">ResourcesFor</span><span class="token punctuation">(</span>input schema<span class="token punctuation">.</span>GroupVersionResource<span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span>schema<span class="token punctuation">.</span>GroupVersionResource<span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span>    <span class="token function">RESTMapping</span><span class="token punctuation">(</span>gk schema<span class="token punctuation">.</span>GroupKind<span class="token punctuation">,</span> versions <span class="token operator">...</span><span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token operator">*</span>RESTMapping<span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span>    <span class="token function">RESTMappings</span><span class="token punctuation">(</span>gk schema<span class="token punctuation">.</span>GroupKind<span class="token punctuation">,</span> versions <span class="token operator">...</span><span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">*</span>RESTMapping<span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span>    <span class="token function">ResourceSingularizer</span><span class="token punctuation">(</span>resource <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>singular <span class="token builtin">string</span><span class="token punctuation">,</span> err <span class="token builtin">error</span><span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><p>RESTMapper 映射是指 GVR(GroupVersionResource) 和 GVK(GroupVersionKind) 的关系，可以通过 GVR 找到合适的 GVK，并可以通过GVK 生成一个 RESTMapping。</p><h4 id="RESTMapping"><a href="#RESTMapping" class="headerlink" title="RESTMapping"></a>RESTMapping</h4><p>与 RESTMapper 定义在同一个文件中</p><pre class=" language-go"><code class="language-go"><span class="token keyword">type</span> RESTMapping <span class="token keyword">struct</span> <span class="token punctuation">{</span>    Resource schema<span class="token punctuation">.</span>GroupVersionResource    GroupVersionKind schema<span class="token punctuation">.</span>GroupVersionKind    Scope RESTScope<span class="token punctuation">}</span></code></pre><p>RESTMapping 包含 Resource 名称，及其对应的 GVK，还有一个Scope(标明资源是否为root或者namespaced)，</p><h4 id="RESTScope"><a href="#RESTScope" class="headerlink" title="RESTScope"></a>RESTScope</h4><p>与 RESTMapper 定义在同一个文件中</p><pre class=" language-go"><code class="language-go"><span class="token keyword">type</span> RESTScope <span class="token keyword">interface</span> <span class="token punctuation">{</span>    <span class="token function">Name</span><span class="token punctuation">(</span><span class="token punctuation">)</span> RESTScopeName<span class="token punctuation">}</span></code></pre><p>表明作用域可以是基于 namespace 的，也可以是基于集群的。 如果是基于 namespace 的。则API格式为：<code>/apis/{group}/v1/namespaces/{namespace}/{spec.names.plural}/…</code> 如果是基于 cluster 的。则API格式为：<code>/apis/{group}/v1/{spec.names.plural}/…</code> 上文创建的 CRD 的 API 则为：<code>/apis/xxx.com/v1/namespaces/{namespace}/tasks</code></p><h4 id="DefaultRESTMapper"><a href="#DefaultRESTMapper" class="headerlink" title="DefaultRESTMapper"></a>DefaultRESTMapper</h4><p>代码路径：<a href="https://github.com/kubernetes/kubernetes/blob/9e991415386e4cf155a24b1da15becaa390438d8/staging/src/k8s.io/apimachinery/pkg/api/meta/restmapper.go#L57" target="_blank" rel="noopener">kubernetes/staging/src/k8s.io/apimachinery/pkg/api/meta/restmapper.go </a></p><p>DefaultRESTMapper 实现了 RESTMapper interface。</p><pre class=" language-go"><code class="language-go"><span class="token comment" spellcheck="true">// DefaultRESTMapper 中的 resource 是指 GVR，kind 是指 GVK</span><span class="token comment" spellcheck="true">// singular和 Plural 都是 GVR</span><span class="token keyword">type</span> DefaultRESTMapper <span class="token keyword">struct</span> <span class="token punctuation">{</span>    defaultGroupVersions <span class="token punctuation">[</span><span class="token punctuation">]</span>schema<span class="token punctuation">.</span>GroupVersion    resourceToKind       <span class="token keyword">map</span><span class="token punctuation">[</span>schema<span class="token punctuation">.</span>GroupVersionResource<span class="token punctuation">]</span>schema<span class="token punctuation">.</span>GroupVersionKind    kindToPluralResource <span class="token keyword">map</span><span class="token punctuation">[</span>schema<span class="token punctuation">.</span>GroupVersionKind<span class="token punctuation">]</span>schema<span class="token punctuation">.</span>GroupVersionResource    kindToScope          <span class="token keyword">map</span><span class="token punctuation">[</span>schema<span class="token punctuation">.</span>GroupVersionKind<span class="token punctuation">]</span>RESTScope    singularToPlural     <span class="token keyword">map</span><span class="token punctuation">[</span>schema<span class="token punctuation">.</span>GroupVersionResource<span class="token punctuation">]</span>schema<span class="token punctuation">.</span>GroupVersionResource    pluralToSingular     <span class="token keyword">map</span><span class="token punctuation">[</span>schema<span class="token punctuation">.</span>GroupVersionResource<span class="token punctuation">]</span>schema<span class="token punctuation">.</span>GroupVersionResource<span class="token punctuation">}</span></code></pre><p>现在来详细分析DefaultRESTMapper的字段的涵义。</p><ul><li>defaultGroupVersions: 默认的GroupVersion，如v1，apps/v1beta1等，一般一个 DefaultRESTMapper只设一个默认的GroupVersion；</li><li>resourceToKind：GVR(单数,复数)到GVK的map；</li><li>kindToPluralResource：GVK到GVR(复数)的map；</li><li>kindToScope：GVK到Scope的map；</li><li>singularToPlural：GVR(单数)到GVR(复数)的map；</li><li>pluralToSingular:  GVR(单数)到GVR(复数)的map；</li></ul><p>RESTMapper 可以从 GVR 获取 GVK，并生成一个 RESTMapping 来处理该 GVR。RESTMapping 中有Resource名称，GVK，Scope等和GVR有关的信息</p><h4 id="Scheme"><a href="#Scheme" class="headerlink" title="Scheme"></a>Scheme</h4><p><img src="/images/2020/scheme.png" alt=""></p><p>如果说 RESTMapper 管理的是 GVR 和 GVK 的关系，那么 Scheme 管理的就是 GVK 和 Type 的关系。系统中所有的Type都要注册到Scheme中，当然目前系统只有一个Scheme，即api.Scheme，定义在<a href="https://github.com/kubernetes/kubernetes/blob/565566f4b2dae269bec108624fe28d3462d6ae2a/staging/src/k8s.io/client-go/kubernetes/scheme/register.go#L69" target="_blank" rel="noopener">kubernetes/staging/src/k8s.io/client-go/kubernetes/scheme/register.go </a>中：</p><pre class=" language-go"><code class="language-go"><span class="token keyword">var</span> Scheme <span class="token operator">=</span> runtime<span class="token punctuation">.</span><span class="token function">NewScheme</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p>Scheme 定义在<a href="https://github.com/kubernetes/kubernetes/blob/565566f4b2dae269bec108624fe28d3462d6ae2a/staging/src/k8s.io/apimachinery/pkg/runtime/scheme.go#L47" target="_blank" rel="noopener">kubernetes/staging/src/k8s.io/apimachinery/pkg/runtime/scheme.go </a></p><pre class=" language-go"><code class="language-go"><span class="token keyword">type</span> Scheme <span class="token keyword">struct</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// versionMap allows one to figure out the go type of an object with</span>    <span class="token comment" spellcheck="true">// the given version and name.</span>    gvkToType <span class="token keyword">map</span><span class="token punctuation">[</span>schema<span class="token punctuation">.</span>GroupVersionKind<span class="token punctuation">]</span>reflect<span class="token punctuation">.</span>Type    <span class="token comment" spellcheck="true">// typeToGroupVersion allows one to find metadata for a given go object.</span>    <span class="token comment" spellcheck="true">// The reflect.Type we index by should *not* be a pointer.</span>    typeToGVK <span class="token keyword">map</span><span class="token punctuation">[</span>reflect<span class="token punctuation">.</span>Type<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span>schema<span class="token punctuation">.</span>GroupVersionKind    <span class="token comment" spellcheck="true">// unversionedTypes are transformed without conversion in ConvertToVersion.</span>    unversionedTypes <span class="token keyword">map</span><span class="token punctuation">[</span>reflect<span class="token punctuation">.</span>Type<span class="token punctuation">]</span>schema<span class="token punctuation">.</span>GroupVersionKind    <span class="token comment" spellcheck="true">// unversionedKinds are the names of kinds that can be created in the context of any group</span>    <span class="token comment" spellcheck="true">// or version</span>    <span class="token comment" spellcheck="true">// TODO: resolve the status of unversioned types.</span>    unversionedKinds <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span>reflect<span class="token punctuation">.</span>Type    <span class="token comment" spellcheck="true">// Map from version and resource to the corresponding func to convert</span>    <span class="token comment" spellcheck="true">// resource field labels in that version to internal version.</span>    fieldLabelConversionFuncs <span class="token keyword">map</span><span class="token punctuation">[</span>schema<span class="token punctuation">.</span>GroupVersionKind<span class="token punctuation">]</span>FieldLabelConversionFunc    <span class="token comment" spellcheck="true">// defaulterFuncs is an array of interfaces to be called with an object to provide defaulting</span>    <span class="token comment" spellcheck="true">// the provided object must be a pointer.</span>    defaulterFuncs <span class="token keyword">map</span><span class="token punctuation">[</span>reflect<span class="token punctuation">.</span>Type<span class="token punctuation">]</span><span class="token keyword">func</span><span class="token punctuation">(</span><span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// converter stores all registered conversion functions. It also has</span>    <span class="token comment" spellcheck="true">// default converting behavior.</span>    converter <span class="token operator">*</span>conversion<span class="token punctuation">.</span>Converter    <span class="token comment" spellcheck="true">// versionPriority is a map of groups to ordered lists of versions for those groups indicating the</span>    <span class="token comment" spellcheck="true">// default priorities of these versions as registered in the scheme</span>    versionPriority <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span>    <span class="token comment" spellcheck="true">// observedVersions keeps track of the order we've seen versions during type registration</span>    observedVersions <span class="token punctuation">[</span><span class="token punctuation">]</span>schema<span class="token punctuation">.</span>GroupVersion    <span class="token comment" spellcheck="true">// schemeName is the name of this scheme.  If you don't specify a name, the stack of the NewScheme caller will be used.</span>    <span class="token comment" spellcheck="true">// This is useful for error reporting to indicate the origin of the scheme.</span>    schemeName <span class="token builtin">string</span><span class="token punctuation">}</span></code></pre><p>可以看出，Scheme除了管理 GVK 和 Type 的关系，还管理有默认设置函数，并聚合了converter及cloner。我们来详细看下每个字段的含义：</p><ul><li>gvkToType: 存储 gvk 和 Type 的关系，一个 gvk 只能对应一个 Type；</li><li>typeToGVK：存储 Type 和 gvk 的关系，一个 type 可能对应多个 GVK；</li><li>unversionedTypes：记录 unversioned 的 Type 和 GVK 的关系，unversioned 无需版本转换；</li><li>unversionedKinds：记录 unversioned 的 GVK 和 Type 的关系；</li><li>fieldLabelConversionFuncs：管理 field selector 的转换，如旧版本v1的 spec.host 需要转换成spec.nodeName (详见在<a href="https://github.com/kubernetes/kubernetes/blob/f221dbb91bde0d447226a7f15b7c4301ddd161c6/pkg/apis/core/v1/conversion.go#L33" target="_blank" rel="noopener">kubernetes/pkg/apis/core/v1/conversion.go</a>中的addConversionFuncs()函数)；</li></ul><pre class=" language-go"><code class="language-go">    <span class="token keyword">func</span><span class="token punctuation">(</span>label<span class="token punctuation">,</span> value <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token builtin">string</span><span class="token punctuation">,</span> <span class="token builtin">string</span><span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">switch</span> label <span class="token punctuation">{</span>            <span class="token keyword">case</span> <span class="token string">"metadata.name"</span><span class="token punctuation">,</span>                <span class="token string">"metadata.namespace"</span><span class="token punctuation">,</span>                <span class="token string">"spec.nodeName"</span><span class="token punctuation">,</span>                <span class="token string">"spec.restartPolicy"</span><span class="token punctuation">,</span>                <span class="token string">"spec.schedulerName"</span><span class="token punctuation">,</span>                <span class="token string">"spec.serviceAccountName"</span><span class="token punctuation">,</span>                <span class="token string">"status.phase"</span><span class="token punctuation">,</span>                <span class="token string">"status.podIP"</span><span class="token punctuation">,</span>                <span class="token string">"status.podIPs"</span><span class="token punctuation">,</span>                <span class="token string">"status.nominatedNodeName"</span><span class="token punctuation">:</span>                <span class="token keyword">return</span> label<span class="token punctuation">,</span> value<span class="token punctuation">,</span> <span class="token boolean">nil</span>            <span class="token keyword">case</span> <span class="token string">"spec.host"</span><span class="token punctuation">:</span>                <span class="token keyword">return</span> <span class="token string">"spec.nodeName"</span><span class="token punctuation">,</span> value<span class="token punctuation">,</span> <span class="token boolean">nil</span>            <span class="token keyword">default</span><span class="token punctuation">:</span>                <span class="token keyword">return</span> <span class="token string">""</span><span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">,</span> fmt<span class="token punctuation">.</span><span class="token function">Errorf</span><span class="token punctuation">(</span><span class="token string">"field label not supported: %s"</span><span class="token punctuation">,</span> label<span class="token punctuation">)</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span></code></pre><ul><li><p>defaulterFuncs：存储 Type及其对应的默认值设置函数；</p></li><li><p>converter：用来转换不同版本的结构体值；</p></li></ul><p>Kubernetes内部组件的流通的结构体值使用的是内部版本，所有的外部版本都要向内部版本进行转换；内部版本必须转换成外部版本才能进行输出。外部版本之间不能直接转换。从 Scheme 的定义可以看出，Scheme 也是 converter。</p><h4 id="Converter"><a href="#Converter" class="headerlink" title="Converter"></a>Converter</h4><p>Converter可以完成不同结构体之间的转换。在Kubernetes中，Converter用来把一个版本的object转换成其他版本的object，转换函数需要通过注册的方式添加到Converter中。</p><p><img src="/images/2020/covert.png" alt=""></p><p>先来看下Converter的定义，Converter定义在<a href="https://github.com/kubernetes/kubernetes/blob/775feed217bf48035cb66bb7214a6c66385c73f7/staging/src/k8s.io/apimachinery/pkg/conversion/converter.go#L50" target="_blank" rel="noopener">kubernetes/staging/src/k8s.io/apimachinery/pkg/conversion/converter.go</a>中：</p><pre class=" language-go"><code class="language-go"><span class="token keyword">type</span> Converter <span class="token keyword">struct</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// Map from the conversion pair to a function which can</span>    <span class="token comment" spellcheck="true">// do the conversion.</span>    conversionFuncs          ConversionFuncs    generatedConversionFuncs ConversionFuncs    <span class="token comment" spellcheck="true">// Set of conversions that should be treated as a no-op</span>    ignoredConversions        <span class="token keyword">map</span><span class="token punctuation">[</span>typePair<span class="token punctuation">]</span><span class="token keyword">struct</span><span class="token punctuation">{</span><span class="token punctuation">}</span>    ignoredUntypedConversions <span class="token keyword">map</span><span class="token punctuation">[</span>typePair<span class="token punctuation">]</span><span class="token keyword">struct</span><span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// This is a map from a source field type and name, to a list of destination</span>    <span class="token comment" spellcheck="true">// field type and name.</span>    structFieldDests <span class="token keyword">map</span><span class="token punctuation">[</span>typeNamePair<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span>typeNamePair    <span class="token comment" spellcheck="true">// Allows for the opposite lookup of structFieldDests. So that SourceFromDest</span>    <span class="token comment" spellcheck="true">// copy flag also works. So this is a map of destination field name, to potential</span>    <span class="token comment" spellcheck="true">// source field name and type to look for.</span>    structFieldSources <span class="token keyword">map</span><span class="token punctuation">[</span>typeNamePair<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span>typeNamePair    <span class="token comment" spellcheck="true">// Map from an input type to a function which can apply a key name mapping</span>    inputFieldMappingFuncs <span class="token keyword">map</span><span class="token punctuation">[</span>reflect<span class="token punctuation">.</span>Type<span class="token punctuation">]</span>FieldMappingFunc    <span class="token comment" spellcheck="true">// Map from an input type to a set of default conversion flags.</span>    inputDefaultFlags <span class="token keyword">map</span><span class="token punctuation">[</span>reflect<span class="token punctuation">.</span>Type<span class="token punctuation">]</span>FieldMatchingFlags    <span class="token comment" spellcheck="true">// If non-nil, will be called to print helpful debugging info. Quite verbose.</span>    Debug DebugLogger    <span class="token comment" spellcheck="true">// nameFunc is called to retrieve the name of a type; this name is used for the</span>    <span class="token comment" spellcheck="true">// purpose of deciding whether two types match or not (i.e., will we attempt to</span>    <span class="token comment" spellcheck="true">// do a conversion). The default returns the go type name.</span>    nameFunc <span class="token keyword">func</span><span class="token punctuation">(</span>t reflect<span class="token punctuation">.</span>Type<span class="token punctuation">)</span> <span class="token builtin">string</span><span class="token punctuation">}</span></code></pre><p>Converter结构体的字段涵义如下：</p><ul><li>conversionFuncs: 普通转换函数，通过 RegisterConversionFunc() 方法进行注册；</li><li>generatedConversionFuncs: 自动生成的转换函数，通过 RegisterGeneratedConversionFunc() 方法进行注册；</li><li>genericConversions：通用转换函数，优化级最高的转换函数，可以理解为转换的快速通道，通过AddGenericConversionFunc()方法进行注册；</li><li>ignoredConversions：需要忽略的转换，如果两个结构体之间不允许转换，则通过RegisterIgnoredConversion()方法进行注册；</li><li>structFieldDests：源结构体中字段到目标结构体中的字段的映射关系，通过SetStructFieldCopy()方法进行注册；</li><li>structFieldSources：与 structFieldDests 相反，是目的结构体中字段到源结构体中的字段的映射关系，通过SetStructFieldCopy() 方法进行注册；</li><li>defaultingFuncs：设置结构体值的默认值，通过RegisterDefaultingFunc()方法进行注册；</li><li>inputFieldMappingFuncs：</li><li>inputDefaultFlags：</li><li>nameFunc：获取结构体名称的函数。</li></ul><p>Converter的生成方法如下，只要传入NameFunc 即可：</p><pre class=" language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">NewConverter</span><span class="token punctuation">(</span>nameFn NameFunc<span class="token punctuation">)</span> <span class="token operator">*</span>Converter <span class="token punctuation">{</span>    c <span class="token operator">:=</span> <span class="token operator">&amp;</span>Converter<span class="token punctuation">{</span>        conversionFuncs<span class="token punctuation">:</span>           <span class="token function">NewConversionFuncs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        generatedConversionFuncs<span class="token punctuation">:</span>  <span class="token function">NewConversionFuncs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        ignoredConversions<span class="token punctuation">:</span>        <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">map</span><span class="token punctuation">[</span>typePair<span class="token punctuation">]</span><span class="token keyword">struct</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        ignoredUntypedConversions<span class="token punctuation">:</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">map</span><span class="token punctuation">[</span>typePair<span class="token punctuation">]</span><span class="token keyword">struct</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        nameFunc<span class="token punctuation">:</span>                  nameFn<span class="token punctuation">,</span>        structFieldDests<span class="token punctuation">:</span>          <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">map</span><span class="token punctuation">[</span>typeNamePair<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span>typeNamePair<span class="token punctuation">)</span><span class="token punctuation">,</span>        structFieldSources<span class="token punctuation">:</span>        <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">map</span><span class="token punctuation">[</span>typeNamePair<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span>typeNamePair<span class="token punctuation">)</span><span class="token punctuation">,</span>        inputFieldMappingFuncs<span class="token punctuation">:</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">map</span><span class="token punctuation">[</span>reflect<span class="token punctuation">.</span>Type<span class="token punctuation">]</span>FieldMappingFunc<span class="token punctuation">)</span><span class="token punctuation">,</span>        inputDefaultFlags<span class="token punctuation">:</span>      <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">map</span><span class="token punctuation">[</span>reflect<span class="token punctuation">.</span>Type<span class="token punctuation">]</span>FieldMatchingFlags<span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token punctuation">}</span>    c<span class="token punctuation">.</span><span class="token function">RegisterUntypedConversionFunc</span><span class="token punctuation">(</span>        <span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token boolean">nil</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token boolean">nil</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token keyword">func</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b <span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> s Scope<span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token function">Convert_Slice_byte_To_Slice_byte</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span><span class="token punctuation">)</span><span class="token punctuation">,</span> b<span class="token punctuation">.</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span><span class="token punctuation">)</span><span class="token punctuation">,</span> s<span class="token punctuation">)</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">)</span>    <span class="token keyword">return</span> c<span class="token punctuation">}</span></code></pre><p>关于NameFunc，只要实现返回一个结构体的“名字”就行，如：</p><pre class=" language-go"><code class="language-go"><span class="token keyword">var</span> DefaultNameFunc <span class="token operator">=</span> <span class="token keyword">func</span><span class="token punctuation">(</span>t reflect<span class="token punctuation">.</span>Type<span class="token punctuation">)</span> <span class="token builtin">string</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> t<span class="token punctuation">.</span><span class="token function">Name</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">}</span></code></pre><h5 id="ConversionFuncs"><a href="#ConversionFuncs" class="headerlink" title="ConversionFuncs"></a>ConversionFuncs</h5><p>在Converter的字段中，不管是 conversionFuncs，还是 generatedConversionFuncs，都是结构体ConversionFuncs。结构体 ConversionFuncs 用来管理转换函数</p><pre class=" language-go"><code class="language-go"><span class="token keyword">type</span> typePair <span class="token keyword">struct</span> <span class="token punctuation">{</span>    source reflect<span class="token punctuation">.</span>Type    dest   reflect<span class="token punctuation">.</span>Type<span class="token punctuation">}</span><span class="token keyword">type</span> ConversionFuncs <span class="token keyword">struct</span> <span class="token punctuation">{</span>    fns <span class="token keyword">map</span><span class="token punctuation">[</span>typePair<span class="token punctuation">]</span>reflect<span class="token punctuation">.</span>Value<span class="token punctuation">}</span></code></pre><p>在ConversionFuncs结构体中，只有一个字段<code>fns map[typePair]reflect.Value</code>，即{source, dest}到转换函数的映射表。</p><h5 id="Scope"><a href="#Scope" class="headerlink" title="Scope"></a>Scope</h5><p>Scope是一个interface，所以我们来分析其实现者scope。</p><p>scope包含了递归转换中需要的一些内容。</p><pre class=" language-go"><code class="language-go"><span class="token keyword">type</span> Scope <span class="token keyword">interface</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// Call Convert to convert sub-objects. Note that if you call it with your own exact</span>    <span class="token comment" spellcheck="true">// parameters, you'll run out of stack space before anything useful happens.</span>    <span class="token function">Convert</span><span class="token punctuation">(</span>src<span class="token punctuation">,</span> dest <span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> flags FieldMatchingFlags<span class="token punctuation">)</span> <span class="token builtin">error</span>    <span class="token comment" spellcheck="true">// SrcTags and DestTags contain the struct tags that src and dest had, respectively.</span>    <span class="token comment" spellcheck="true">// If the enclosing object was not a struct, then these will contain no tags, of course.</span>    <span class="token function">SrcTag</span><span class="token punctuation">(</span><span class="token punctuation">)</span> reflect<span class="token punctuation">.</span>StructTag    <span class="token function">DestTag</span><span class="token punctuation">(</span><span class="token punctuation">)</span> reflect<span class="token punctuation">.</span>StructTag    <span class="token comment" spellcheck="true">// Flags returns the flags with which the conversion was started.</span>    <span class="token function">Flags</span><span class="token punctuation">(</span><span class="token punctuation">)</span> FieldMatchingFlags    <span class="token comment" spellcheck="true">// Meta returns any information originally passed to Convert.</span>    <span class="token function">Meta</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span>Meta<span class="token punctuation">}</span></code></pre><p>来看scope的字段：</p><ul><li>converter：scope包含一个converter，以方便递归转换；</li><li>meta：元数据</li><li>flags：转换时字段的策略，定义如下，可以使用IsSet()方法判断对应的flag是否被设置。<br>其中：<br>DestFromSource表示循环目标结构体字段，寻找合适的源结构体字段；<br>SourceToDest表示循环源结构体字段，寻找合适的目标结构体字段；<br>IgnoreMissingFields表示如果未找到合适的目标不报错；<br>AllowDifferentFieldTypeNames表示允许源结构体和目标结构体不同的类型相匹配。</li></ul><ul><li>SrcTag, DestTag：字段信息</li></ul><p>convert() 的流程如下：</p><ol><li>获取源和目标的类型；</li><li>设置源的默认值；</li><li>判断是否在ignoredConversions中；</li><li>尝试从conversionFuncs中获取转换函数进行转换；</li><li>尝试从generatedConversionFuncs中获取转换函数进行转换；</li></ol><p>Converter先使用genericConversionFunc进行转换，如果不成功，再使用conversionFunc进行转换，如果不成功，再按 generatedConversionFunc 进行转换，如果不成功，最后交由DefaultConvert()转换。</p><p>DefaultConvert()中如果转换类型是简单类型，则直接转换；如果是结构体，则先看是否有字段关系定义，如果有，则按map定义的来，否则按同名转换原则进行转换；其他的类型也有相应的方法进行转换。</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p><img src="/images/2020/api.png" alt=""></p><h2 id="API-server-工作流程"><a href="#API-server-工作流程" class="headerlink" title="API server 工作流程"></a>API server 工作流程</h2><p><img src="/images/2020/api-server-arch.png" alt=""></p><h3 id="API-server-服务"><a href="#API-server-服务" class="headerlink" title="API server 服务"></a>API server 服务</h3><p><img src="/images/2020/api-server-serve.png" alt=""></p><p>整个程序的基本过程为：</p><ul><li>命令行参数解析，参数存储在ServerRunOptions</li><li>基于ServerRunOptions构建genericapiserver.Config</li><li>构建master.Config</li><li>构建apiextensionserver.Config，并创建API Extension Server</li><li>构建Master（API Server），把API Extension Server作为代理服务，这样它会融合API Extension Server的服务</li><li>构建Aggregator，把Master作为代理服务</li><li>启动http非安全服务</li><li>执行Aggregator的Run，启动Https安全服务</li></ul><h4 id="APIExtensionsServer"><a href="#APIExtensionsServer" class="headerlink" title="APIExtensionsServer"></a>APIExtensionsServer</h4><p><code>APIExtensionsServer</code>最先初始化，在调用链的末尾, 处理CR、CRD相关资源.</p><p>其中包含的 controller 以及功能如下所示：</p><ol><li>openapiController：将 crd 资源的变化同步至提供的 OpenAPI 文档，可通过访问 /openapi/v2 进行查看；</li><li>crdController：负责将 crd 信息注册到 apiVersions 和 apiResources 中，两者的信息可通过 <code>kubectl api-versions</code> 和  <code>kubectl api-resources</code> 查看；</li><li>namingController：检查 crd obj 中是否有命名冲突，可在 crd .status.conditions 中查看；</li><li>establishingController：检查 crd 是否处于正常状态，可在 crd .status.conditions 中查看；</li><li>nonStructuralSchemaController：检查 crd obj 结构是否正常，可在 crd .status.conditions 中查看；</li><li>apiApprovalController：检查 crd 是否遵循 kubernetes API 声明策略，可在 crd .status.conditions 中查看；</li><li>finalizingController：类似于 finalizes 的功能，与 CRs 的删除有关；</li></ol><h4 id="KubeAPIServer"><a href="#KubeAPIServer" class="headerlink" title="KubeAPIServer"></a>KubeAPIServer</h4><p>KubeAPIServer 主要是提供对 API Resource 的操作请求，为 kubernetes 中众多 API 注册路由信息，暴露 RESTful API 并且对外提供 kubernetes service，使集群中以及集群外的服务都可以通过 RESTful API 操作 kubernetes 中的资源。</p><p>与<code>APIExtensionsServer</code>，<code>KubeAPIServer</code>初始化流程如下</p><ol><li><code>CreateKubeAPIServer</code>调用<code>kubeAPIServerConfig.Complete().New</code>来初始化</li><li><code>New</code>函数创建默认的<code>apigroup</code>(pod,deployment等内部资源), 调用<code>InstallAPIs</code>注册</li><li>启动相关controller, 加入到<code>poststarthook</code></li></ol><h4 id="AggregatorServer"><a href="#AggregatorServer" class="headerlink" title="AggregatorServer"></a>AggregatorServer</h4><p><code>Aggregator</code>通过<code>APIServices</code>对象关联到某个<code>Service</code>来进行请求的转发，其关联的<code>Service</code>类型进一步决定了请求转发形式。<code>Aggregator</code>包括一个<code>GenericAPIServer</code>和维护自身状态的<code>Controller</code>。其中 <code>GenericAPIServer</code>主要处理<code>apiregistration.k8s.io</code>组下的<code>APIService</code>资源请求。</p><p><code>Aggregator</code>除了处理资源请求外还包含几个controller：</p><ol><li>apiserviceRegistrationController：负责<code>APIServices</code>中资源的注册与删除；</li><li>availableConditionController：维护<code>APIServices</code>的可用状态，包括其引用<code>Service</code>是否可用等；</li><li>autoRegistrationController：用于保持API中存在的一组特定的<code>APIServices</code>；</li><li>crdRegistrationController：负责将<code>CRD GroupVersions</code>自动注册到<code>APIServices</code>中；</li><li>openAPIAggregationController：将<code>APIServices</code>资源的变化同步至提供的<code>OpenAPI</code>文档；<br>kubernetes中的一些附加组件，比如metrics-server就是通过Aggregator的方式进行扩展的，实际环境中可以通过使用apiserver-builder工具轻松以Aggregator的扩展方式创建自定义资源。</li></ol><p>初始化AggregatorServer的主要逻辑为：</p><ol><li>调用<code>aggregatorConfig.Complete().NewWithDelegate</code>创建<code>aggregatorServer</code></li><li>初始化<code>crdRegistrationController</code>和<code>autoRegistrationController</code>，<code>crdRegistrationController</code>负责注册CRD，<code>autoRegistrationController</code>负责将 CRD 对应的 APIServices自动注册到apiserver中，CRD 创建后可通过<code>kubectl get apiservices</code>查看是否注册到 apiservices中</li><li>将<code>autoRegistrationController</code>和<code>crdRegistrationController</code>加入到PostStartHook中</li></ol><p>API Server 的调用链，大体如下 <code>DefaultHandlerChain-&gt;{handler/crdhandler/proxy}-&gt;admission-&gt;validation-&gt;etcd</code></p><ol><li>请求进入时，会经过<code>defaultchain</code>做一些认证鉴权工作</li><li>然后通过<code>route</code>执行对应的handler，如果为aggration api, 将直接转发请求到对应service</li><li>handler处理完，经过admission与validation，做一些修改和检查，用户在这部分可以自定义webhook</li><li>最后存入etcd</li></ol><h4 id="API-server-启动过程"><a href="#API-server-启动过程" class="headerlink" title="API server 启动过程"></a>API server 启动过程</h4><p>代码路径：</p><p><a href="https://github.com/kubernetes/kubernetes/blob/v1.18.0/cmd/kube-apiserver/apiserver.go" target="_blank" rel="noopener">kubernetes/cmd/kube-apiserver/apiserver.go</a></p><p>调用链：</p><pre><code>main() -&gt; app.NewAPIServerCommand() -&gt; Run()-&gt;</code></pre><pre class=" language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">NewAPIServerCommand</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span>cobra<span class="token punctuation">.</span>Command <span class="token punctuation">{</span>    s <span class="token operator">:=</span> options<span class="token punctuation">.</span><span class="token function">NewServerRunOptions</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    cmd <span class="token operator">:=</span> <span class="token operator">&amp;</span>cobra<span class="token punctuation">.</span>Command<span class="token punctuation">{</span>        Use<span class="token punctuation">:</span> <span class="token string">"kube-apiserver"</span><span class="token punctuation">,</span>        Long<span class="token punctuation">:</span> <span class="token string">`The Kubernetes API server validates and configures datafor the api objects which include pods, services, replicationcontrollers, andothers. The API Server services REST operations and provides the frontend to thecluster's shared state through which all other components interact.`</span><span class="token punctuation">,</span>        Run<span class="token punctuation">:</span> <span class="token keyword">func</span><span class="token punctuation">(</span>cmd <span class="token operator">*</span>cobra<span class="token punctuation">.</span>Command<span class="token punctuation">,</span> args <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            verflag<span class="token punctuation">.</span><span class="token function">PrintAndExitIfRequested</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            stopCh <span class="token operator">:=</span> server<span class="token punctuation">.</span><span class="token function">SetupSignalHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token keyword">if</span> err <span class="token operator">:=</span> <span class="token function">Run</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> stopCh<span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>                fmt<span class="token punctuation">.</span><span class="token function">Fprintf</span><span class="token punctuation">(</span>os<span class="token punctuation">.</span>Stderr<span class="token punctuation">,</span> <span class="token string">"%v\n"</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span>                os<span class="token punctuation">.</span><span class="token function">Exit</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">}</span>    s<span class="token punctuation">.</span><span class="token function">AddFlags</span><span class="token punctuation">(</span>cmd<span class="token punctuation">.</span><span class="token function">Flags</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> cmd<span class="token punctuation">}</span></code></pre><p>APIServer的启动参数存储在ServerRunOptions中，启动参数基于命令行参数进行解析。<br> cobra框架会自动分析命令行参数，命令行参数的解析是由s.AddFlag(cmd.Flags())中预先定义好的。在AddFlags方法中。</p><pre class=" language-go"><code class="language-go"><span class="token comment" spellcheck="true">// AddFlags adds flags for a specific APIServer to the specified FlagSet</span><span class="token keyword">func</span> <span class="token punctuation">(</span>s <span class="token operator">*</span>ServerRunOptions<span class="token punctuation">)</span> <span class="token function">AddFlags</span><span class="token punctuation">(</span>fs <span class="token operator">*</span>pflag<span class="token punctuation">.</span>FlagSet<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// Add the generic flags.</span>    s<span class="token punctuation">.</span>GenericServerRunOptions<span class="token punctuation">.</span><span class="token function">AddUniversalFlags</span><span class="token punctuation">(</span>fs<span class="token punctuation">)</span>    s<span class="token punctuation">.</span>Etcd<span class="token punctuation">.</span><span class="token function">AddFlags</span><span class="token punctuation">(</span>fs<span class="token punctuation">)</span>    s<span class="token punctuation">.</span>SecureServing<span class="token punctuation">.</span><span class="token function">AddFlags</span><span class="token punctuation">(</span>fs<span class="token punctuation">)</span>    s<span class="token punctuation">.</span>InsecureServing<span class="token punctuation">.</span><span class="token function">AddFlags</span><span class="token punctuation">(</span>fs<span class="token punctuation">)</span>    s<span class="token punctuation">.</span>InsecureServing<span class="token punctuation">.</span><span class="token function">AddDeprecatedFlags</span><span class="token punctuation">(</span>fs<span class="token punctuation">)</span>    s<span class="token punctuation">.</span>Audit<span class="token punctuation">.</span><span class="token function">AddFlags</span><span class="token punctuation">(</span>fs<span class="token punctuation">)</span>    s<span class="token punctuation">.</span>Features<span class="token punctuation">.</span><span class="token function">AddFlags</span><span class="token punctuation">(</span>fs<span class="token punctuation">)</span>    s<span class="token punctuation">.</span>Authentication<span class="token punctuation">.</span><span class="token function">AddFlags</span><span class="token punctuation">(</span>fs<span class="token punctuation">)</span>    s<span class="token punctuation">.</span>Authorization<span class="token punctuation">.</span><span class="token function">AddFlags</span><span class="token punctuation">(</span>fs<span class="token punctuation">)</span>    s<span class="token punctuation">.</span>CloudProvider<span class="token punctuation">.</span><span class="token function">AddFlags</span><span class="token punctuation">(</span>fs<span class="token punctuation">)</span>    s<span class="token punctuation">.</span>StorageSerialization<span class="token punctuation">.</span><span class="token function">AddFlags</span><span class="token punctuation">(</span>fs<span class="token punctuation">)</span>    s<span class="token punctuation">.</span>APIEnablement<span class="token punctuation">.</span><span class="token function">AddFlags</span><span class="token punctuation">(</span>fs<span class="token punctuation">)</span>    s<span class="token punctuation">.</span>Admission<span class="token punctuation">.</span><span class="token function">AddFlags</span><span class="token punctuation">(</span>fs<span class="token punctuation">)</span>       <span class="token operator">...</span><span class="token operator">...</span>       fs<span class="token punctuation">.</span><span class="token function">BoolVar</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>s<span class="token punctuation">.</span>EnableAggregatorRouting<span class="token punctuation">,</span> <span class="token string">"enable-aggregator-routing"</span><span class="token punctuation">,</span> s<span class="token punctuation">.</span>EnableAggregatorRouting<span class="token punctuation">,</span>        <span class="token string">"Turns on aggregator routing requests to endoints IP rather than cluster IP."</span><span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><p>最终，我们会执行Command.Execute方法启动程序，它会首先解析参数，然后执行Run方法。</p><pre class=" language-go"><code class="language-go"><span class="token comment" spellcheck="true">// Run runs the specified APIServer.  This should never exit.</span><span class="token keyword">func</span> <span class="token function">Run</span><span class="token punctuation">(</span>completeOptions completedServerRunOptions<span class="token punctuation">,</span> stopCh <span class="token operator">&lt;-</span><span class="token keyword">chan</span> <span class="token keyword">struct</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// To help debugging, immediately log version</span>    klog<span class="token punctuation">.</span><span class="token function">Infof</span><span class="token punctuation">(</span><span class="token string">"Version: %+v"</span><span class="token punctuation">,</span> version<span class="token punctuation">.</span><span class="token function">Get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    server<span class="token punctuation">,</span> err <span class="token operator">:=</span> <span class="token function">CreateServerChain</span><span class="token punctuation">(</span>completeOptions<span class="token punctuation">,</span> stopCh<span class="token punctuation">)</span>    <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> err    <span class="token punctuation">}</span>    prepared<span class="token punctuation">,</span> err <span class="token operator">:=</span> server<span class="token punctuation">.</span><span class="token function">PrepareRun</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> err    <span class="token punctuation">}</span>    <span class="token keyword">return</span> prepared<span class="token punctuation">.</span><span class="token function">Run</span><span class="token punctuation">(</span>stopCh<span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><p><strong>构建服务器调用链</strong></p><p>在上面的Run方法中，CreateServerChain 负责构建服务器链，最终返回 aggregatorServer ，：API Server主要工作都在CreateServerChain中完成的。</p><pre class=" language-go"><code class="language-go"><span class="token comment" spellcheck="true">// CreateServerChain creates the apiservers connected via delegation.</span><span class="token keyword">func</span> <span class="token function">CreateServerChain</span><span class="token punctuation">(</span>completedOptions completedServerRunOptions<span class="token punctuation">,</span> stopCh <span class="token operator">&lt;-</span><span class="token keyword">chan</span> <span class="token keyword">struct</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token operator">*</span>aggregatorapiserver<span class="token punctuation">.</span>APIAggregator<span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 如果指定了SSHUser参数，CreateNodeDialer用于创建连接本机节点的相关传输方法和网络建立方法</span>    <span class="token comment" spellcheck="true">// 所以与本机是通过SSH隧道交互的。通常情况下，我们是没有设置SSHUser参数的。</span>    nodeTunneler<span class="token punctuation">,</span> proxyTransport<span class="token punctuation">,</span> err <span class="token operator">:=</span> <span class="token function">CreateNodeDialer</span><span class="token punctuation">(</span>completedOptions<span class="token punctuation">)</span>    <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> err    <span class="token punctuation">}</span>    kubeAPIServerConfig<span class="token punctuation">,</span> insecureServingInfo<span class="token punctuation">,</span> serviceResolver<span class="token punctuation">,</span> pluginInitializer<span class="token punctuation">,</span> err <span class="token operator">:=</span> <span class="token function">CreateKubeAPIServerConfig</span><span class="token punctuation">(</span>completedOptions<span class="token punctuation">,</span> nodeTunneler<span class="token punctuation">,</span> proxyTransport<span class="token punctuation">)</span>    <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> err    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// If additional API servers are added, they should be gated.</span>    apiExtensionsConfig<span class="token punctuation">,</span> err <span class="token operator">:=</span> <span class="token function">createAPIExtensionsConfig</span><span class="token punctuation">(</span><span class="token operator">*</span>kubeAPIServerConfig<span class="token punctuation">.</span>GenericConfig<span class="token punctuation">,</span> kubeAPIServerConfig<span class="token punctuation">.</span>ExtraConfig<span class="token punctuation">.</span>VersionedInformers<span class="token punctuation">,</span> pluginInitializer<span class="token punctuation">,</span> completedOptions<span class="token punctuation">.</span>ServerRunOptions<span class="token punctuation">,</span> completedOptions<span class="token punctuation">.</span>MasterCount<span class="token punctuation">,</span>        serviceResolver<span class="token punctuation">,</span> webhook<span class="token punctuation">.</span><span class="token function">NewDefaultAuthenticationInfoResolverWrapper</span><span class="token punctuation">(</span>proxyTransport<span class="token punctuation">,</span> kubeAPIServerConfig<span class="token punctuation">.</span>GenericConfig<span class="token punctuation">.</span>EgressSelector<span class="token punctuation">,</span> kubeAPIServerConfig<span class="token punctuation">.</span>GenericConfig<span class="token punctuation">.</span>LoopbackClientConfig<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> err    <span class="token punctuation">}</span>    apiExtensionsServer<span class="token punctuation">,</span> err <span class="token operator">:=</span> <span class="token function">createAPIExtensionsServer</span><span class="token punctuation">(</span>apiExtensionsConfig<span class="token punctuation">,</span> genericapiserver<span class="token punctuation">.</span><span class="token function">NewEmptyDelegate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> err    <span class="token punctuation">}</span>    kubeAPIServer<span class="token punctuation">,</span> err <span class="token operator">:=</span> <span class="token function">CreateKubeAPIServer</span><span class="token punctuation">(</span>kubeAPIServerConfig<span class="token punctuation">,</span> apiExtensionsServer<span class="token punctuation">.</span>GenericAPIServer<span class="token punctuation">)</span>    <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> err    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// aggregator comes last in the chain</span>    aggregatorConfig<span class="token punctuation">,</span> err <span class="token operator">:=</span> <span class="token function">createAggregatorConfig</span><span class="token punctuation">(</span><span class="token operator">*</span>kubeAPIServerConfig<span class="token punctuation">.</span>GenericConfig<span class="token punctuation">,</span> completedOptions<span class="token punctuation">.</span>ServerRunOptions<span class="token punctuation">,</span> kubeAPIServerConfig<span class="token punctuation">.</span>ExtraConfig<span class="token punctuation">.</span>VersionedInformers<span class="token punctuation">,</span> serviceResolver<span class="token punctuation">,</span> proxyTransport<span class="token punctuation">,</span> pluginInitializer<span class="token punctuation">)</span>    <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> err    <span class="token punctuation">}</span>    aggregatorServer<span class="token punctuation">,</span> err <span class="token operator">:=</span> <span class="token function">createAggregatorServer</span><span class="token punctuation">(</span>aggregatorConfig<span class="token punctuation">,</span> kubeAPIServer<span class="token punctuation">.</span>GenericAPIServer<span class="token punctuation">,</span> apiExtensionsServer<span class="token punctuation">.</span>Informers<span class="token punctuation">)</span>    <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// we don't need special handling for innerStopCh because the aggregator server doesn't create any go routines</span>        <span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> err    <span class="token punctuation">}</span>    <span class="token keyword">if</span> insecureServingInfo <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>        insecureHandlerChain <span class="token operator">:=</span> kubeserver<span class="token punctuation">.</span><span class="token function">BuildInsecureHandlerChain</span><span class="token punctuation">(</span>aggregatorServer<span class="token punctuation">.</span>GenericAPIServer<span class="token punctuation">.</span><span class="token function">UnprotectedHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> kubeAPIServerConfig<span class="token punctuation">.</span>GenericConfig<span class="token punctuation">)</span>        <span class="token keyword">if</span> err <span class="token operator">:=</span> insecureServingInfo<span class="token punctuation">.</span><span class="token function">Serve</span><span class="token punctuation">(</span>insecureHandlerChain<span class="token punctuation">,</span> kubeAPIServerConfig<span class="token punctuation">.</span>GenericConfig<span class="token punctuation">.</span>RequestTimeout<span class="token punctuation">,</span> stopCh<span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> err        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> aggregatorServer<span class="token punctuation">,</span> <span class="token boolean">nil</span><span class="token punctuation">}</span></code></pre><p>CreateServerChain完成了主要的流程，里面有几个步骤比较特殊，这里分别讲解</p><h4 id="GenericAPIServer"><a href="#GenericAPIServer" class="headerlink" title="GenericAPIServer"></a>GenericAPIServer</h4><p>调用链：</p><pre><code>main() -&gt; app.NewAPIServerCommand() -&gt; Run()-&gt;server.PrepareRun()-&gt; s.GenericAPIServer.PrepareRun()</code></pre><p>GenericAPIServer可以理解为Kubernetes中提供API服务的结构体。</p><p>代码路径：</p><p><a href="https://github.com/kubernetes/kubernetes/blob/9d3406c27b581c0961ac5871f6893f838d59b10c/staging/src/k8s.io/apiserver/pkg/server/genericapiserver.go" target="_blank" rel="noopener">kubernetes/staging/src/k8s.io/apiserver/pkg/server/genericapiserver.go </a></p><pre class=" language-go"><code class="language-go"><span class="token keyword">type</span> GenericAPIServer <span class="token keyword">struct</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// discoveryAddresses is used to build cluster IPs for discovery.</span>    discoveryAddresses discovery<span class="token punctuation">.</span>Addresses<span class="token operator">...</span>    <span class="token comment" spellcheck="true">// healthz checks</span>    healthzLock            sync<span class="token punctuation">.</span>Mutex    healthzChecks          <span class="token punctuation">[</span><span class="token punctuation">]</span>healthz<span class="token punctuation">.</span>HealthChecker    healthzChecksInstalled <span class="token builtin">bool</span><span class="token operator">...</span>    maxRequestBodyBytes <span class="token builtin">int64</span><span class="token punctuation">}</span></code></pre><p>如何生成 GenericAPIServer </p><p>调用路径：</p><pre><code>main() -&gt; app.NewAPIServerCommand() -&gt; Run()-&gt;CreateServerChain()-&gt;CreateKubeAPIServer()-&gt;kubeAPIServerConfig.Complete().New(delegateAPIServer)-&gt;c.GenericConfig.New("kube-apiserver", delegationTarget)</code></pre><pre class=" language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token punctuation">(</span>c completedConfig<span class="token punctuation">)</span> <span class="token function">New</span><span class="token punctuation">(</span>name <span class="token builtin">string</span><span class="token punctuation">,</span> delegationTarget DelegationTarget<span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token operator">*</span>GenericAPIServer<span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token operator">...</span>    handlerChainBuilder <span class="token operator">:=</span> <span class="token keyword">func</span><span class="token punctuation">(</span>handler http<span class="token punctuation">.</span>Handler<span class="token punctuation">)</span> http<span class="token punctuation">.</span>Handler <span class="token punctuation">{</span>        <span class="token keyword">return</span> c<span class="token punctuation">.</span><span class="token function">BuildHandlerChainFunc</span><span class="token punctuation">(</span>handler<span class="token punctuation">,</span> c<span class="token punctuation">.</span>Config<span class="token punctuation">)</span>    <span class="token punctuation">}</span>    apiServerHandler <span class="token operator">:=</span> <span class="token function">NewAPIServerHandler</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> c<span class="token punctuation">.</span>Serializer<span class="token punctuation">,</span> handlerChainBuilder<span class="token punctuation">,</span> delegationTarget<span class="token punctuation">.</span><span class="token function">UnprotectedHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    s <span class="token operator">:=</span> <span class="token operator">&amp;</span>GenericAPIServer<span class="token punctuation">{</span>        discoveryAddresses<span class="token punctuation">:</span>         c<span class="token punctuation">.</span>DiscoveryAddresses<span class="token punctuation">,</span>        <span class="token operator">...</span><span class="token punctuation">.</span>    <span class="token punctuation">}</span><span class="token operator">...</span>    <span class="token comment" spellcheck="true">// 安装特殊功能的路径</span>    <span class="token function">installAPI</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> c<span class="token punctuation">.</span>Config<span class="token punctuation">)</span><span class="token operator">...</span>    <span class="token keyword">return</span> s<span class="token punctuation">,</span> <span class="token boolean">nil</span><span class="token punctuation">}</span></code></pre><h4 id="Master"><a href="#Master" class="headerlink" title="Master"></a>Master</h4><p>Master的本质就是一个GenericAPIServer，定义在<a href="https://github.com/kubernetes/kubernetes/blob/master/pkg/master/master.go" target="_blank" rel="noopener">kubernetes/pkg/master/master.go</a>中：</p><pre class=" language-go"><code class="language-go">s<span class="token punctuation">,</span> err <span class="token operator">:=</span> c<span class="token punctuation">.</span>GenericConfig<span class="token punctuation">.</span><span class="token function">New</span><span class="token punctuation">(</span><span class="token string">"kube-apiserver"</span><span class="token punctuation">,</span> delegationTarget<span class="token punctuation">)</span><span class="token operator">...</span>m <span class="token operator">:=</span> <span class="token operator">&amp;</span>Master<span class="token punctuation">{</span>    GenericAPIServer<span class="token punctuation">:</span>          s<span class="token punctuation">,</span>    ClusterAuthenticationInfo<span class="token punctuation">:</span> c<span class="token punctuation">.</span>ExtraConfig<span class="token punctuation">.</span>ClusterAuthenticationInfo<span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// Master contains state for a Kubernetes cluster master/api server.</span><span class="token keyword">type</span> Master <span class="token keyword">struct</span> <span class="token punctuation">{</span>    GenericAPIServer <span class="token operator">*</span>genericapiserver<span class="token punctuation">.</span>GenericAPIServer    ClusterAuthenticationInfo clusterauthenticationtrust<span class="token punctuation">.</span>ClusterAuthenticationInfo<span class="token punctuation">}</span></code></pre><p>所以Master是对GenericAPIServer的封装。<br>Master也是从Config中来，这个 Config 定义：</p><pre class=" language-go"><code class="language-go"><span class="token comment" spellcheck="true">// Config defines configuration for the master</span><span class="token keyword">type</span> Config <span class="token keyword">struct</span> <span class="token punctuation">{</span>    GenericConfig <span class="token operator">*</span>genericapiserver<span class="token punctuation">.</span>Config    ExtraConfig   ExtraConfig<span class="token punctuation">}</span></code></pre><p>可以看出，Master的Config包含GenericConfig、ExtraConfig。<br>Master 的 Config 通过 Complete()。在生成Master的同时，系统会调用InstallLegacyAPI()及InstallAPIs()来安装各种API</p><p>kube-apiserver是如何启动Master的：</p><pre class=" language-go"><code class="language-go">prepared <span class="token operator">:=</span> s<span class="token punctuation">.</span>GenericAPIServer<span class="token punctuation">.</span><span class="token function">PrepareRun</span><span class="token punctuation">(</span><span class="token punctuation">)</span>preparedAPIAggregator<span class="token punctuation">{</span>APIAggregator<span class="token punctuation">:</span> s<span class="token punctuation">,</span> runnable<span class="token punctuation">:</span> prepared<span class="token punctuation">}</span>prepared<span class="token punctuation">.</span><span class="token function">Run</span><span class="token punctuation">(</span>stopCh<span class="token punctuation">)</span><span class="token keyword">func</span> <span class="token punctuation">(</span>s preparedAPIAggregator<span class="token punctuation">)</span> <span class="token function">Run</span><span class="token punctuation">(</span>stopCh <span class="token operator">&lt;-</span><span class="token keyword">chan</span> <span class="token keyword">struct</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> s<span class="token punctuation">.</span>runnable<span class="token punctuation">.</span><span class="token function">Run</span><span class="token punctuation">(</span>stopCh<span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><h4 id="Install-API"><a href="#Install-API" class="headerlink" title="Install API"></a>Install API</h4><p>代码路径：</p><p><a href="https://github.com/kubernetes/kubernetes/blob/master/pkg/master/master.go" target="_blank" rel="noopener">kubernetes/pkg/master/master.go</a></p><pre class=" language-go"><code class="language-go">    m <span class="token operator">:=</span> <span class="token operator">&amp;</span>Master<span class="token punctuation">{</span>        GenericAPIServer<span class="token punctuation">:</span>          s<span class="token punctuation">,</span>        ClusterAuthenticationInfo<span class="token punctuation">:</span> c<span class="token punctuation">.</span>ExtraConfig<span class="token punctuation">.</span>ClusterAuthenticationInfo<span class="token punctuation">,</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// install legacy rest storage</span>    <span class="token keyword">if</span> c<span class="token punctuation">.</span>ExtraConfig<span class="token punctuation">.</span>APIResourceConfigSource<span class="token punctuation">.</span><span class="token function">VersionEnabled</span><span class="token punctuation">(</span>apiv1<span class="token punctuation">.</span>SchemeGroupVersion<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token operator">...</span>        <span class="token keyword">if</span> err <span class="token operator">:=</span> m<span class="token punctuation">.</span><span class="token function">InstallLegacyAPI</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>c<span class="token punctuation">,</span> c<span class="token punctuation">.</span>GenericConfig<span class="token punctuation">.</span>RESTOptionsGetter<span class="token punctuation">,</span> legacyRESTStorageProvider<span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> err        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token operator">...</span>    <span class="token keyword">if</span> err <span class="token operator">:=</span> m<span class="token punctuation">.</span><span class="token function">InstallAPIs</span><span class="token punctuation">(</span>c<span class="token punctuation">.</span>ExtraConfig<span class="token punctuation">.</span>APIResourceConfigSource<span class="token punctuation">,</span> c<span class="token punctuation">.</span>GenericConfig<span class="token punctuation">.</span>RESTOptionsGetter<span class="token punctuation">,</span> restStorageProviders<span class="token operator">...</span><span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> err    <span class="token punctuation">}</span></code></pre><p>创建 Master 之后调用了InstallLegacyAPI()和InstallAPIs()安装API。</p><h4 id="Authentication"><a href="#Authentication" class="headerlink" title="Authentication"></a>Authentication</h4><p>Authentication 负责对 Kubernetes 中的请求进行认证，只有通过认证的请求才会被执行。在 Kubernetes 中，有BasicAuth, Keystone, X509, Token, ServiceAccount, OIDCIssuer, WebhookToken, AnyToken等认证器。我们来看下 Kubernetes 是如何管理认证器的，及如何对请求进行认证。</p><p>调用链：</p><pre class=" language-go"><code class="language-go"><span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> app<span class="token punctuation">.</span><span class="token function">NewAPIServerCommand</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token function">Run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token function">CreateServerChain</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token function">CreateKubeAPIServerConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token function">buildGenericConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token function">BuildAuthenticator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span> authenticatorConfig<span class="token punctuation">.</span><span class="token function">New</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p>代码路径：</p><p><a href="https://github.com/kubernetes/kubernetes/blob/1871f75b32f5d96c62ce6aa8c2d393124b7002aa/cmd/kube-apiserver/app/server.go#L501" target="_blank" rel="noopener">kubernetes/cmd/kube-apiserver/app/server.go</a></p><pre class=" language-go"><code class="language-go"><span class="token comment" spellcheck="true">// BuildAuthenticator constructs the authenticator</span><span class="token keyword">func</span> <span class="token function">BuildAuthenticator</span><span class="token punctuation">(</span>s <span class="token operator">*</span>options<span class="token punctuation">.</span>ServerRunOptions<span class="token punctuation">,</span> extclient clientgoclientset<span class="token punctuation">.</span>Interface<span class="token punctuation">,</span> versionedInformer clientgoinformers<span class="token punctuation">.</span>SharedInformerFactory<span class="token punctuation">)</span> <span class="token punctuation">(</span>authenticator<span class="token punctuation">.</span>Request<span class="token punctuation">,</span> <span class="token operator">*</span>spec<span class="token punctuation">.</span>SecurityDefinitions<span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    authenticatorConfig <span class="token operator">:=</span> s<span class="token punctuation">.</span>Authentication<span class="token punctuation">.</span><span class="token function">ToAuthenticationConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> s<span class="token punctuation">.</span>Authentication<span class="token punctuation">.</span>ServiceAccounts<span class="token punctuation">.</span>Lookup <span class="token operator">||</span> utilfeature<span class="token punctuation">.</span>DefaultFeatureGate<span class="token punctuation">.</span><span class="token function">Enabled</span><span class="token punctuation">(</span>features<span class="token punctuation">.</span>TokenRequest<span class="token punctuation">)</span> <span class="token punctuation">{</span>        authenticatorConfig<span class="token punctuation">.</span>ServiceAccountTokenGetter <span class="token operator">=</span> serviceaccountcontroller<span class="token punctuation">.</span><span class="token function">NewGetterFromClient</span><span class="token punctuation">(</span>            extclient<span class="token punctuation">,</span>            versionedInformer<span class="token punctuation">.</span><span class="token function">Core</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">V1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Secrets</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Lister</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            versionedInformer<span class="token punctuation">.</span><span class="token function">Core</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">V1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ServiceAccounts</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Lister</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            versionedInformer<span class="token punctuation">.</span><span class="token function">Core</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">V1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Pods</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Lister</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token punctuation">)</span>    <span class="token punctuation">}</span>    authenticatorConfig<span class="token punctuation">.</span>BootstrapTokenAuthenticator <span class="token operator">=</span> bootstrap<span class="token punctuation">.</span><span class="token function">NewTokenAuthenticator</span><span class="token punctuation">(</span>        versionedInformer<span class="token punctuation">.</span><span class="token function">Core</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">V1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Secrets</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Lister</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Secrets</span><span class="token punctuation">(</span>v1<span class="token punctuation">.</span>NamespaceSystem<span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token punctuation">)</span>    <span class="token keyword">return</span> authenticatorConfig<span class="token punctuation">.</span><span class="token function">New</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><p>所以，接下来看authenticator.New()，定义在<code>kubernetes/pkg/kubeapiserver/authenticator/config.go</code>中：</p><pre class=" language-go"><code class="language-go"><span class="token comment" spellcheck="true">// New returns an authenticator.Request or an error that supports the standard</span><span class="token comment" spellcheck="true">// Kubernetes authentication mechanisms.</span><span class="token keyword">func</span> <span class="token punctuation">(</span>config Config<span class="token punctuation">)</span> <span class="token function">New</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>authenticator<span class="token punctuation">.</span>Request<span class="token punctuation">,</span> <span class="token operator">*</span>spec<span class="token punctuation">.</span>SecurityDefinitions<span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> authenticators <span class="token punctuation">[</span><span class="token punctuation">]</span>authenticator<span class="token punctuation">.</span>Request    <span class="token keyword">var</span> tokenAuthenticators <span class="token punctuation">[</span><span class="token punctuation">]</span>authenticator<span class="token punctuation">.</span>Token    securityDefinitions <span class="token operator">:=</span> spec<span class="token punctuation">.</span>SecurityDefinitions<span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// front-proxy, BasicAuth methods, local first, then remote</span>    <span class="token comment" spellcheck="true">// Add the front proxy authenticator if requested</span>    <span class="token keyword">if</span> config<span class="token punctuation">.</span>RequestHeaderConfig <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>        requestHeaderAuthenticator <span class="token operator">:=</span> headerrequest<span class="token punctuation">.</span><span class="token function">NewDynamicVerifyOptionsSecure</span><span class="token punctuation">(</span>            config<span class="token punctuation">.</span>RequestHeaderConfig<span class="token punctuation">.</span>CAContentProvider<span class="token punctuation">.</span>VerifyOptions<span class="token punctuation">,</span>            config<span class="token punctuation">.</span>RequestHeaderConfig<span class="token punctuation">.</span>AllowedClientNames<span class="token punctuation">,</span>            config<span class="token punctuation">.</span>RequestHeaderConfig<span class="token punctuation">.</span>UsernameHeaders<span class="token punctuation">,</span>            config<span class="token punctuation">.</span>RequestHeaderConfig<span class="token punctuation">.</span>GroupHeaders<span class="token punctuation">,</span>            config<span class="token punctuation">.</span>RequestHeaderConfig<span class="token punctuation">.</span>ExtraHeaderPrefixes<span class="token punctuation">,</span>        <span class="token punctuation">)</span>        authenticators <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>authenticators<span class="token punctuation">,</span> authenticator<span class="token punctuation">.</span><span class="token function">WrapAudienceAgnosticRequest</span><span class="token punctuation">(</span>config<span class="token punctuation">.</span>APIAudiences<span class="token punctuation">,</span> requestHeaderAuthenticator<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// basic auth</span>    <span class="token keyword">if</span> <span class="token function">len</span><span class="token punctuation">(</span>config<span class="token punctuation">.</span>BasicAuthFile<span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">0</span> <span class="token punctuation">{</span>        basicAuth<span class="token punctuation">,</span> err <span class="token operator">:=</span> <span class="token function">newAuthenticatorFromBasicAuthFile</span><span class="token punctuation">(</span>config<span class="token punctuation">.</span>BasicAuthFile<span class="token punctuation">)</span>        <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> err        <span class="token punctuation">}</span>        authenticators <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>authenticators<span class="token punctuation">,</span> authenticator<span class="token punctuation">.</span><span class="token function">WrapAudienceAgnosticRequest</span><span class="token punctuation">(</span>config<span class="token punctuation">.</span>APIAudiences<span class="token punctuation">,</span> basicAuth<span class="token punctuation">)</span><span class="token punctuation">)</span>        securityDefinitions<span class="token punctuation">[</span><span class="token string">"HTTPBasic"</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">&amp;</span>spec<span class="token punctuation">.</span>SecurityScheme<span class="token punctuation">{</span>            SecuritySchemeProps<span class="token punctuation">:</span> spec<span class="token punctuation">.</span>SecuritySchemeProps<span class="token punctuation">{</span>                Type<span class="token punctuation">:</span>        <span class="token string">"basic"</span><span class="token punctuation">,</span>                Description<span class="token punctuation">:</span> <span class="token string">"HTTP Basic authentication"</span><span class="token punctuation">,</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// X509 methods</span>    <span class="token keyword">if</span> config<span class="token punctuation">.</span>ClientCAContentProvider <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>        certAuth <span class="token operator">:=</span> x509<span class="token punctuation">.</span><span class="token function">NewDynamic</span><span class="token punctuation">(</span>config<span class="token punctuation">.</span>ClientCAContentProvider<span class="token punctuation">.</span>VerifyOptions<span class="token punctuation">,</span> x509<span class="token punctuation">.</span>CommonNameUserConversion<span class="token punctuation">)</span>        authenticators <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>authenticators<span class="token punctuation">,</span> certAuth<span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// Bearer token methods, local first, then remote</span>    <span class="token keyword">if</span> <span class="token function">len</span><span class="token punctuation">(</span>config<span class="token punctuation">.</span>TokenAuthFile<span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">0</span> <span class="token punctuation">{</span>        tokenAuth<span class="token punctuation">,</span> err <span class="token operator">:=</span> <span class="token function">newAuthenticatorFromTokenFile</span><span class="token punctuation">(</span>config<span class="token punctuation">.</span>TokenAuthFile<span class="token punctuation">)</span>        <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> err        <span class="token punctuation">}</span>        tokenAuthenticators <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>tokenAuthenticators<span class="token punctuation">,</span> authenticator<span class="token punctuation">.</span><span class="token function">WrapAudienceAgnosticToken</span><span class="token punctuation">(</span>config<span class="token punctuation">.</span>APIAudiences<span class="token punctuation">,</span> tokenAuth<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token function">len</span><span class="token punctuation">(</span>config<span class="token punctuation">.</span>ServiceAccountKeyFiles<span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">0</span> <span class="token punctuation">{</span>        serviceAccountAuth<span class="token punctuation">,</span> err <span class="token operator">:=</span> <span class="token function">newLegacyServiceAccountAuthenticator</span><span class="token punctuation">(</span>config<span class="token punctuation">.</span>ServiceAccountKeyFiles<span class="token punctuation">,</span> config<span class="token punctuation">.</span>ServiceAccountLookup<span class="token punctuation">,</span> config<span class="token punctuation">.</span>APIAudiences<span class="token punctuation">,</span> config<span class="token punctuation">.</span>ServiceAccountTokenGetter<span class="token punctuation">)</span>        <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> err        <span class="token punctuation">}</span>        tokenAuthenticators <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>tokenAuthenticators<span class="token punctuation">,</span> serviceAccountAuth<span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> utilfeature<span class="token punctuation">.</span>DefaultFeatureGate<span class="token punctuation">.</span><span class="token function">Enabled</span><span class="token punctuation">(</span>features<span class="token punctuation">.</span>TokenRequest<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> config<span class="token punctuation">.</span>ServiceAccountIssuer <span class="token operator">!=</span> <span class="token string">""</span> <span class="token punctuation">{</span>        serviceAccountAuth<span class="token punctuation">,</span> err <span class="token operator">:=</span> <span class="token function">newServiceAccountAuthenticator</span><span class="token punctuation">(</span>config<span class="token punctuation">.</span>ServiceAccountIssuer<span class="token punctuation">,</span> config<span class="token punctuation">.</span>ServiceAccountKeyFiles<span class="token punctuation">,</span> config<span class="token punctuation">.</span>APIAudiences<span class="token punctuation">,</span> config<span class="token punctuation">.</span>ServiceAccountTokenGetter<span class="token punctuation">)</span>        <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> err        <span class="token punctuation">}</span>        tokenAuthenticators <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>tokenAuthenticators<span class="token punctuation">,</span> serviceAccountAuth<span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> config<span class="token punctuation">.</span>BootstrapToken <span class="token punctuation">{</span>        <span class="token keyword">if</span> config<span class="token punctuation">.</span>BootstrapTokenAuthenticator <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// TODO: This can sometimes be nil because of</span>            tokenAuthenticators <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>tokenAuthenticators<span class="token punctuation">,</span> authenticator<span class="token punctuation">.</span><span class="token function">WrapAudienceAgnosticToken</span><span class="token punctuation">(</span>config<span class="token punctuation">.</span>APIAudiences<span class="token punctuation">,</span> config<span class="token punctuation">.</span>BootstrapTokenAuthenticator<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// NOTE(ericchiang): Keep the OpenID Connect after Service Accounts.</span>    <span class="token comment" spellcheck="true">//</span>    <span class="token comment" spellcheck="true">// Because both plugins verify JWTs whichever comes first in the union experiences</span>    <span class="token comment" spellcheck="true">// cache misses for all requests using the other. While the service account plugin</span>    <span class="token comment" spellcheck="true">// simply returns an error, the OpenID Connect plugin may query the provider to</span>    <span class="token comment" spellcheck="true">// update the keys, causing performance hits.</span>    <span class="token keyword">if</span> <span class="token function">len</span><span class="token punctuation">(</span>config<span class="token punctuation">.</span>OIDCIssuerURL<span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> <span class="token function">len</span><span class="token punctuation">(</span>config<span class="token punctuation">.</span>OIDCClientID<span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">0</span> <span class="token punctuation">{</span>        oidcAuth<span class="token punctuation">,</span> err <span class="token operator">:=</span> <span class="token function">newAuthenticatorFromOIDCIssuerURL</span><span class="token punctuation">(</span>oidc<span class="token punctuation">.</span>Options<span class="token punctuation">{</span>            IssuerURL<span class="token punctuation">:</span>            config<span class="token punctuation">.</span>OIDCIssuerURL<span class="token punctuation">,</span>            ClientID<span class="token punctuation">:</span>             config<span class="token punctuation">.</span>OIDCClientID<span class="token punctuation">,</span>            CAFile<span class="token punctuation">:</span>               config<span class="token punctuation">.</span>OIDCCAFile<span class="token punctuation">,</span>            UsernameClaim<span class="token punctuation">:</span>        config<span class="token punctuation">.</span>OIDCUsernameClaim<span class="token punctuation">,</span>            UsernamePrefix<span class="token punctuation">:</span>       config<span class="token punctuation">.</span>OIDCUsernamePrefix<span class="token punctuation">,</span>            GroupsClaim<span class="token punctuation">:</span>          config<span class="token punctuation">.</span>OIDCGroupsClaim<span class="token punctuation">,</span>            GroupsPrefix<span class="token punctuation">:</span>         config<span class="token punctuation">.</span>OIDCGroupsPrefix<span class="token punctuation">,</span>            SupportedSigningAlgs<span class="token punctuation">:</span> config<span class="token punctuation">.</span>OIDCSigningAlgs<span class="token punctuation">,</span>            RequiredClaims<span class="token punctuation">:</span>       config<span class="token punctuation">.</span>OIDCRequiredClaims<span class="token punctuation">,</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> err        <span class="token punctuation">}</span>        tokenAuthenticators <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>tokenAuthenticators<span class="token punctuation">,</span> authenticator<span class="token punctuation">.</span><span class="token function">WrapAudienceAgnosticToken</span><span class="token punctuation">(</span>config<span class="token punctuation">.</span>APIAudiences<span class="token punctuation">,</span> oidcAuth<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token function">len</span><span class="token punctuation">(</span>config<span class="token punctuation">.</span>WebhookTokenAuthnConfigFile<span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">0</span> <span class="token punctuation">{</span>        webhookTokenAuth<span class="token punctuation">,</span> err <span class="token operator">:=</span> <span class="token function">newWebhookTokenAuthenticator</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span>        <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> err        <span class="token punctuation">}</span>        tokenAuthenticators <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>tokenAuthenticators<span class="token punctuation">,</span> webhookTokenAuth<span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token function">len</span><span class="token punctuation">(</span>tokenAuthenticators<span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">0</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// Union the token authenticators</span>        tokenAuth <span class="token operator">:=</span> tokenunion<span class="token punctuation">.</span><span class="token function">New</span><span class="token punctuation">(</span>tokenAuthenticators<span class="token operator">...</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">// Optionally cache authentication results</span>        <span class="token keyword">if</span> config<span class="token punctuation">.</span>TokenSuccessCacheTTL <span class="token operator">></span> <span class="token number">0</span> <span class="token operator">||</span> config<span class="token punctuation">.</span>TokenFailureCacheTTL <span class="token operator">></span> <span class="token number">0</span> <span class="token punctuation">{</span>            tokenAuth <span class="token operator">=</span> tokencache<span class="token punctuation">.</span><span class="token function">New</span><span class="token punctuation">(</span>tokenAuth<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">,</span> config<span class="token punctuation">.</span>TokenSuccessCacheTTL<span class="token punctuation">,</span> config<span class="token punctuation">.</span>TokenFailureCacheTTL<span class="token punctuation">)</span>        <span class="token punctuation">}</span>        authenticators <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>authenticators<span class="token punctuation">,</span> bearertoken<span class="token punctuation">.</span><span class="token function">New</span><span class="token punctuation">(</span>tokenAuth<span class="token punctuation">)</span><span class="token punctuation">,</span> websocket<span class="token punctuation">.</span><span class="token function">NewProtocolAuthenticator</span><span class="token punctuation">(</span>tokenAuth<span class="token punctuation">)</span><span class="token punctuation">)</span>        securityDefinitions<span class="token punctuation">[</span><span class="token string">"BearerToken"</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">&amp;</span>spec<span class="token punctuation">.</span>SecurityScheme<span class="token punctuation">{</span>            SecuritySchemeProps<span class="token punctuation">:</span> spec<span class="token punctuation">.</span>SecuritySchemeProps<span class="token punctuation">{</span>                Type<span class="token punctuation">:</span>        <span class="token string">"apiKey"</span><span class="token punctuation">,</span>                Name<span class="token punctuation">:</span>        <span class="token string">"authorization"</span><span class="token punctuation">,</span>                In<span class="token punctuation">:</span>          <span class="token string">"header"</span><span class="token punctuation">,</span>                Description<span class="token punctuation">:</span> <span class="token string">"Bearer Token authentication"</span><span class="token punctuation">,</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token function">len</span><span class="token punctuation">(</span>authenticators<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> config<span class="token punctuation">.</span>Anonymous <span class="token punctuation">{</span>            <span class="token keyword">return</span> anonymous<span class="token punctuation">.</span><span class="token function">NewAuthenticator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>securityDefinitions<span class="token punctuation">,</span> <span class="token boolean">nil</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>securityDefinitions<span class="token punctuation">,</span> <span class="token boolean">nil</span>    <span class="token punctuation">}</span>    authenticator <span class="token operator">:=</span> union<span class="token punctuation">.</span><span class="token function">New</span><span class="token punctuation">(</span>authenticators<span class="token operator">...</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// GroupAdder定义在 /pkg/authentication/group/group_adder.go</span>    <span class="token comment" spellcheck="true">// antenticator调用的是 GroupAdder的 AuthenticateRequest()</span>    authenticator <span class="token operator">=</span> group<span class="token punctuation">.</span><span class="token function">NewAuthenticatedGroupAdder</span><span class="token punctuation">(</span>authenticator<span class="token punctuation">)</span>    <span class="token keyword">if</span> config<span class="token punctuation">.</span>Anonymous <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// If the authenticator chain returns an error, return an error (don't consider a bad bearer token</span>        <span class="token comment" spellcheck="true">// or invalid username/password combination anonymous).</span>        authenticator <span class="token operator">=</span> union<span class="token punctuation">.</span><span class="token function">NewFailOnError</span><span class="token punctuation">(</span>authenticator<span class="token punctuation">,</span> anonymous<span class="token punctuation">.</span><span class="token function">NewAuthenticator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> authenticator<span class="token punctuation">,</span> <span class="token operator">&amp;</span>securityDefinitions<span class="token punctuation">,</span> <span class="token boolean">nil</span><span class="token punctuation">}</span></code></pre><p><code>New()</code>会根据 kube-apiserver 的参数来生成各个认证器，并把认证器放在 <code>authenticators</code> 变量中。比如，如果指定了<code>–experimental-keystone-url</code>，则就会生成<code>keystoneAuthenticator</code>。这里要强调的是<code>unionAuthenticator</code>可以封装多个认证器。</p><p>这里还要涉及到一个概念，<code>GroupAdder</code>，封装了<code>authenticator</code>，定义在<a href="https://github.com/kubernetes/kubernetes/blob/master/staging/src/k8s.io/apiserver/pkg/authentication/group/authenticated_group_adder.go" target="_blank" rel="noopener">kubernetes/staging/src/k8s.io/apiserver/pkg/authentication/group/authenticated_group_adder.go</a>中：</p><pre class=" language-go"><code class="language-go"><span class="token comment" spellcheck="true">// AuthenticatedGroupAdder adds system:authenticated group when appropriate</span><span class="token keyword">type</span> AuthenticatedGroupAdder <span class="token keyword">struct</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// Authenticator is delegated to make the authentication decision</span>    Authenticator authenticator<span class="token punctuation">.</span>Request<span class="token punctuation">}</span><span class="token comment" spellcheck="true">// NewAuthenticatedGroupAdder wraps a request authenticator, and adds the system:authenticated group when appropriate.</span><span class="token comment" spellcheck="true">// Authentication must succeed, the user must not be system:anonymous, the groups system:authenticated or system:unauthenticated must</span><span class="token comment" spellcheck="true">// not be present</span><span class="token keyword">func</span> <span class="token function">NewAuthenticatedGroupAdder</span><span class="token punctuation">(</span>auth authenticator<span class="token punctuation">.</span>Request<span class="token punctuation">)</span> authenticator<span class="token punctuation">.</span>Request <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token operator">&amp;</span>AuthenticatedGroupAdder<span class="token punctuation">{</span>auth<span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>所以，kube-apiserver的认证器是 AuthenticatedGroupAdder，AuthenticatedGroupAdder定义有认证的入口：</p><pre class=" language-go"><code class="language-go"><span class="token comment" spellcheck="true">// 实现AuthenticateRequest()</span><span class="token comment" spellcheck="true">// 返回user.DefaultInfo</span><span class="token keyword">func</span> <span class="token punctuation">(</span>g <span class="token operator">*</span>AuthenticatedGroupAdder<span class="token punctuation">)</span> <span class="token function">AuthenticateRequest</span><span class="token punctuation">(</span>req <span class="token operator">*</span>http<span class="token punctuation">.</span>Request<span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token operator">*</span>authenticator<span class="token punctuation">.</span>Response<span class="token punctuation">,</span> <span class="token builtin">bool</span><span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    r<span class="token punctuation">,</span> ok<span class="token punctuation">,</span> err <span class="token operator">:=</span> g<span class="token punctuation">.</span>Authenticator<span class="token punctuation">.</span><span class="token function">AuthenticateRequest</span><span class="token punctuation">(</span>req<span class="token punctuation">)</span>    <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token operator">||</span> <span class="token operator">!</span>ok <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> ok<span class="token punctuation">,</span> err    <span class="token punctuation">}</span>    <span class="token keyword">if</span> r<span class="token punctuation">.</span>User<span class="token punctuation">.</span><span class="token function">GetName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> user<span class="token punctuation">.</span>Anonymous <span class="token punctuation">{</span>        <span class="token keyword">return</span> r<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token boolean">nil</span>    <span class="token punctuation">}</span>    <span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> group <span class="token operator">:=</span> <span class="token keyword">range</span> r<span class="token punctuation">.</span>User<span class="token punctuation">.</span><span class="token function">GetGroups</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> group <span class="token operator">==</span> user<span class="token punctuation">.</span>AllAuthenticated <span class="token operator">||</span> group <span class="token operator">==</span> user<span class="token punctuation">.</span>AllUnauthenticated <span class="token punctuation">{</span>            <span class="token keyword">return</span> r<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token boolean">nil</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    r<span class="token punctuation">.</span>User <span class="token operator">=</span> <span class="token operator">&amp;</span>user<span class="token punctuation">.</span>DefaultInfo<span class="token punctuation">{</span>        Name<span class="token punctuation">:</span>   r<span class="token punctuation">.</span>User<span class="token punctuation">.</span><span class="token function">GetName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        UID<span class="token punctuation">:</span>    r<span class="token punctuation">.</span>User<span class="token punctuation">.</span><span class="token function">GetUID</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        Groups<span class="token punctuation">:</span> <span class="token function">append</span><span class="token punctuation">(</span>r<span class="token punctuation">.</span>User<span class="token punctuation">.</span><span class="token function">GetGroups</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> user<span class="token punctuation">.</span>AllAuthenticated<span class="token punctuation">)</span><span class="token punctuation">,</span>        Extra<span class="token punctuation">:</span>  r<span class="token punctuation">.</span>User<span class="token punctuation">.</span><span class="token function">GetExtra</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> r<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token boolean">nil</span><span class="token punctuation">}</span></code></pre><p>AuthenticatedGroupAdder 的 <code>AuthenticateRequest()</code> 会调用 unionAuthenticator 的<code>AuthenticateRequest()</code>对请求进行认证，得到 user 信息之后返回。</p><p>关于 Group，定义在<code>kubernetes/staging/src/k8s.io/apiserver/pkg/authentication/user/user.go</code>中，<code>authenticator.New()</code>传入的是AllAuthenticated。</p><p>我们分析一个基本认证</p><pre class=" language-go"><code class="language-go">    <span class="token comment" spellcheck="true">// basic auth</span>    <span class="token keyword">if</span> <span class="token function">len</span><span class="token punctuation">(</span>config<span class="token punctuation">.</span>BasicAuthFile<span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">0</span> <span class="token punctuation">{</span>        basicAuth<span class="token punctuation">,</span> err <span class="token operator">:=</span> <span class="token function">newAuthenticatorFromBasicAuthFile</span><span class="token punctuation">(</span>config<span class="token punctuation">.</span>BasicAuthFile<span class="token punctuation">)</span>        <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> err        <span class="token punctuation">}</span>        authenticators <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>authenticators<span class="token punctuation">,</span> authenticator<span class="token punctuation">.</span><span class="token function">WrapAudienceAgnosticRequest</span><span class="token punctuation">(</span>config<span class="token punctuation">.</span>APIAudiences<span class="token punctuation">,</span> basicAuth<span class="token punctuation">)</span><span class="token punctuation">)</span>        securityDefinitions<span class="token punctuation">[</span><span class="token string">"HTTPBasic"</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">&amp;</span>spec<span class="token punctuation">.</span>SecurityScheme<span class="token punctuation">{</span>            SecuritySchemeProps<span class="token punctuation">:</span> spec<span class="token punctuation">.</span>SecuritySchemeProps<span class="token punctuation">{</span>                Type<span class="token punctuation">:</span>        <span class="token string">"basic"</span><span class="token punctuation">,</span>                Description<span class="token punctuation">:</span> <span class="token string">"HTTP Basic authentication"</span><span class="token punctuation">,</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token operator">...</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token comment" spellcheck="true">// newAuthenticatorFromBasicAuthFile returns an authenticator.Request or an error</span><span class="token keyword">func</span> <span class="token function">newAuthenticatorFromBasicAuthFile</span><span class="token punctuation">(</span>basicAuthFile <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>authenticator<span class="token punctuation">.</span>Request<span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    basicAuthenticator<span class="token punctuation">,</span> err <span class="token operator">:=</span> passwordfile<span class="token punctuation">.</span><span class="token function">NewCSV</span><span class="token punctuation">(</span>basicAuthFile<span class="token punctuation">)</span>    <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> err    <span class="token punctuation">}</span>    <span class="token keyword">return</span> basicauth<span class="token punctuation">.</span><span class="token function">New</span><span class="token punctuation">(</span>basicAuthenticator<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token boolean">nil</span><span class="token punctuation">}</span><span class="token operator">...</span><span class="token keyword">func</span> <span class="token punctuation">(</span>a <span class="token operator">*</span>Authenticator<span class="token punctuation">)</span> <span class="token function">AuthenticateRequest</span><span class="token punctuation">(</span>req <span class="token operator">*</span>http<span class="token punctuation">.</span>Request<span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token operator">*</span>authenticator<span class="token punctuation">.</span>Response<span class="token punctuation">,</span> <span class="token builtin">bool</span><span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    username<span class="token punctuation">,</span> password<span class="token punctuation">,</span> found <span class="token operator">:=</span> req<span class="token punctuation">.</span><span class="token function">BasicAuth</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> <span class="token operator">!</span>found <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token boolean">nil</span>    <span class="token punctuation">}</span>    resp<span class="token punctuation">,</span> ok<span class="token punctuation">,</span> err <span class="token operator">:=</span> a<span class="token punctuation">.</span>auth<span class="token punctuation">.</span><span class="token function">AuthenticatePassword</span><span class="token punctuation">(</span>req<span class="token punctuation">.</span><span class="token function">Context</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> username<span class="token punctuation">,</span> password<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// If the password authenticator didn't error, provide a default error</span>    <span class="token keyword">if</span> <span class="token operator">!</span>ok <span class="token operator">&amp;&amp;</span> err <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>        err <span class="token operator">=</span> errInvalidAuth    <span class="token punctuation">}</span>    <span class="token keyword">return</span> resp<span class="token punctuation">,</span> ok<span class="token punctuation">,</span> err<span class="token punctuation">}</span></code></pre><p>该方法会从请求中获取用户名和密码，然后调用所封装的认证器的AuthenticatePassword()方法进行认证。</p><p><strong>unionAuthenticator</strong></p><p>unionAuthenticator定义在<a href="https://github.com/kubernetes/kubernetes/blob/master/staging/src/k8s.io/apiserver/pkg/authentication/request/union/union.go" target="_blank" rel="noopener">/kubernetes/staging/src/k8s.io/apiserver/pkg/authentication/request/union/union.go</a>:</p><pre class=" language-go"><code class="language-go"><span class="token comment" spellcheck="true">// unionAuthRequestHandler authenticates requests using a chain of authenticator.Requests</span><span class="token keyword">type</span> unionAuthRequestHandler <span class="token keyword">struct</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// Handlers is a chain of request authenticators to delegate to</span>    Handlers <span class="token punctuation">[</span><span class="token punctuation">]</span>authenticator<span class="token punctuation">.</span>Request    <span class="token comment" spellcheck="true">// FailOnError determines whether an error returns short-circuits the chain</span>    FailOnError <span class="token builtin">bool</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// New returns a request authenticator that validates credentials using a chain of authenticator.Request objects.</span><span class="token comment" spellcheck="true">// The entire chain is tried until one succeeds. If all fail, an aggregate error is returned.</span><span class="token keyword">func</span> <span class="token function">New</span><span class="token punctuation">(</span>authRequestHandlers <span class="token operator">...</span>authenticator<span class="token punctuation">.</span>Request<span class="token punctuation">)</span> authenticator<span class="token punctuation">.</span>Request <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token function">len</span><span class="token punctuation">(</span>authRequestHandlers<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">1</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> authRequestHandlers<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token operator">&amp;</span>unionAuthRequestHandler<span class="token punctuation">{</span>Handlers<span class="token punctuation">:</span> authRequestHandlers<span class="token punctuation">,</span> FailOnError<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>unionAuthenticator 的 <code>AuthenticateRequest()</code> 方法定义如下：</p><pre class=" language-go"><code class="language-go"><span class="token comment" spellcheck="true">// 逐个调用 authRequestHandler，如果有一个成功，则返回</span><span class="token keyword">func</span> <span class="token punctuation">(</span>authHandler <span class="token operator">*</span>unionAuthRequestHandler<span class="token punctuation">)</span> <span class="token function">AuthenticateRequest</span><span class="token punctuation">(</span>req <span class="token operator">*</span>http<span class="token punctuation">.</span>Request<span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token operator">*</span>authenticator<span class="token punctuation">.</span>Response<span class="token punctuation">,</span> <span class="token builtin">bool</span><span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> errlist <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">error</span>    <span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> currAuthRequestHandler <span class="token operator">:=</span> <span class="token keyword">range</span> authHandler<span class="token punctuation">.</span>Handlers <span class="token punctuation">{</span>        resp<span class="token punctuation">,</span> ok<span class="token punctuation">,</span> err <span class="token operator">:=</span> currAuthRequestHandler<span class="token punctuation">.</span><span class="token function">AuthenticateRequest</span><span class="token punctuation">(</span>req<span class="token punctuation">)</span>        <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> authHandler<span class="token punctuation">.</span>FailOnError <span class="token punctuation">{</span>                <span class="token keyword">return</span> resp<span class="token punctuation">,</span> ok<span class="token punctuation">,</span> err            <span class="token punctuation">}</span>            errlist <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>errlist<span class="token punctuation">,</span> err<span class="token punctuation">)</span>            <span class="token keyword">continue</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> ok <span class="token punctuation">{</span>            <span class="token keyword">return</span> resp<span class="token punctuation">,</span> ok<span class="token punctuation">,</span> err        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> utilerrors<span class="token punctuation">.</span><span class="token function">NewAggregate</span><span class="token punctuation">(</span>errlist<span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><p><code>AuthenticateRequest()</code>会轮询每一个 authenticator，如果有一个 authenticator 认证成功，则直接返回认证成功。</p><p><strong>对请求进行认证</strong></p><p>调用链：</p><pre><code>main() -&gt; app.NewAPIServerCommand() -&gt; Run() -&gt; CreateServerChain() -&gt; CreateKubeAPIServerConfig() -&gt; buildGenericConfig() -&gt; genericapiserver.NewConfig(legacyscheme.Codecs)-&gt; DefaultBuildHandlerChain()</code></pre><p>代码路径：</p><p><a href="https://github.com/kubernetes/kubernetes/blob/323f34858de18b862d43c40b2cced65ad8e24052/staging/src/k8s.io/apiserver/pkg/server/config.go" target="_blank" rel="noopener">staging/src/k8s.io/apiserver/pkg/server/config.go</a></p><pre class=" language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">DefaultBuildHandlerChain</span><span class="token punctuation">(</span>apiHandler http<span class="token punctuation">.</span>Handler<span class="token punctuation">,</span> c <span class="token operator">*</span>Config<span class="token punctuation">)</span> http<span class="token punctuation">.</span>Handler <span class="token punctuation">{</span>    handler <span class="token operator">:=</span> genericapifilters<span class="token punctuation">.</span><span class="token function">WithAuthorization</span><span class="token punctuation">(</span>apiHandler<span class="token punctuation">,</span> c<span class="token punctuation">.</span>Authorization<span class="token punctuation">.</span>Authorizer<span class="token punctuation">,</span> c<span class="token punctuation">.</span>Serializer<span class="token punctuation">)</span>    <span class="token keyword">if</span> c<span class="token punctuation">.</span>FlowControl <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>        handler <span class="token operator">=</span> genericfilters<span class="token punctuation">.</span><span class="token function">WithPriorityAndFairness</span><span class="token punctuation">(</span>handler<span class="token punctuation">,</span> c<span class="token punctuation">.</span>LongRunningFunc<span class="token punctuation">,</span> c<span class="token punctuation">.</span>FlowControl<span class="token punctuation">)</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        handler <span class="token operator">=</span> genericfilters<span class="token punctuation">.</span><span class="token function">WithMaxInFlightLimit</span><span class="token punctuation">(</span>handler<span class="token punctuation">,</span> c<span class="token punctuation">.</span>MaxRequestsInFlight<span class="token punctuation">,</span> c<span class="token punctuation">.</span>MaxMutatingRequestsInFlight<span class="token punctuation">,</span> c<span class="token punctuation">.</span>LongRunningFunc<span class="token punctuation">)</span>    <span class="token punctuation">}</span>    handler <span class="token operator">=</span> genericapifilters<span class="token punctuation">.</span><span class="token function">WithImpersonation</span><span class="token punctuation">(</span>handler<span class="token punctuation">,</span> c<span class="token punctuation">.</span>Authorization<span class="token punctuation">.</span>Authorizer<span class="token punctuation">,</span> c<span class="token punctuation">.</span>Serializer<span class="token punctuation">)</span>    handler <span class="token operator">=</span> genericapifilters<span class="token punctuation">.</span><span class="token function">WithAudit</span><span class="token punctuation">(</span>handler<span class="token punctuation">,</span> c<span class="token punctuation">.</span>AuditBackend<span class="token punctuation">,</span> c<span class="token punctuation">.</span>AuditPolicyChecker<span class="token punctuation">,</span> c<span class="token punctuation">.</span>LongRunningFunc<span class="token punctuation">)</span>    failedHandler <span class="token operator">:=</span> genericapifilters<span class="token punctuation">.</span><span class="token function">Unauthorized</span><span class="token punctuation">(</span>c<span class="token punctuation">.</span>Serializer<span class="token punctuation">,</span> c<span class="token punctuation">.</span>Authentication<span class="token punctuation">.</span>SupportsBasicAuth<span class="token punctuation">)</span>    failedHandler <span class="token operator">=</span> genericapifilters<span class="token punctuation">.</span><span class="token function">WithFailedAuthenticationAudit</span><span class="token punctuation">(</span>failedHandler<span class="token punctuation">,</span> c<span class="token punctuation">.</span>AuditBackend<span class="token punctuation">,</span> c<span class="token punctuation">.</span>AuditPolicyChecker<span class="token punctuation">)</span>    handler <span class="token operator">=</span> genericapifilters<span class="token punctuation">.</span><span class="token function">WithAuthentication</span><span class="token punctuation">(</span>handler<span class="token punctuation">,</span> c<span class="token punctuation">.</span>Authentication<span class="token punctuation">.</span>Authenticator<span class="token punctuation">,</span> failedHandler<span class="token punctuation">,</span> c<span class="token punctuation">.</span>Authentication<span class="token punctuation">.</span>APIAudiences<span class="token punctuation">)</span>    handler <span class="token operator">=</span> genericfilters<span class="token punctuation">.</span><span class="token function">WithCORS</span><span class="token punctuation">(</span>handler<span class="token punctuation">,</span> c<span class="token punctuation">.</span>CorsAllowedOriginList<span class="token punctuation">,</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> <span class="token string">"true"</span><span class="token punctuation">)</span>    handler <span class="token operator">=</span> genericfilters<span class="token punctuation">.</span><span class="token function">WithTimeoutForNonLongRunningRequests</span><span class="token punctuation">(</span>handler<span class="token punctuation">,</span> c<span class="token punctuation">.</span>LongRunningFunc<span class="token punctuation">,</span> c<span class="token punctuation">.</span>RequestTimeout<span class="token punctuation">)</span>    handler <span class="token operator">=</span> genericfilters<span class="token punctuation">.</span><span class="token function">WithWaitGroup</span><span class="token punctuation">(</span>handler<span class="token punctuation">,</span> c<span class="token punctuation">.</span>LongRunningFunc<span class="token punctuation">,</span> c<span class="token punctuation">.</span>HandlerChainWaitGroup<span class="token punctuation">)</span>    handler <span class="token operator">=</span> genericapifilters<span class="token punctuation">.</span><span class="token function">WithRequestInfo</span><span class="token punctuation">(</span>handler<span class="token punctuation">,</span> c<span class="token punctuation">.</span>RequestInfoResolver<span class="token punctuation">)</span>    <span class="token keyword">if</span> c<span class="token punctuation">.</span>SecureServing <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>c<span class="token punctuation">.</span>SecureServing<span class="token punctuation">.</span>DisableHTTP2 <span class="token operator">&amp;&amp;</span> c<span class="token punctuation">.</span>GoawayChance <span class="token operator">></span> <span class="token number">0</span> <span class="token punctuation">{</span>        handler <span class="token operator">=</span> genericfilters<span class="token punctuation">.</span><span class="token function">WithProbabilisticGoaway</span><span class="token punctuation">(</span>handler<span class="token punctuation">,</span> c<span class="token punctuation">.</span>GoawayChance<span class="token punctuation">)</span>    <span class="token punctuation">}</span>    handler <span class="token operator">=</span> genericfilters<span class="token punctuation">.</span><span class="token function">WithPanicRecovery</span><span class="token punctuation">(</span>handler<span class="token punctuation">)</span>    <span class="token keyword">return</span> handler<span class="token punctuation">}</span></code></pre><p>我们注意到 <code>handler = genericapifilters.WithAuthentication(handler, c.Authentication.Authenticator, failedHandler, c.Authentication.APIAudiences)</code></p><p>代码路径：<a href="https://github.com/kubernetes/kubernetes/blob/323f34858de18b862d43c40b2cced65ad8e24052/staging/src/k8s.io/apiserver/pkg/endpoints/filters/authentication.go" target="_blank" rel="noopener">kubernetes/staging/src/k8s.io/apiserver/pkg/endpoints/filters/authentication.go</a></p><pre class=" language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">WithAuthentication</span><span class="token punctuation">(</span>handler http<span class="token punctuation">.</span>Handler<span class="token punctuation">,</span> auth authenticator<span class="token punctuation">.</span>Request<span class="token punctuation">,</span> failed http<span class="token punctuation">.</span>Handler<span class="token punctuation">,</span> apiAuds authenticator<span class="token punctuation">.</span>Audiences<span class="token punctuation">)</span> http<span class="token punctuation">.</span>Handler <span class="token punctuation">{</span>    <span class="token keyword">if</span> auth <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>        klog<span class="token punctuation">.</span><span class="token function">Warningf</span><span class="token punctuation">(</span><span class="token string">"Authentication is disabled"</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> handler    <span class="token punctuation">}</span>    <span class="token keyword">return</span> http<span class="token punctuation">.</span><span class="token function">HandlerFunc</span><span class="token punctuation">(</span><span class="token keyword">func</span><span class="token punctuation">(</span>w http<span class="token punctuation">.</span>ResponseWriter<span class="token punctuation">,</span> req <span class="token operator">*</span>http<span class="token punctuation">.</span>Request<span class="token punctuation">)</span> <span class="token punctuation">{</span>        authenticationStart <span class="token operator">:=</span> time<span class="token punctuation">.</span><span class="token function">Now</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> <span class="token function">len</span><span class="token punctuation">(</span>apiAuds<span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">0</span> <span class="token punctuation">{</span>            req <span class="token operator">=</span> req<span class="token punctuation">.</span><span class="token function">WithContext</span><span class="token punctuation">(</span>authenticator<span class="token punctuation">.</span><span class="token function">WithAudiences</span><span class="token punctuation">(</span>req<span class="token punctuation">.</span><span class="token function">Context</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> apiAuds<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//  handler中的认证</span>        resp<span class="token punctuation">,</span> ok<span class="token punctuation">,</span> err <span class="token operator">:=</span> auth<span class="token punctuation">.</span><span class="token function">AuthenticateRequest</span><span class="token punctuation">(</span>req<span class="token punctuation">)</span>        <span class="token keyword">defer</span> <span class="token function">recordAuthMetrics</span><span class="token punctuation">(</span>resp<span class="token punctuation">,</span> ok<span class="token punctuation">,</span> err<span class="token punctuation">,</span> apiAuds<span class="token punctuation">,</span> authenticationStart<span class="token punctuation">)</span>        <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token operator">||</span> <span class="token operator">!</span>ok <span class="token punctuation">{</span>            <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>                klog<span class="token punctuation">.</span><span class="token function">Errorf</span><span class="token punctuation">(</span><span class="token string">"Unable to authenticate the request due to an error: %v"</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span>            <span class="token punctuation">}</span>            failed<span class="token punctuation">.</span><span class="token function">ServeHTTP</span><span class="token punctuation">(</span>w<span class="token punctuation">,</span> req<span class="token punctuation">)</span>            <span class="token keyword">return</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token operator">!</span><span class="token function">audiencesAreAcceptable</span><span class="token punctuation">(</span>apiAuds<span class="token punctuation">,</span> resp<span class="token punctuation">.</span>Audiences<span class="token punctuation">)</span> <span class="token punctuation">{</span>            err <span class="token operator">=</span> fmt<span class="token punctuation">.</span><span class="token function">Errorf</span><span class="token punctuation">(</span><span class="token string">"unable to match the audience: %v , accepted: %v"</span><span class="token punctuation">,</span> resp<span class="token punctuation">.</span>Audiences<span class="token punctuation">,</span> apiAuds<span class="token punctuation">)</span>            klog<span class="token punctuation">.</span><span class="token function">Error</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>            failed<span class="token punctuation">.</span><span class="token function">ServeHTTP</span><span class="token punctuation">(</span>w<span class="token punctuation">,</span> req<span class="token punctuation">)</span>            <span class="token keyword">return</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// authorization header is not required anymore in case of a successful authentication.</span>        req<span class="token punctuation">.</span>Header<span class="token punctuation">.</span><span class="token function">Del</span><span class="token punctuation">(</span><span class="token string">"Authorization"</span><span class="token punctuation">)</span>        req <span class="token operator">=</span> req<span class="token punctuation">.</span><span class="token function">WithContext</span><span class="token punctuation">(</span>genericapirequest<span class="token punctuation">.</span><span class="token function">WithUser</span><span class="token punctuation">(</span>req<span class="token punctuation">.</span><span class="token function">Context</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> resp<span class="token punctuation">.</span>User<span class="token punctuation">)</span><span class="token punctuation">)</span>        handler<span class="token punctuation">.</span><span class="token function">ServeHTTP</span><span class="token punctuation">(</span>w<span class="token punctuation">,</span> req<span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><p>其中，http.HandlerFunc 本身就是一个handler。所以<code>WithAuthentication()</code>先调用<code>auth.AuthenticateRequest()</code>对请求进行验证，然后调用前handler的<code>ServeHTTP()</code>对请求接着作处理，以达到在处理前进行认证的目的。</p><h4 id="Authorization"><a href="#Authorization" class="headerlink" title="Authorization"></a>Authorization</h4><p>Authorization 负责 Kubernetes 中对请求进行授权，只有通过授权的请求才会被执行。在Kubernetes中，主要有ABAC(Attributes Based Access Control)，RBAC(Role Based Access Contro)，AlwaysAllow，AlwaysDeny和Webhook(调用网络接口进行授权)这几种授权器。我们来看下 Kubernetes 是如何管理授权器的，及如何对请求进行授权。</p><p>调用链：</p><pre class=" language-go"><code class="language-go"><span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> app<span class="token punctuation">.</span><span class="token function">NewAPIServerCommand</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token function">Run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token function">CreateServerChain</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token function">CreateKubeAPIServerConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token function">buildGenericConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token function">BuildAuthorizer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span> authorizationConfig<span class="token punctuation">.</span><span class="token function">New</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p>代码路径：</p><p><a href="https://github.com/kubernetes/kubernetes/blob/323f34858de18b862d43c40b2cced65ad8e24052/pkg/kubeapiserver/authorizer/config.go" target="_blank" rel="noopener">kubernetes/pkg/kubeapiserver/authorizer/config.go </a></p><pre class=" language-go"><code class="language-go"><span class="token comment" spellcheck="true">// New returns the right sort of union of multiple authorizer.Authorizer objects</span><span class="token comment" spellcheck="true">// based on the authorizationMode or an error.</span><span class="token keyword">func</span> <span class="token punctuation">(</span>config Config<span class="token punctuation">)</span> <span class="token function">New</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>authorizer<span class="token punctuation">.</span>Authorizer<span class="token punctuation">,</span> authorizer<span class="token punctuation">.</span>RuleResolver<span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token function">len</span><span class="token punctuation">(</span>config<span class="token punctuation">.</span>AuthorizationModes<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> fmt<span class="token punctuation">.</span><span class="token function">Errorf</span><span class="token punctuation">(</span><span class="token string">"at least one authorization mode must be passed"</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token keyword">var</span> <span class="token punctuation">(</span>        authorizers   <span class="token punctuation">[</span><span class="token punctuation">]</span>authorizer<span class="token punctuation">.</span>Authorizer        ruleResolvers <span class="token punctuation">[</span><span class="token punctuation">]</span>authorizer<span class="token punctuation">.</span>RuleResolver    <span class="token punctuation">)</span>    <span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> authorizationMode <span class="token operator">:=</span> <span class="token keyword">range</span> config<span class="token punctuation">.</span>AuthorizationModes <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// Keep cases in sync with constant list in k8s.io/kubernetes/pkg/kubeapiserver/authorizer/modes/modes.go.</span>        <span class="token keyword">switch</span> authorizationMode <span class="token punctuation">{</span>        <span class="token keyword">case</span> modes<span class="token punctuation">.</span>ModeNode<span class="token punctuation">:</span>            graph <span class="token operator">:=</span> node<span class="token punctuation">.</span><span class="token function">NewGraph</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            node<span class="token punctuation">.</span><span class="token function">AddGraphEventHandlers</span><span class="token punctuation">(</span>                graph<span class="token punctuation">,</span>                config<span class="token punctuation">.</span>VersionedInformerFactory<span class="token punctuation">.</span><span class="token function">Core</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">V1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Nodes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                config<span class="token punctuation">.</span>VersionedInformerFactory<span class="token punctuation">.</span><span class="token function">Core</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">V1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Pods</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                config<span class="token punctuation">.</span>VersionedInformerFactory<span class="token punctuation">.</span><span class="token function">Core</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">V1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">PersistentVolumes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                config<span class="token punctuation">.</span>VersionedInformerFactory<span class="token punctuation">.</span><span class="token function">Storage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">V1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">VolumeAttachments</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token punctuation">)</span>            nodeAuthorizer <span class="token operator">:=</span> node<span class="token punctuation">.</span><span class="token function">NewAuthorizer</span><span class="token punctuation">(</span>graph<span class="token punctuation">,</span> nodeidentifier<span class="token punctuation">.</span><span class="token function">NewDefaultNodeIdentifier</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> bootstrappolicy<span class="token punctuation">.</span><span class="token function">NodeRules</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            authorizers <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>authorizers<span class="token punctuation">,</span> nodeAuthorizer<span class="token punctuation">)</span>        <span class="token keyword">case</span> modes<span class="token punctuation">.</span>ModeAlwaysAllow<span class="token punctuation">:</span>            alwaysAllowAuthorizer <span class="token operator">:=</span> authorizerfactory<span class="token punctuation">.</span><span class="token function">NewAlwaysAllowAuthorizer</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            authorizers <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>authorizers<span class="token punctuation">,</span> alwaysAllowAuthorizer<span class="token punctuation">)</span>            ruleResolvers <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>ruleResolvers<span class="token punctuation">,</span> alwaysAllowAuthorizer<span class="token punctuation">)</span>        <span class="token keyword">case</span> modes<span class="token punctuation">.</span>ModeAlwaysDeny<span class="token punctuation">:</span>            alwaysDenyAuthorizer <span class="token operator">:=</span> authorizerfactory<span class="token punctuation">.</span><span class="token function">NewAlwaysDenyAuthorizer</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            authorizers <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>authorizers<span class="token punctuation">,</span> alwaysDenyAuthorizer<span class="token punctuation">)</span>            ruleResolvers <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>ruleResolvers<span class="token punctuation">,</span> alwaysDenyAuthorizer<span class="token punctuation">)</span>        <span class="token keyword">case</span> modes<span class="token punctuation">.</span>ModeABAC<span class="token punctuation">:</span>            abacAuthorizer<span class="token punctuation">,</span> err <span class="token operator">:=</span> abac<span class="token punctuation">.</span><span class="token function">NewFromFile</span><span class="token punctuation">(</span>config<span class="token punctuation">.</span>PolicyFile<span class="token punctuation">)</span>            <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> err            <span class="token punctuation">}</span>            authorizers <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>authorizers<span class="token punctuation">,</span> abacAuthorizer<span class="token punctuation">)</span>            ruleResolvers <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>ruleResolvers<span class="token punctuation">,</span> abacAuthorizer<span class="token punctuation">)</span>        <span class="token keyword">case</span> modes<span class="token punctuation">.</span>ModeWebhook<span class="token punctuation">:</span>            webhookAuthorizer<span class="token punctuation">,</span> err <span class="token operator">:=</span> webhook<span class="token punctuation">.</span><span class="token function">New</span><span class="token punctuation">(</span>config<span class="token punctuation">.</span>WebhookConfigFile<span class="token punctuation">,</span>                config<span class="token punctuation">.</span>WebhookVersion<span class="token punctuation">,</span>                config<span class="token punctuation">.</span>WebhookCacheAuthorizedTTL<span class="token punctuation">,</span>                config<span class="token punctuation">.</span>WebhookCacheUnauthorizedTTL<span class="token punctuation">,</span>                config<span class="token punctuation">.</span>CustomDial<span class="token punctuation">)</span>            <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> err            <span class="token punctuation">}</span>            authorizers <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>authorizers<span class="token punctuation">,</span> webhookAuthorizer<span class="token punctuation">)</span>            ruleResolvers <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>ruleResolvers<span class="token punctuation">,</span> webhookAuthorizer<span class="token punctuation">)</span>        <span class="token keyword">case</span> modes<span class="token punctuation">.</span>ModeRBAC<span class="token punctuation">:</span>            rbacAuthorizer <span class="token operator">:=</span> rbac<span class="token punctuation">.</span><span class="token function">New</span><span class="token punctuation">(</span>                <span class="token operator">&amp;</span>rbac<span class="token punctuation">.</span>RoleGetter<span class="token punctuation">{</span>Lister<span class="token punctuation">:</span> config<span class="token punctuation">.</span>VersionedInformerFactory<span class="token punctuation">.</span><span class="token function">Rbac</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">V1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Roles</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Lister</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">,</span>                <span class="token operator">&amp;</span>rbac<span class="token punctuation">.</span>RoleBindingLister<span class="token punctuation">{</span>Lister<span class="token punctuation">:</span> config<span class="token punctuation">.</span>VersionedInformerFactory<span class="token punctuation">.</span><span class="token function">Rbac</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">V1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">RoleBindings</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Lister</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">,</span>                <span class="token operator">&amp;</span>rbac<span class="token punctuation">.</span>ClusterRoleGetter<span class="token punctuation">{</span>Lister<span class="token punctuation">:</span> config<span class="token punctuation">.</span>VersionedInformerFactory<span class="token punctuation">.</span><span class="token function">Rbac</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">V1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ClusterRoles</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Lister</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">,</span>                <span class="token operator">&amp;</span>rbac<span class="token punctuation">.</span>ClusterRoleBindingLister<span class="token punctuation">{</span>Lister<span class="token punctuation">:</span> config<span class="token punctuation">.</span>VersionedInformerFactory<span class="token punctuation">.</span><span class="token function">Rbac</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">V1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ClusterRoleBindings</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Lister</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">,</span>            <span class="token punctuation">)</span>            authorizers <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>authorizers<span class="token punctuation">,</span> rbacAuthorizer<span class="token punctuation">)</span>            ruleResolvers <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>ruleResolvers<span class="token punctuation">,</span> rbacAuthorizer<span class="token punctuation">)</span>        <span class="token keyword">default</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> fmt<span class="token punctuation">.</span><span class="token function">Errorf</span><span class="token punctuation">(</span><span class="token string">"unknown authorization mode %s specified"</span><span class="token punctuation">,</span> authorizationMode<span class="token punctuation">)</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> union<span class="token punctuation">.</span><span class="token function">New</span><span class="token punctuation">(</span>authorizers<span class="token operator">...</span><span class="token punctuation">)</span><span class="token punctuation">,</span> union<span class="token punctuation">.</span><span class="token function">NewRuleResolvers</span><span class="token punctuation">(</span>ruleResolvers<span class="token operator">...</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token boolean">nil</span><span class="token punctuation">}</span></code></pre><p>在 kube-apiserver 的参数中，有<code>–authorization-mode</code>参数，授权器就是根据<code>–authorization-mode</code>参数中指定的内容来生成的。</p><p>New() 会依据 authorizationModes 生成相应的 authorizer，并把多个 authorizers 打包成 unionAuthorizer 返回。最后 server.go 中生成的 apiAuthorizer 会赋值给 genericConfig.Authorizer 以生成 master。</p><p>代码路径：</p><p><a href="https://github.com/kubernetes/kubernetes/blob/ca324214be0c3823b309a145b876bbb79ccd742a/cmd/kube-apiserver/app/server.go" target="_blank" rel="noopener">kubernetes/cmd/kube-apiserver/app/server.go</a></p><pre class=" language-go"><code class="language-go">genericConfig<span class="token punctuation">.</span>Authorization<span class="token punctuation">.</span>Authorizer<span class="token punctuation">,</span> genericConfig<span class="token punctuation">.</span>RuleResolver<span class="token punctuation">,</span> err <span class="token operator">=</span> <span class="token function">BuildAuthorizer</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> genericConfig<span class="token punctuation">.</span>EgressSelector<span class="token punctuation">,</span> versionedInformers<span class="token punctuation">)</span></code></pre><p><strong>unionAuthorizer</strong></p><p>代码路径：<a href="https://github.com/kubernetes/kubernetes/blob/327f53ba57aeaa4b7e7c20b1ef98c42b26b7ea7f/staging/src/k8s.io/apiserver/pkg/authorization/union/union.go" target="_blank" rel="noopener">kubernetes/staging/src/k8s.io/apiserver/pkg/authorization/union/union.go</a></p><pre class=" language-go"><code class="language-go"><span class="token comment" spellcheck="true">// unionAuthzHandler authorizer against a chain of authorizer.Authorizer</span><span class="token keyword">type</span> unionAuthzHandler <span class="token punctuation">[</span><span class="token punctuation">]</span>authorizer<span class="token punctuation">.</span>Authorizer<span class="token comment" spellcheck="true">// New returns an authorizer that authorizes against a chain of authorizer.Authorizer objects</span><span class="token keyword">func</span> <span class="token function">New</span><span class="token punctuation">(</span>authorizationHandlers <span class="token operator">...</span>authorizer<span class="token punctuation">.</span>Authorizer<span class="token punctuation">)</span> authorizer<span class="token punctuation">.</span>Authorizer <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token function">unionAuthzHandler</span><span class="token punctuation">(</span>authorizationHandlers<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// Authorizes against a chain of authorizer.Authorizer objects and returns nil if successful and returns error if unsuccessful</span><span class="token keyword">func</span> <span class="token punctuation">(</span>authzHandler unionAuthzHandler<span class="token punctuation">)</span> <span class="token function">Authorize</span><span class="token punctuation">(</span>ctx context<span class="token punctuation">.</span>Context<span class="token punctuation">,</span> a authorizer<span class="token punctuation">.</span>Attributes<span class="token punctuation">)</span> <span class="token punctuation">(</span>authorizer<span class="token punctuation">.</span>Decision<span class="token punctuation">,</span> <span class="token builtin">string</span><span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> <span class="token punctuation">(</span>        errlist    <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">error</span>        reasonlist <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span>    <span class="token punctuation">)</span>    <span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> currAuthzHandler <span class="token operator">:=</span> <span class="token keyword">range</span> authzHandler <span class="token punctuation">{</span>        decision<span class="token punctuation">,</span> reason<span class="token punctuation">,</span> err <span class="token operator">:=</span> currAuthzHandler<span class="token punctuation">.</span><span class="token function">Authorize</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> a<span class="token punctuation">)</span>        <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>            errlist <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>errlist<span class="token punctuation">,</span> err<span class="token punctuation">)</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token function">len</span><span class="token punctuation">(</span>reason<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span> <span class="token punctuation">{</span>            reasonlist <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>reasonlist<span class="token punctuation">,</span> reason<span class="token punctuation">)</span>        <span class="token punctuation">}</span>        <span class="token keyword">switch</span> decision <span class="token punctuation">{</span>        <span class="token keyword">case</span> authorizer<span class="token punctuation">.</span>DecisionAllow<span class="token punctuation">,</span> authorizer<span class="token punctuation">.</span>DecisionDeny<span class="token punctuation">:</span>            <span class="token keyword">return</span> decision<span class="token punctuation">,</span> reason<span class="token punctuation">,</span> err        <span class="token keyword">case</span> authorizer<span class="token punctuation">.</span>DecisionNoOpinion<span class="token punctuation">:</span>            <span class="token comment" spellcheck="true">// continue to the next authorizer</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> authorizer<span class="token punctuation">.</span>DecisionNoOpinion<span class="token punctuation">,</span> strings<span class="token punctuation">.</span><span class="token function">Join</span><span class="token punctuation">(</span>reasonlist<span class="token punctuation">,</span> <span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> utilerrors<span class="token punctuation">.</span><span class="token function">NewAggregate</span><span class="token punctuation">(</span>errlist<span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><p>unionAuthorizer 本身是一个 Authorizer 列表，其Authorize() 方法会调用列表中每一个 Authorizer 的Authorize() 方法，一旦有一个 Authorizer 授权通过，则 unionAuthorizer 的授权通过。</p><h5 id="ABAC授权器"><a href="#ABAC授权器" class="headerlink" title="ABAC授权器"></a><strong>ABAC授权器</strong></h5><p>ABAC是基于属性的访问控制，目前ABAC支持apiVersion, kind, spec, namespace, resource等属性。ABAC规则需要保存在文件中：</p><pre class=" language-json"><code class="language-json"><span class="token punctuation">{</span><span class="token property">"apiVersion"</span><span class="token operator">:</span> <span class="token string">"abac.authorization.kubernetes.io/v1beta1"</span><span class="token punctuation">,</span> <span class="token property">"kind"</span><span class="token operator">:</span> <span class="token string">"Policy"</span><span class="token punctuation">,</span> <span class="token property">"spec"</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token property">"group"</span><span class="token operator">:</span><span class="token string">"system:authenticated"</span><span class="token punctuation">,</span>  <span class="token property">"nonResourcePath"</span><span class="token operator">:</span> <span class="token string">"*"</span><span class="token punctuation">,</span> <span class="token property">"readonly"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">{</span><span class="token property">"apiVersion"</span><span class="token operator">:</span> <span class="token string">"abac.authorization.kubernetes.io/v1beta1"</span><span class="token punctuation">,</span> <span class="token property">"kind"</span><span class="token operator">:</span> <span class="token string">"Policy"</span><span class="token punctuation">,</span> <span class="token property">"spec"</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token property">"group"</span><span class="token operator">:</span><span class="token string">"system:unauthenticated"</span><span class="token punctuation">,</span> <span class="token property">"nonResourcePath"</span><span class="token operator">:</span> <span class="token string">"*"</span><span class="token punctuation">,</span> <span class="token property">"readonly"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">{</span><span class="token property">"apiVersion"</span><span class="token operator">:</span> <span class="token string">"abac.authorization.kubernetes.io/v1beta1"</span><span class="token punctuation">,</span> <span class="token property">"kind"</span><span class="token operator">:</span> <span class="token string">"Policy"</span><span class="token punctuation">,</span> <span class="token property">"spec"</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token property">"user"</span><span class="token operator">:</span><span class="token string">"admin"</span><span class="token punctuation">,</span>     <span class="token property">"namespace"</span><span class="token operator">:</span> <span class="token string">"*"</span><span class="token punctuation">,</span>              <span class="token property">"resource"</span><span class="token operator">:</span> <span class="token string">"*"</span><span class="token punctuation">,</span>         <span class="token property">"apiGroup"</span><span class="token operator">:</span> <span class="token string">"*"</span>                   <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">{</span><span class="token property">"apiVersion"</span><span class="token operator">:</span> <span class="token string">"abac.authorization.kubernetes.io/v1beta1"</span><span class="token punctuation">,</span> <span class="token property">"kind"</span><span class="token operator">:</span> <span class="token string">"Policy"</span><span class="token punctuation">,</span> <span class="token property">"spec"</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token property">"user"</span><span class="token operator">:</span><span class="token string">"scheduler"</span><span class="token punctuation">,</span> <span class="token property">"namespace"</span><span class="token operator">:</span> <span class="token string">"*"</span><span class="token punctuation">,</span>              <span class="token property">"resource"</span><span class="token operator">:</span> <span class="token string">"pods"</span><span class="token punctuation">,</span>                       <span class="token property">"readonly"</span><span class="token operator">:</span> <span class="token boolean">true</span> <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">{</span><span class="token property">"apiVersion"</span><span class="token operator">:</span> <span class="token string">"abac.authorization.kubernetes.io/v1beta1"</span><span class="token punctuation">,</span> <span class="token property">"kind"</span><span class="token operator">:</span> <span class="token string">"Policy"</span><span class="token punctuation">,</span> <span class="token property">"spec"</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token property">"user"</span><span class="token operator">:</span><span class="token string">"scheduler"</span><span class="token punctuation">,</span> <span class="token property">"namespace"</span><span class="token operator">:</span> <span class="token string">"*"</span><span class="token punctuation">,</span>              <span class="token property">"resource"</span><span class="token operator">:</span> <span class="token string">"bindings"</span>                                     <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">{</span><span class="token property">"apiVersion"</span><span class="token operator">:</span> <span class="token string">"abac.authorization.kubernetes.io/v1beta1"</span><span class="token punctuation">,</span> <span class="token property">"kind"</span><span class="token operator">:</span> <span class="token string">"Policy"</span><span class="token punctuation">,</span> <span class="token property">"spec"</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token property">"user"</span><span class="token operator">:</span><span class="token string">"kubelet"</span><span class="token punctuation">,</span>   <span class="token property">"namespace"</span><span class="token operator">:</span> <span class="token string">"*"</span><span class="token punctuation">,</span>              <span class="token property">"resource"</span><span class="token operator">:</span> <span class="token string">"pods"</span><span class="token punctuation">,</span>                       <span class="token property">"readonly"</span><span class="token operator">:</span> <span class="token boolean">true</span> <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">{</span><span class="token property">"apiVersion"</span><span class="token operator">:</span> <span class="token string">"abac.authorization.kubernetes.io/v1beta1"</span><span class="token punctuation">,</span> <span class="token property">"kind"</span><span class="token operator">:</span> <span class="token string">"Policy"</span><span class="token punctuation">,</span> <span class="token property">"spec"</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token property">"user"</span><span class="token operator">:</span><span class="token string">"kubelet"</span><span class="token punctuation">,</span>   <span class="token property">"namespace"</span><span class="token operator">:</span> <span class="token string">"*"</span><span class="token punctuation">,</span>              <span class="token property">"resource"</span><span class="token operator">:</span> <span class="token string">"services"</span><span class="token punctuation">,</span>                   <span class="token property">"readonly"</span><span class="token operator">:</span> <span class="token boolean">true</span> <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">{</span><span class="token property">"apiVersion"</span><span class="token operator">:</span> <span class="token string">"abac.authorization.kubernetes.io/v1beta1"</span><span class="token punctuation">,</span> <span class="token property">"kind"</span><span class="token operator">:</span> <span class="token string">"Policy"</span><span class="token punctuation">,</span> <span class="token property">"spec"</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token property">"user"</span><span class="token operator">:</span><span class="token string">"kubelet"</span><span class="token punctuation">,</span>   <span class="token property">"namespace"</span><span class="token operator">:</span> <span class="token string">"*"</span><span class="token punctuation">,</span>              <span class="token property">"resource"</span><span class="token operator">:</span> <span class="token string">"endpoints"</span><span class="token punctuation">,</span>                  <span class="token property">"readonly"</span><span class="token operator">:</span> <span class="token boolean">true</span> <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">{</span><span class="token property">"apiVersion"</span><span class="token operator">:</span> <span class="token string">"abac.authorization.kubernetes.io/v1beta1"</span><span class="token punctuation">,</span> <span class="token property">"kind"</span><span class="token operator">:</span> <span class="token string">"Policy"</span><span class="token punctuation">,</span> <span class="token property">"spec"</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token property">"user"</span><span class="token operator">:</span><span class="token string">"kubelet"</span><span class="token punctuation">,</span>   <span class="token property">"namespace"</span><span class="token operator">:</span> <span class="token string">"*"</span><span class="token punctuation">,</span>              <span class="token property">"resource"</span><span class="token operator">:</span> <span class="token string">"events"</span>                                       <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">{</span><span class="token property">"apiVersion"</span><span class="token operator">:</span> <span class="token string">"abac.authorization.kubernetes.io/v1beta1"</span><span class="token punctuation">,</span> <span class="token property">"kind"</span><span class="token operator">:</span> <span class="token string">"Policy"</span><span class="token punctuation">,</span> <span class="token property">"spec"</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token property">"user"</span><span class="token operator">:</span><span class="token string">"alice"</span><span class="token punctuation">,</span>     <span class="token property">"namespace"</span><span class="token operator">:</span> <span class="token string">"projectCaribou"</span><span class="token punctuation">,</span> <span class="token property">"resource"</span><span class="token operator">:</span> <span class="token string">"*"</span><span class="token punctuation">,</span>         <span class="token property">"apiGroup"</span><span class="token operator">:</span> <span class="token string">"*"</span>                   <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">{</span><span class="token property">"apiVersion"</span><span class="token operator">:</span> <span class="token string">"abac.authorization.kubernetes.io/v1beta1"</span><span class="token punctuation">,</span> <span class="token property">"kind"</span><span class="token operator">:</span> <span class="token string">"Policy"</span><span class="token punctuation">,</span> <span class="token property">"spec"</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token property">"user"</span><span class="token operator">:</span><span class="token string">"bob"</span><span class="token punctuation">,</span>       <span class="token property">"namespace"</span><span class="token operator">:</span> <span class="token string">"projectCaribou"</span><span class="token punctuation">,</span> <span class="token property">"resource"</span><span class="token operator">:</span> <span class="token string">"*"</span><span class="token punctuation">,</span>         <span class="token property">"apiGroup"</span><span class="token operator">:</span> <span class="token string">"*"</span><span class="token punctuation">,</span> <span class="token property">"readonly"</span><span class="token operator">:</span> <span class="token boolean">true</span> <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>ABAC授权器定义在<code>kubernetes/pkg/auth/authorizer/abac/abac.go</code>中：</p><pre class=" language-go"><code class="language-go"><span class="token keyword">type</span> PolicyList <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">*</span>abac<span class="token punctuation">.</span>Policy<span class="token comment" spellcheck="true">// 从policy文件构建plicylist</span><span class="token keyword">func</span> <span class="token function">NewFromFile</span><span class="token punctuation">(</span>path <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>PolicyList<span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    file<span class="token punctuation">,</span> err <span class="token operator">:=</span> os<span class="token punctuation">.</span><span class="token function">Open</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span>    <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> err    <span class="token punctuation">}</span>    <span class="token keyword">defer</span> file<span class="token punctuation">.</span><span class="token function">Close</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    scanner <span class="token operator">:=</span> bufio<span class="token punctuation">.</span><span class="token function">NewScanner</span><span class="token punctuation">(</span>file<span class="token punctuation">)</span>    pl <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span>PolicyList<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>    decoder <span class="token operator">:=</span> abac<span class="token punctuation">.</span>Codecs<span class="token punctuation">.</span><span class="token function">UniversalDecoder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    i <span class="token operator">:=</span> <span class="token number">0</span>    unversionedLines <span class="token operator">:=</span> <span class="token number">0</span>    <span class="token keyword">for</span> scanner<span class="token punctuation">.</span><span class="token function">Scan</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        i<span class="token operator">++</span>        p <span class="token operator">:=</span> <span class="token operator">&amp;</span>abac<span class="token punctuation">.</span>Policy<span class="token punctuation">{</span><span class="token punctuation">}</span>        b <span class="token operator">:=</span> scanner<span class="token punctuation">.</span><span class="token function">Bytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">// skip comment lines and blank lines</span>        trimmed <span class="token operator">:=</span> strings<span class="token punctuation">.</span><span class="token function">TrimSpace</span><span class="token punctuation">(</span><span class="token function">string</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> <span class="token function">len</span><span class="token punctuation">(</span>trimmed<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">||</span> strings<span class="token punctuation">.</span><span class="token function">HasPrefix</span><span class="token punctuation">(</span>trimmed<span class="token punctuation">,</span> <span class="token string">"#"</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">continue</span>        <span class="token punctuation">}</span>        decodedObj<span class="token punctuation">,</span> <span class="token boolean">_</span><span class="token punctuation">,</span> err <span class="token operator">:=</span> decoder<span class="token punctuation">.</span><span class="token function">Decode</span><span class="token punctuation">(</span>b<span class="token punctuation">,</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> <span class="token boolean">nil</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token operator">!</span><span class="token punctuation">(</span>runtime<span class="token punctuation">.</span><span class="token function">IsMissingVersion</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token operator">||</span> runtime<span class="token punctuation">.</span><span class="token function">IsMissingKind</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token operator">||</span> runtime<span class="token punctuation">.</span><span class="token function">IsNotRegisteredError</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> policyLoadError<span class="token punctuation">{</span>path<span class="token punctuation">,</span> i<span class="token punctuation">,</span> b<span class="token punctuation">,</span> err<span class="token punctuation">}</span>            <span class="token punctuation">}</span>            unversionedLines<span class="token operator">++</span>            <span class="token comment" spellcheck="true">// Migrate unversioned policy object</span>            oldPolicy <span class="token operator">:=</span> <span class="token operator">&amp;</span>v0<span class="token punctuation">.</span>Policy<span class="token punctuation">{</span><span class="token punctuation">}</span>            <span class="token keyword">if</span> err <span class="token operator">:=</span> runtime<span class="token punctuation">.</span><span class="token function">DecodeInto</span><span class="token punctuation">(</span>decoder<span class="token punctuation">,</span> b<span class="token punctuation">,</span> oldPolicy<span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> policyLoadError<span class="token punctuation">{</span>path<span class="token punctuation">,</span> i<span class="token punctuation">,</span> b<span class="token punctuation">,</span> err<span class="token punctuation">}</span>            <span class="token punctuation">}</span>            <span class="token keyword">if</span> err <span class="token operator">:=</span> abac<span class="token punctuation">.</span>Scheme<span class="token punctuation">.</span><span class="token function">Convert</span><span class="token punctuation">(</span>oldPolicy<span class="token punctuation">,</span> p<span class="token punctuation">,</span> <span class="token boolean">nil</span><span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> policyLoadError<span class="token punctuation">{</span>path<span class="token punctuation">,</span> i<span class="token punctuation">,</span> b<span class="token punctuation">,</span> err<span class="token punctuation">}</span>            <span class="token punctuation">}</span>            pl <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>pl<span class="token punctuation">,</span> p<span class="token punctuation">)</span>            <span class="token keyword">continue</span>        <span class="token punctuation">}</span>        decodedPolicy<span class="token punctuation">,</span> ok <span class="token operator">:=</span> decodedObj<span class="token punctuation">.</span><span class="token punctuation">(</span><span class="token operator">*</span>abac<span class="token punctuation">.</span>Policy<span class="token punctuation">)</span>        <span class="token keyword">if</span> <span class="token operator">!</span>ok <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> policyLoadError<span class="token punctuation">{</span>path<span class="token punctuation">,</span> i<span class="token punctuation">,</span> b<span class="token punctuation">,</span> fmt<span class="token punctuation">.</span><span class="token function">Errorf</span><span class="token punctuation">(</span><span class="token string">"unrecognized object: %#v"</span><span class="token punctuation">,</span> decodedObj<span class="token punctuation">)</span><span class="token punctuation">}</span>        <span class="token punctuation">}</span>        pl <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>pl<span class="token punctuation">,</span> decodedPolicy<span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> unversionedLines <span class="token operator">></span> <span class="token number">0</span> <span class="token punctuation">{</span>        klog<span class="token punctuation">.</span><span class="token function">Warningf</span><span class="token punctuation">(</span><span class="token string">"Policy file %s contained unversioned rules. See docs/admin/authorization.md#abac-mode for ABAC file format details."</span><span class="token punctuation">,</span> path<span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> err <span class="token operator">:=</span> scanner<span class="token punctuation">.</span><span class="token function">Err</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> policyLoadError<span class="token punctuation">{</span>path<span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> err<span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> pl<span class="token punctuation">,</span> <span class="token boolean">nil</span><span class="token punctuation">}</span></code></pre><p><code>NewFromFile()</code>读取 ABAC policy 文件，然后构建 policyList，并返回。<br>policyList 类型实现了<code>Authorize()</code>方法:</p><pre class=" language-go"><code class="language-go"><span class="token comment" spellcheck="true">// Authorize implements authorizer.Authorize</span><span class="token keyword">func</span> <span class="token punctuation">(</span>pl PolicyList<span class="token punctuation">)</span> <span class="token function">Authorize</span><span class="token punctuation">(</span>ctx context<span class="token punctuation">.</span>Context<span class="token punctuation">,</span> a authorizer<span class="token punctuation">.</span>Attributes<span class="token punctuation">)</span> <span class="token punctuation">(</span>authorizer<span class="token punctuation">.</span>Decision<span class="token punctuation">,</span> <span class="token builtin">string</span><span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> p <span class="token operator">:=</span> <span class="token keyword">range</span> pl <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token function">matches</span><span class="token punctuation">(</span><span class="token operator">*</span>p<span class="token punctuation">,</span> a<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> authorizer<span class="token punctuation">.</span>DecisionAllow<span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">,</span> <span class="token boolean">nil</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> authorizer<span class="token punctuation">.</span>DecisionNoOpinion<span class="token punctuation">,</span> <span class="token string">"No policy matched."</span><span class="token punctuation">,</span> <span class="token boolean">nil</span>    <span class="token comment" spellcheck="true">// TODO: Benchmark how much time policy matching takes with a medium size</span>    <span class="token comment" spellcheck="true">// policy file, compared to other steps such as encoding/decoding.</span>    <span class="token comment" spellcheck="true">// Then, add Caching only if needed.</span><span class="token punctuation">}</span></code></pre><p><code>Authorize()</code>方法会使用 policyList 中每一条 policy 去匹配请求。如果匹配到，则直接通过；否则不通过。</p><p>再来看下匹配函数<code>matches()</code>：</p><pre class=" language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">matches</span><span class="token punctuation">(</span>p abac<span class="token punctuation">.</span>Policy<span class="token punctuation">,</span> a authorizer<span class="token punctuation">.</span>Attributes<span class="token punctuation">)</span> <span class="token builtin">bool</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token function">subjectMatches</span><span class="token punctuation">(</span>p<span class="token punctuation">,</span> a<span class="token punctuation">.</span><span class="token function">GetUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token function">verbMatches</span><span class="token punctuation">(</span>p<span class="token punctuation">,</span> a<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// Resource and non-resource requests are mutually exclusive, at most one will match a policy</span>            <span class="token keyword">if</span> <span class="token function">resourceMatches</span><span class="token punctuation">(</span>p<span class="token punctuation">,</span> a<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> <span class="token boolean">true</span>            <span class="token punctuation">}</span>            <span class="token keyword">if</span> <span class="token function">nonResourceMatches</span><span class="token punctuation">(</span>p<span class="token punctuation">,</span> a<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> <span class="token boolean">true</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">}</span></code></pre><p><code>matches()</code>会执行<code>subjectMatches()</code>，<code>verbMatches()</code>及<code>resourceMatches()</code>或<code>nonResourceMatches()</code>。</p><h5 id="RBAC授权器"><a href="#RBAC授权器" class="headerlink" title="RBAC授权器"></a>RBAC授权器</h5><p>RBAC是指基于角色的访问控制。可以把用户和角色相关联，从而获取用户拥有的权限。首先来看下角色，在Kubernetes中，有两种类型的角色，一种是namespaced的角色；另一种是全局的角色。<br>namespaced 的角色Yaml文件如下：</p><pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">kind</span><span class="token punctuation">:</span> Role<span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> rbac.authorization.k8s.io/v1beta1<span class="token key atrule">metadata</span><span class="token punctuation">:</span>  <span class="token key atrule">namespace</span><span class="token punctuation">:</span> default  <span class="token key atrule">name</span><span class="token punctuation">:</span> pod<span class="token punctuation">-</span>reader<span class="token key atrule">rules</span><span class="token punctuation">:</span><span class="token punctuation">-</span> <span class="token key atrule">apiGroups</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">""</span><span class="token punctuation">]</span> <span class="token comment" spellcheck="true"># "" indicates the core API group</span>  <span class="token key atrule">resources</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">"pods"</span><span class="token punctuation">]</span>  <span class="token key atrule">verbs</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">"get"</span><span class="token punctuation">,</span> <span class="token string">"watch"</span><span class="token punctuation">,</span> <span class="token string">"list"</span><span class="token punctuation">]</span></code></pre><p>全局的角色Yaml文件如下：</p><pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">kind</span><span class="token punctuation">:</span> ClusterRole<span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> rbac.authorization.k8s.io/v1beta1<span class="token key atrule">metadata</span><span class="token punctuation">:</span>  <span class="token comment" spellcheck="true"># "namespace" omitted since ClusterRoles are not namespaced</span>  <span class="token key atrule">name</span><span class="token punctuation">:</span> secret<span class="token punctuation">-</span>reader<span class="token key atrule">rules</span><span class="token punctuation">:</span><span class="token punctuation">-</span> <span class="token key atrule">apiGroups</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">""</span><span class="token punctuation">]</span>  <span class="token key atrule">resources</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">"secrets"</span><span class="token punctuation">]</span>  <span class="token key atrule">verbs</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">"get"</span><span class="token punctuation">,</span> <span class="token string">"watch"</span><span class="token punctuation">,</span> <span class="token string">"list"</span><span class="token punctuation">]</span></code></pre><p>一个角色对应着多条的规则。</p><p>当然，还需要一种机制关联角色和用户。这就是RoleBinding和ClusterRoleBinding。例子(表示把User jane绑定到Role pod-reader上)如下：</p><pre class=" language-yaml"><code class="language-yaml"><span class="token comment" spellcheck="true"># This role binding allows "jane" to read pods in the "default" namespace.</span><span class="token key atrule">kind</span><span class="token punctuation">:</span> RoleBinding<span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> rbac.authorization.k8s.io/v1beta1<span class="token key atrule">metadata</span><span class="token punctuation">:</span>  <span class="token key atrule">name</span><span class="token punctuation">:</span> read<span class="token punctuation">-</span>pods  <span class="token key atrule">namespace</span><span class="token punctuation">:</span> default<span class="token key atrule">subjects</span><span class="token punctuation">:</span><span class="token punctuation">-</span> <span class="token key atrule">kind</span><span class="token punctuation">:</span> User  <span class="token key atrule">name</span><span class="token punctuation">:</span> jane  <span class="token key atrule">apiGroup</span><span class="token punctuation">:</span> rbac.authorization.k8s.io<span class="token key atrule">roleRef</span><span class="token punctuation">:</span>  <span class="token key atrule">kind</span><span class="token punctuation">:</span> Role  <span class="token key atrule">name</span><span class="token punctuation">:</span> pod<span class="token punctuation">-</span>reader  <span class="token key atrule">apiGroup</span><span class="token punctuation">:</span> rbac.authorization.k8s.io</code></pre><p>具体RBAC的功能可以参照官方文档。</p><p>RBAC授权器定义在<a href="https://github.com/kubernetes/kubernetes/blob/323f34858de18b862d43c40b2cced65ad8e24052/plugin/pkg/auth/authorizer/rbac/rbac.go" target="_blank" rel="noopener">kubernetes/plugin/pkg/auth/authorizer/rbac/rbac.go </a>中：</p><pre class=" language-go"><code class="language-go"><span class="token keyword">type</span> RBACAuthorizer <span class="token keyword">struct</span> <span class="token punctuation">{</span>    authorizationRuleResolver RequestToRuleMapper<span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">New</span><span class="token punctuation">(</span><span class="token operator">...</span><span class="token punctuation">)</span> <span class="token operator">*</span>RBACAuthorizer <span class="token punctuation">{</span>    authorizer <span class="token operator">:=</span> <span class="token operator">&amp;</span>RBACAuthorizer<span class="token punctuation">{</span>        authorizationRuleResolver<span class="token punctuation">:</span> rbacregistryvalidation<span class="token punctuation">.</span><span class="token function">NewDefaultRuleResolver</span><span class="token punctuation">(</span>            roles<span class="token punctuation">,</span> roleBindings<span class="token punctuation">,</span> clusterRoles<span class="token punctuation">,</span> clusterRoleBindings<span class="token punctuation">,</span>        <span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> authorizer<span class="token punctuation">}</span></code></pre><p>RBAC授权方法如下:</p><pre class=" language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token punctuation">(</span>r <span class="token operator">*</span>RBACAuthorizer<span class="token punctuation">)</span> <span class="token function">Authorize</span><span class="token punctuation">(</span>ctx context<span class="token punctuation">.</span>Context<span class="token punctuation">,</span> requestAttributes authorizer<span class="token punctuation">.</span>Attributes<span class="token punctuation">)</span> <span class="token punctuation">(</span>authorizer<span class="token punctuation">.</span>Decision<span class="token punctuation">,</span> <span class="token builtin">string</span><span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    ruleCheckingVisitor <span class="token operator">:=</span> <span class="token operator">&amp;</span>authorizingVisitor<span class="token punctuation">{</span>requestAttributes<span class="token punctuation">:</span> requestAttributes<span class="token punctuation">}</span>    r<span class="token punctuation">.</span>authorizationRuleResolver<span class="token punctuation">.</span><span class="token function">VisitRulesFor</span><span class="token punctuation">(</span>requestAttributes<span class="token punctuation">.</span><span class="token function">GetUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> requestAttributes<span class="token punctuation">.</span><span class="token function">GetNamespace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> ruleCheckingVisitor<span class="token punctuation">.</span>visit<span class="token punctuation">)</span>    <span class="token keyword">if</span> ruleCheckingVisitor<span class="token punctuation">.</span>allowed <span class="token punctuation">{</span>        <span class="token keyword">return</span> authorizer<span class="token punctuation">.</span>DecisionAllow<span class="token punctuation">,</span> ruleCheckingVisitor<span class="token punctuation">.</span>reason<span class="token punctuation">,</span> <span class="token boolean">nil</span>    <span class="token punctuation">}</span><span class="token operator">...</span>    <span class="token keyword">return</span> authorizer<span class="token punctuation">.</span>DecisionNoOpinion<span class="token punctuation">,</span> reason<span class="token punctuation">,</span> <span class="token boolean">nil</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token punctuation">(</span>v <span class="token operator">*</span>authorizingVisitor<span class="token punctuation">)</span> <span class="token function">visit</span><span class="token punctuation">(</span>source fmt<span class="token punctuation">.</span>Stringer<span class="token punctuation">,</span> rule <span class="token operator">*</span>rbacv1<span class="token punctuation">.</span>PolicyRule<span class="token punctuation">,</span> err <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token builtin">bool</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> rule <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token operator">&amp;&amp;</span> <span class="token function">RuleAllows</span><span class="token punctuation">(</span>v<span class="token punctuation">.</span>requestAttributes<span class="token punctuation">,</span> rule<span class="token punctuation">)</span> <span class="token punctuation">{</span>        v<span class="token punctuation">.</span>allowed <span class="token operator">=</span> <span class="token boolean">true</span>        v<span class="token punctuation">.</span>reason <span class="token operator">=</span> fmt<span class="token punctuation">.</span><span class="token function">Sprintf</span><span class="token punctuation">(</span><span class="token string">"RBAC: allowed by %s"</span><span class="token punctuation">,</span> source<span class="token punctuation">.</span><span class="token function">String</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token boolean">false</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>        v<span class="token punctuation">.</span>errors <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>v<span class="token punctuation">.</span>errors<span class="token punctuation">,</span> err<span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">}</span></code></pre><p>使用VisitRulesFor()获取用户的规则，再调用RulesAllow()来授权。<br>RulesAllow()定义如下：</p><pre class=" language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">RuleAllows</span><span class="token punctuation">(</span>requestAttributes authorizer<span class="token punctuation">.</span>Attributes<span class="token punctuation">,</span> rule <span class="token operator">*</span>rbacv1<span class="token punctuation">.</span>PolicyRule<span class="token punctuation">)</span> <span class="token builtin">bool</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> requestAttributes<span class="token punctuation">.</span><span class="token function">IsResourceRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        combinedResource <span class="token operator">:=</span> requestAttributes<span class="token punctuation">.</span><span class="token function">GetResource</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> <span class="token function">len</span><span class="token punctuation">(</span>requestAttributes<span class="token punctuation">.</span><span class="token function">GetSubresource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">0</span> <span class="token punctuation">{</span>            combinedResource <span class="token operator">=</span> requestAttributes<span class="token punctuation">.</span><span class="token function">GetResource</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"/"</span> <span class="token operator">+</span> requestAttributes<span class="token punctuation">.</span><span class="token function">GetSubresource</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> rbacv1helpers<span class="token punctuation">.</span><span class="token function">VerbMatches</span><span class="token punctuation">(</span>rule<span class="token punctuation">,</span> requestAttributes<span class="token punctuation">.</span><span class="token function">GetVerb</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span>            rbacv1helpers<span class="token punctuation">.</span><span class="token function">APIGroupMatches</span><span class="token punctuation">(</span>rule<span class="token punctuation">,</span> requestAttributes<span class="token punctuation">.</span><span class="token function">GetAPIGroup</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span>            rbacv1helpers<span class="token punctuation">.</span><span class="token function">ResourceMatches</span><span class="token punctuation">(</span>rule<span class="token punctuation">,</span> combinedResource<span class="token punctuation">,</span> requestAttributes<span class="token punctuation">.</span><span class="token function">GetSubresource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span>            rbacv1helpers<span class="token punctuation">.</span><span class="token function">ResourceNameMatches</span><span class="token punctuation">(</span>rule<span class="token punctuation">,</span> requestAttributes<span class="token punctuation">.</span><span class="token function">GetName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> rbacv1helpers<span class="token punctuation">.</span><span class="token function">VerbMatches</span><span class="token punctuation">(</span>rule<span class="token punctuation">,</span> requestAttributes<span class="token punctuation">.</span><span class="token function">GetVerb</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span>        rbacv1helpers<span class="token punctuation">.</span><span class="token function">NonResourceURLMatches</span><span class="token punctuation">(</span>rule<span class="token punctuation">,</span> requestAttributes<span class="token punctuation">.</span><span class="token function">GetPath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><p>RuleAllows()通过调用<code>VerbMatches()</code>, <code>APIGroupMatches()</code>, <code>ResourceMatches()</code>, <code>ResourceNameMatches()</code>等函数进行规则匹配</p><p><strong>对请求进行认证</strong></p><p>调用链：</p><pre><code>main() -&gt; app.NewAPIServerCommand() -&gt; Run() -&gt; CreateServerChain() -&gt; CreateKubeAPIServerConfig() -&gt; buildGenericConfig() -&gt; genericapiserver.NewConfig(legacyscheme.Codecs)-&gt; DefaultBuildHandlerChain()</code></pre><p>代码路径：</p><p><a href="https://github.com/kubernetes/kubernetes/blob/ca324214be0c3823b309a145b876bbb79ccd742a/staging/src/k8s.io/apiserver/pkg/server/config.go" target="_blank" rel="noopener">staging/src/k8s.io/apiserver/pkg/server/config.go</a></p><pre class=" language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">DefaultBuildHandlerChain</span><span class="token punctuation">(</span>apiHandler http<span class="token punctuation">.</span>Handler<span class="token punctuation">,</span> c <span class="token operator">*</span>Config<span class="token punctuation">)</span> http<span class="token punctuation">.</span>Handler <span class="token punctuation">{</span>    handler <span class="token operator">:=</span> genericapifilters<span class="token punctuation">.</span><span class="token function">WithAuthorization</span><span class="token punctuation">(</span>apiHandler<span class="token punctuation">,</span> c<span class="token punctuation">.</span>Authorization<span class="token punctuation">.</span>Authorizer<span class="token punctuation">,</span> c<span class="token punctuation">.</span>Serializer<span class="token punctuation">)</span>    <span class="token keyword">if</span> c<span class="token punctuation">.</span>FlowControl <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>        handler <span class="token operator">=</span> genericfilters<span class="token punctuation">.</span><span class="token function">WithPriorityAndFairness</span><span class="token punctuation">(</span>handler<span class="token punctuation">,</span> c<span class="token punctuation">.</span>LongRunningFunc<span class="token punctuation">,</span> c<span class="token punctuation">.</span>FlowControl<span class="token punctuation">)</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        handler <span class="token operator">=</span> genericfilters<span class="token punctuation">.</span><span class="token function">WithMaxInFlightLimit</span><span class="token punctuation">(</span>handler<span class="token punctuation">,</span> c<span class="token punctuation">.</span>MaxRequestsInFlight<span class="token punctuation">,</span> c<span class="token punctuation">.</span>MaxMutatingRequestsInFlight<span class="token punctuation">,</span> c<span class="token punctuation">.</span>LongRunningFunc<span class="token punctuation">)</span>    <span class="token punctuation">}</span>    handler <span class="token operator">=</span> genericapifilters<span class="token punctuation">.</span><span class="token function">WithImpersonation</span><span class="token punctuation">(</span>handler<span class="token punctuation">,</span> c<span class="token punctuation">.</span>Authorization<span class="token punctuation">.</span>Authorizer<span class="token punctuation">,</span> c<span class="token punctuation">.</span>Serializer<span class="token punctuation">)</span>    handler <span class="token operator">=</span> genericapifilters<span class="token punctuation">.</span><span class="token function">WithAudit</span><span class="token punctuation">(</span>handler<span class="token punctuation">,</span> c<span class="token punctuation">.</span>AuditBackend<span class="token punctuation">,</span> c<span class="token punctuation">.</span>AuditPolicyChecker<span class="token punctuation">,</span> c<span class="token punctuation">.</span>LongRunningFunc<span class="token punctuation">)</span>    failedHandler <span class="token operator">:=</span> genericapifilters<span class="token punctuation">.</span><span class="token function">Unauthorized</span><span class="token punctuation">(</span>c<span class="token punctuation">.</span>Serializer<span class="token punctuation">,</span> c<span class="token punctuation">.</span>Authentication<span class="token punctuation">.</span>SupportsBasicAuth<span class="token punctuation">)</span>    failedHandler <span class="token operator">=</span> genericapifilters<span class="token punctuation">.</span><span class="token function">WithFailedAuthenticationAudit</span><span class="token punctuation">(</span>failedHandler<span class="token punctuation">,</span> c<span class="token punctuation">.</span>AuditBackend<span class="token punctuation">,</span> c<span class="token punctuation">.</span>AuditPolicyChecker<span class="token punctuation">)</span>    handler <span class="token operator">=</span> genericapifilters<span class="token punctuation">.</span><span class="token function">WithAuthentication</span><span class="token punctuation">(</span>handler<span class="token punctuation">,</span> c<span class="token punctuation">.</span>Authentication<span class="token punctuation">.</span>Authenticator<span class="token punctuation">,</span> failedHandler<span class="token punctuation">,</span> c<span class="token punctuation">.</span>Authentication<span class="token punctuation">.</span>APIAudiences<span class="token punctuation">)</span>    handler <span class="token operator">=</span> genericfilters<span class="token punctuation">.</span><span class="token function">WithCORS</span><span class="token punctuation">(</span>handler<span class="token punctuation">,</span> c<span class="token punctuation">.</span>CorsAllowedOriginList<span class="token punctuation">,</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> <span class="token string">"true"</span><span class="token punctuation">)</span>    handler <span class="token operator">=</span> genericfilters<span class="token punctuation">.</span><span class="token function">WithTimeoutForNonLongRunningRequests</span><span class="token punctuation">(</span>handler<span class="token punctuation">,</span> c<span class="token punctuation">.</span>LongRunningFunc<span class="token punctuation">,</span> c<span class="token punctuation">.</span>RequestTimeout<span class="token punctuation">)</span>    handler <span class="token operator">=</span> genericfilters<span class="token punctuation">.</span><span class="token function">WithWaitGroup</span><span class="token punctuation">(</span>handler<span class="token punctuation">,</span> c<span class="token punctuation">.</span>LongRunningFunc<span class="token punctuation">,</span> c<span class="token punctuation">.</span>HandlerChainWaitGroup<span class="token punctuation">)</span>    handler <span class="token operator">=</span> genericapifilters<span class="token punctuation">.</span><span class="token function">WithRequestInfo</span><span class="token punctuation">(</span>handler<span class="token punctuation">,</span> c<span class="token punctuation">.</span>RequestInfoResolver<span class="token punctuation">)</span>    <span class="token keyword">if</span> c<span class="token punctuation">.</span>SecureServing <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>c<span class="token punctuation">.</span>SecureServing<span class="token punctuation">.</span>DisableHTTP2 <span class="token operator">&amp;&amp;</span> c<span class="token punctuation">.</span>GoawayChance <span class="token operator">></span> <span class="token number">0</span> <span class="token punctuation">{</span>        handler <span class="token operator">=</span> genericfilters<span class="token punctuation">.</span><span class="token function">WithProbabilisticGoaway</span><span class="token punctuation">(</span>handler<span class="token punctuation">,</span> c<span class="token punctuation">.</span>GoawayChance<span class="token punctuation">)</span>    <span class="token punctuation">}</span>    handler <span class="token operator">=</span> genericfilters<span class="token punctuation">.</span><span class="token function">WithPanicRecovery</span><span class="token punctuation">(</span>handler<span class="token punctuation">)</span>    <span class="token keyword">return</span> handler<span class="token punctuation">}</span></code></pre><p>注意到： <code>handler := genericapifilters.WithAuthorization(apiHandler, c.Authorization.Authorizer, c.Serializer)</code></p><p>代码路径：<a href="https://github.com/kubernetes/kubernetes/blob/ca324214be0c3823b309a145b876bbb79ccd742a/staging/src/k8s.io/apiserver/pkg/endpoints/filters/authorization.go" target="_blank" rel="noopener">kubernetes/staging/src/k8s.io/apiserver/pkg/endpoints/filters/authorization.go </a></p><pre class=" language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">WithAuthorization</span><span class="token punctuation">(</span>handler http<span class="token punctuation">.</span>Handler<span class="token punctuation">,</span> a authorizer<span class="token punctuation">.</span>Authorizer<span class="token punctuation">,</span> s runtime<span class="token punctuation">.</span>NegotiatedSerializer<span class="token punctuation">)</span> http<span class="token punctuation">.</span>Handler <span class="token punctuation">{</span>    <span class="token keyword">if</span> a <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>        klog<span class="token punctuation">.</span><span class="token function">Warningf</span><span class="token punctuation">(</span><span class="token string">"Authorization is disabled"</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> handler    <span class="token punctuation">}</span>    <span class="token keyword">return</span> http<span class="token punctuation">.</span><span class="token function">HandlerFunc</span><span class="token punctuation">(</span><span class="token keyword">func</span><span class="token punctuation">(</span>w http<span class="token punctuation">.</span>ResponseWriter<span class="token punctuation">,</span> req <span class="token operator">*</span>http<span class="token punctuation">.</span>Request<span class="token punctuation">)</span> <span class="token punctuation">{</span>        ctx <span class="token operator">:=</span> req<span class="token punctuation">.</span><span class="token function">Context</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        ae <span class="token operator">:=</span> request<span class="token punctuation">.</span><span class="token function">AuditEventFrom</span><span class="token punctuation">(</span>ctx<span class="token punctuation">)</span>        attributes<span class="token punctuation">,</span> err <span class="token operator">:=</span> <span class="token function">GetAuthorizerAttributes</span><span class="token punctuation">(</span>ctx<span class="token punctuation">)</span>        <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>            responsewriters<span class="token punctuation">.</span><span class="token function">InternalError</span><span class="token punctuation">(</span>w<span class="token punctuation">,</span> req<span class="token punctuation">,</span> err<span class="token punctuation">)</span>            <span class="token keyword">return</span>        <span class="token punctuation">}</span>        authorized<span class="token punctuation">,</span> reason<span class="token punctuation">,</span> err <span class="token operator">:=</span> a<span class="token punctuation">.</span><span class="token function">Authorize</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> attributes<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">// an authorizer like RBAC could encounter evaluation errors and still allow the request, so authorizer decision is checked before error here.</span>        <span class="token keyword">if</span> authorized <span class="token operator">==</span> authorizer<span class="token punctuation">.</span>DecisionAllow <span class="token punctuation">{</span>            audit<span class="token punctuation">.</span><span class="token function">LogAnnotation</span><span class="token punctuation">(</span>ae<span class="token punctuation">,</span> decisionAnnotationKey<span class="token punctuation">,</span> decisionAllow<span class="token punctuation">)</span>            audit<span class="token punctuation">.</span><span class="token function">LogAnnotation</span><span class="token punctuation">(</span>ae<span class="token punctuation">,</span> reasonAnnotationKey<span class="token punctuation">,</span> reason<span class="token punctuation">)</span>            handler<span class="token punctuation">.</span><span class="token function">ServeHTTP</span><span class="token punctuation">(</span>w<span class="token punctuation">,</span> req<span class="token punctuation">)</span>            <span class="token keyword">return</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>            audit<span class="token punctuation">.</span><span class="token function">LogAnnotation</span><span class="token punctuation">(</span>ae<span class="token punctuation">,</span> reasonAnnotationKey<span class="token punctuation">,</span> reasonError<span class="token punctuation">)</span>            responsewriters<span class="token punctuation">.</span><span class="token function">InternalError</span><span class="token punctuation">(</span>w<span class="token punctuation">,</span> req<span class="token punctuation">,</span> err<span class="token punctuation">)</span>            <span class="token keyword">return</span>        <span class="token punctuation">}</span>        klog<span class="token punctuation">.</span><span class="token function">V</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Infof</span><span class="token punctuation">(</span><span class="token string">"Forbidden: %#v, Reason: %q"</span><span class="token punctuation">,</span> req<span class="token punctuation">.</span>RequestURI<span class="token punctuation">,</span> reason<span class="token punctuation">)</span>        audit<span class="token punctuation">.</span><span class="token function">LogAnnotation</span><span class="token punctuation">(</span>ae<span class="token punctuation">,</span> decisionAnnotationKey<span class="token punctuation">,</span> decisionForbid<span class="token punctuation">)</span>        audit<span class="token punctuation">.</span><span class="token function">LogAnnotation</span><span class="token punctuation">(</span>ae<span class="token punctuation">,</span> reasonAnnotationKey<span class="token punctuation">,</span> reason<span class="token punctuation">)</span>        responsewriters<span class="token punctuation">.</span><span class="token function">Forbidden</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> attributes<span class="token punctuation">,</span> w<span class="token punctuation">,</span> req<span class="token punctuation">,</span> reason<span class="token punctuation">,</span> s<span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><p>接下来的过程和认证器一样</p><h4 id="Admission"><a href="#Admission" class="headerlink" title="Admission"></a>Admission</h4><p>在进行用户认证和权限授予后，apiserver就会查询/修改etcd存储，以完成请求。</p><p> Admission Controller（准入控制）是 Kubernetes API Server 用于拦截请求的一种手段。Admission可以做到对请求的资源对象进行校验，修改。</p><p>![](../Kubernetes 网络入门/img/2019070310251413.png)</p><ul><li>MutatingAdmissionWebhook：在对象持久化之前进行修改</li><li>ValidatingAdmissionWebhook：在对象持久化之前进行</li></ul><p><strong>Admission Controller 工作流程</strong></p><ul><li>API Server 接收到客户端请求后首先进行认证鉴权，认证鉴权后才会进行 endpoint handler 处理</li><li>当API Server 接收到对象后根据 http 的路径可以得到版本号，然后将 body 反序列化成 versioned object</li><li>versioned object 转化为 internal object，即没有版本的内部类型，这种资源类型是所有 versioned 类型的超集。只有转化为 internal 后才能适配所有的客户端 versioned object 的校验、</li><li>Admission Controller 具体的 admit 操作，可以通过这里修改资源对象，例如为 Pod 挂载一个默认的 Service Account 等</li><li>API Server internal object validation，校验某个资源对象数据和格式是否合法，例如：Service Name 的字符个数不能超过63等</li><li>Admission Controller validate，可以自定义任何的对象校验规则</li><li>internal object 转化为 versioned object，并且持久化存储到 etcd</li></ul><p>Kubernetes 1.10之前的版本，<code>--admission-control</code> 打开 Admission Controller。同时<code>--admission-control</code>的顺序决定 Admission 运行的先后</p><p>Kubernetes 1.10之后的版本，<code>--admission-control</code> 已经废弃，建议使用 <code>--enable-admission-plugins --disable-admission-plugins</code> 指定需要打开或者关闭的 Admission Controller。 同时用户指定的顺序并不影响实际 Admission Controllers 的执行顺序</p><pre><code> --enable-admission-plugins=NamespaceLifecycle,LimitRanger,ServiceAccount,DefaultStorageClass,DefaultTolerationSeconds,MutatingAdmissionWebhook,ValidatingAdmissionWebhook,Priority,ResourceQuota,PodSecurityPolicy   </code></pre><p>Webhook Admission 属于同步调用，需要部署自己的 webhook server，创建自定义的配置资源对象： ValidatingWebhookConfiguration 或 MutatingWebhookConfiguration</p><pre><code>[root@master ~]# kubectl api-resources | grep webhookmutatingwebhookconfigurations                  admissionregistration.k8s.io   false        MutatingWebhookConfigurationvalidatingwebhookconfigurations                admissionregistration.k8s.io   false        ValidatingWebhookConfiguration[root@master ~]# kubectl api-versions | grep admissionregistration.k8s.io/v1beta1admissionregistration.k8s.io/v1beta1</code></pre><p> <strong>部署</strong> </p><p> 定义 ValidatingWebhookConfiguration 或者 MutatingWebhookConfiguration</p><pre><code>apiVersion: admissionregistration.k8s.io/v1beta1kind: MutatingWebhookConfigurationmetadata:  name: &lt;name&gt;  labels:    app: &lt;label&gt;webhooks:  - name: &lt;webhook name, e.g., pod-policy.example.io&gt;  逗号分割，限制必须三段    clientConfig:      service:        namespace: &lt;namespace of the front-end service&gt;        name: &lt;name of the front-end service&gt;      caBundle: &lt;pem encoded ca cert that signs the server cert used by the webhook&gt;    rules:      - operations: [ "CREATE" ]        apiGroups: [""]        apiVersions: ["v1"]        resources: ["pods"]    namespaceSelector:      matchLabels:        &lt;key&gt;: &lt;value&gt;</code></pre><p><strong>创建自己的 webhook 程序流程</strong></p><ul><li>创建TLS Certificate，即证书</li><li>编写服务端代码，服务端代码需要使用证书</li><li>根据证书创建k8s sercret</li><li>创建k8s Deployment和Service</li><li>创建k8s WebhookConfiguration，其中需要使用之前创建的证书</li></ul><p><strong>准入控制器列表</strong></p><p>准入控制器是写入apiserver源码的，无法动态添加。可以通过<code>kube-apiserver -h | grep enable-admission-plugins</code>查看支持的准入控制器，也可以在github上查看准入控制器列表以及实现细节：<a href="https://github.com/kubernetes/kubernetes/tree/master/plugin/pkg/admission。" target="_blank" rel="noopener">https://github.com/kubernetes/kubernetes/tree/master/plugin/pkg/admission。</a></p><p>以下是目前支持的准入控制器：</p><ul><li>AlwaysAdmit：全部允许，相当于没有准入控制器。</li><li>AlwaysPull/images/2020：强制修改每一个新Pod强制拉取镜像。</li><li>AlwaysDeny：拒绝所有请求。</li><li>DefaultStorageClass：如果PersistentVolumeClaim没有指定StorageClass，则为其添加一个默认的StorageClass。</li><li>DefaultTolerationSeconds：如果Pod没有设置toleration，则默认设置对<code>notready:NoExecute</code>和<code>unreachable:NoExecute</code>的toleration为5分钟。</li><li>DenyExecOnPrivileged：拦截所有特权级容器运行的命令。该准入控制器已合并至<code>DenyEscalatingExec</code>，并将在1.18版本移除。</li><li>DenyEscalatingExec：阻止容器运行提权类命令，包括特权级容器，或者说有着host的IPC命名空间或PID命名空间。</li><li>EventRateLimit：控制apiserver接收事件请求的速率，以缓解负载过大的问题。</li><li>ExtendedResourceToleration：用于有扩展类资源的专用节点，比如说GPU，FPGA。如果请求需要扩展资源，则自动为其添加toleration以帮助选择节点。</li><li>ImagePolicyWebhook：允许后端的webhook判断镜像拉取策略，例如配置镜像仓库的密钥。</li><li>LimitPodHardAntiAffinityTopology：拒绝所有在<code>requiredDuringSchedulingRequiredDuringExecution</code>中定义除<code>kubernetes.io/hostname</code>之外的拓扑关键字的Pod。</li><li>LimitRanger：确保所有资源请求不会超过 namespace 的 LimitRange。</li><li>MutatingAdmissionWebhook：调用与请求匹配的任何变更 webhook。</li><li>NamespaceAutoProvision：检查请求引用的命名空间，如果不存在则自动创建命名空间。</li><li>NamespaceExists：检查请求引用的命名空间，如果不存在则拒绝。</li><li>NamespaceLifecycle：保证正在终止的命名空间无法创建对象；拒绝引用了不存在的命名空间的请求；保证无法删除默认的三个命名空间：<code>default</code>，<code>kube-system</code>，<code>kube-public</code>。</li><li>NodeRestriction：限制了kubelet可以修改的Node和Pod对象，往往与权限授予的Node模式配合使用。</li><li>OwnerReferencesPermissionEnforcement：保护对<code>metadata.ownerReferences</code>对象的访问，以便只有对该对象具有“删除”权限的用户才能对其进行更改。</li><li>PersistentVolumeLabel：如果是云服务商定义的PV，则自动为其添加上region和zone的标签。已弃用，使用<code>cloud-controller-manager</code>代替。</li><li>PodNodeSelector：通过读取命名空间注释和全局配置来限制可在命名空间内使用的节点选择器。</li><li>PersistentVolumeClaimResize：验证更改PVC大小的请求。</li><li>PodPreset：允许在Pod启动时注入一些信息，比如环境变量，secret，volume等等，需要和podpreset资源对象配合使用。</li><li>PodSecurityPolicy：在创建和修改Pod时，根据请求的安全上下文和可用的Pod安全策略确定是否应该允许它。</li><li>PodTolerationRestriction：验证容器的容忍度与其命名空间的容忍度之间是否存在冲突，并在存在冲突时拒绝该容器请求。</li><li>Priority：使用priorityClassName字段并填充优先级的整数值。如果未找到优先级，则拒绝Pod。</li><li>ResourceQuota：确保请求不违反namespace中的resourcequota对象。</li><li>SecurityContextDeny：拒绝任何试图设置某些升级的SecurityContext字段的pod。</li><li>ServiceAccount：自动化ServiceAccount设置，包括为Pod填充serviceaccount字段，以及挂载secret。</li><li>StorageObjectInUseProtection：为新创建的PVC添加<code>kubernetes.io/pvc-protection</code>和<code>kubernetes.io/pv-protection</code>字段，防止用户在使用PV或PVC时删除它们。</li><li>ValidatingAdmissionWebhook：调用与请求匹配的任何验证webhook。如果任何一个webhook拒绝请求，则请求失败。</li></ul><p>以上是目前apiserver可以使用的准入控制器，更详细的内容请参考官网：<a href="https://kubernetes.io/docs/reference/access-authn-authz/admission-controllers/#what-does-each-admission-controller-do。" target="_blank" rel="noopener">https://kubernetes.io/docs/reference/access-authn-authz/admission-controllers/#what-does-each-admission-controller-do。</a></p><p>如果以上准入控制器无法满足需要，可以自己实现准入控制器，然后编译进kube-apiserver程序中。</p><p><strong>小结</strong></p><ul><li>准入控制器是请求持久化至etcd之前的拦截器，可以修改/拦截请求。</li><li>可以在apiserver启动时传入允许/拒绝的准入控制器。</li><li>apiserver提供了一系列内置的准入控制器，如无法满足需求也可自己实现。</li></ul><h5 id="注册插件"><a href="#注册插件" class="headerlink" title="注册插件"></a>注册插件</h5><p><strong>调用链</strong></p><pre><code>app.NewAPIServerCommand() -&gt; options.NewServerRunOptions() -&gt; kubeoptions.NewAdmissionOptions() -&gt; genericoptions.NewAdmissionOptions() -&gt;RegisterAllAdmissionPlugins(options.Plugins)</code></pre><p>注册</p><pre class=" language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">RegisterAllAdmissionPlugins</span><span class="token punctuation">(</span>plugins <span class="token operator">*</span>admission<span class="token punctuation">.</span>Plugins<span class="token punctuation">)</span> <span class="token punctuation">{</span>    admit<span class="token punctuation">.</span><span class="token function">Register</span><span class="token punctuation">(</span>plugins<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// DEPRECATED as no real meaning</span>    alwayspull<span class="token operator">/</span>images<span class="token operator">/</span><span class="token number">2020</span><span class="token punctuation">.</span><span class="token function">Register</span><span class="token punctuation">(</span>plugins<span class="token punctuation">)</span>    antiaffinity<span class="token punctuation">.</span><span class="token function">Register</span><span class="token punctuation">(</span>plugins<span class="token punctuation">)</span>    defaulttolerationseconds<span class="token punctuation">.</span><span class="token function">Register</span><span class="token punctuation">(</span>plugins<span class="token punctuation">)</span>    defaultingressclass<span class="token punctuation">.</span><span class="token function">Register</span><span class="token punctuation">(</span>plugins<span class="token punctuation">)</span>    deny<span class="token punctuation">.</span><span class="token function">Register</span><span class="token punctuation">(</span>plugins<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// DEPRECATED as no real meaning</span>    eventratelimit<span class="token punctuation">.</span><span class="token function">Register</span><span class="token punctuation">(</span>plugins<span class="token punctuation">)</span>    exec<span class="token punctuation">.</span><span class="token function">Register</span><span class="token punctuation">(</span>plugins<span class="token punctuation">)</span>    extendedresourcetoleration<span class="token punctuation">.</span><span class="token function">Register</span><span class="token punctuation">(</span>plugins<span class="token punctuation">)</span>    gc<span class="token punctuation">.</span><span class="token function">Register</span><span class="token punctuation">(</span>plugins<span class="token punctuation">)</span>    imagepolicy<span class="token punctuation">.</span><span class="token function">Register</span><span class="token punctuation">(</span>plugins<span class="token punctuation">)</span>    limitranger<span class="token punctuation">.</span><span class="token function">Register</span><span class="token punctuation">(</span>plugins<span class="token punctuation">)</span>    autoprovision<span class="token punctuation">.</span><span class="token function">Register</span><span class="token punctuation">(</span>plugins<span class="token punctuation">)</span>    exists<span class="token punctuation">.</span><span class="token function">Register</span><span class="token punctuation">(</span>plugins<span class="token punctuation">)</span>    noderestriction<span class="token punctuation">.</span><span class="token function">Register</span><span class="token punctuation">(</span>plugins<span class="token punctuation">)</span>    nodetaint<span class="token punctuation">.</span><span class="token function">Register</span><span class="token punctuation">(</span>plugins<span class="token punctuation">)</span>    label<span class="token punctuation">.</span><span class="token function">Register</span><span class="token punctuation">(</span>plugins<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// DEPRECATED, future PVs should not rely on labels for zone topology</span>    podnodeselector<span class="token punctuation">.</span><span class="token function">Register</span><span class="token punctuation">(</span>plugins<span class="token punctuation">)</span>    podpreset<span class="token punctuation">.</span><span class="token function">Register</span><span class="token punctuation">(</span>plugins<span class="token punctuation">)</span>    podtolerationrestriction<span class="token punctuation">.</span><span class="token function">Register</span><span class="token punctuation">(</span>plugins<span class="token punctuation">)</span>    runtimeclass<span class="token punctuation">.</span><span class="token function">Register</span><span class="token punctuation">(</span>plugins<span class="token punctuation">)</span>    resourcequota<span class="token punctuation">.</span><span class="token function">Register</span><span class="token punctuation">(</span>plugins<span class="token punctuation">)</span>    podsecuritypolicy<span class="token punctuation">.</span><span class="token function">Register</span><span class="token punctuation">(</span>plugins<span class="token punctuation">)</span>    podpriority<span class="token punctuation">.</span><span class="token function">Register</span><span class="token punctuation">(</span>plugins<span class="token punctuation">)</span>    scdeny<span class="token punctuation">.</span><span class="token function">Register</span><span class="token punctuation">(</span>plugins<span class="token punctuation">)</span>    serviceaccount<span class="token punctuation">.</span><span class="token function">Register</span><span class="token punctuation">(</span>plugins<span class="token punctuation">)</span>    setdefault<span class="token punctuation">.</span><span class="token function">Register</span><span class="token punctuation">(</span>plugins<span class="token punctuation">)</span>    resize<span class="token punctuation">.</span><span class="token function">Register</span><span class="token punctuation">(</span>plugins<span class="token punctuation">)</span>    storageobjectinuseprotection<span class="token punctuation">.</span><span class="token function">Register</span><span class="token punctuation">(</span>plugins<span class="token punctuation">)</span>    certapproval<span class="token punctuation">.</span><span class="token function">Register</span><span class="token punctuation">(</span>plugins<span class="token punctuation">)</span>    certsigning<span class="token punctuation">.</span><span class="token function">Register</span><span class="token punctuation">(</span>plugins<span class="token punctuation">)</span>    certsubjectrestriction<span class="token punctuation">.</span><span class="token function">Register</span><span class="token punctuation">(</span>plugins<span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><h5 id="初始化插件"><a href="#初始化插件" class="headerlink" title="初始化插件"></a>初始化插件</h5><p>调用链：</p><pre><code>main() -&gt; app.NewAPIServerCommand() -&gt; Run() -&gt; CreateServerChain() -&gt; CreateKubeAPIServerConfig() -&gt; buildGenericConfig() -&gt; s.Admission.ApplyTo() -&gt;a.GenericAdmission.ApplyTo() -&gt; a.Plugins.NewFromPlugins()-&gt;ps.InitPlugin()</code></pre><p><strong>buildGenericConfig</strong></p><p>Config 结构主要用来初始化 admission 插件，路径实现 <code>pkg/kubeapiserver/admission/config.go</code></p><pre class=" language-go"><code class="language-go">admissionConfig <span class="token operator">:=</span> <span class="token operator">&amp;</span>kubeapiserveradmission<span class="token punctuation">.</span>Config<span class="token punctuation">{</span>    ExternalInformers<span class="token punctuation">:</span>    versionedInformers<span class="token punctuation">,</span>    LoopbackClientConfig<span class="token punctuation">:</span> genericConfig<span class="token punctuation">.</span>LoopbackClientConfig<span class="token punctuation">,</span>    CloudConfigFile<span class="token punctuation">:</span>      s<span class="token punctuation">.</span>CloudProvider<span class="token punctuation">.</span>CloudConfigFile<span class="token punctuation">,</span><span class="token punctuation">}</span></code></pre><p> admissionConfig.New 函数主要用来为 admission 建立插件以及 start hook</p><pre class=" language-go"><code class="language-go">pluginInitializers<span class="token punctuation">,</span> admissionPostStartHook<span class="token punctuation">,</span> err <span class="token operator">=</span> admissionConfig<span class="token punctuation">.</span><span class="token function">New</span><span class="token punctuation">(</span>proxyTransport<span class="token punctuation">,</span> serviceResolver<span class="token punctuation">)</span><span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>    lastErr <span class="token operator">=</span> fmt<span class="token punctuation">.</span><span class="token function">Errorf</span><span class="token punctuation">(</span><span class="token string">"failed to create admission plugin initializer: %v"</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span>    <span class="token keyword">return</span><span class="token punctuation">}</span></code></pre><p><strong>New</strong></p><p> NewPluginInitializer 实例化 PluginInitializer，这个结构用来初始化 admission plugin</p><pre class=" language-go"><code class="language-go"><span class="token comment" spellcheck="true">// New sets up the plugins and admission start hooks needed for admission</span><span class="token keyword">func</span> <span class="token punctuation">(</span>c <span class="token operator">*</span>Config<span class="token punctuation">)</span> <span class="token function">New</span><span class="token punctuation">(</span>proxyTransport <span class="token operator">*</span>http<span class="token punctuation">.</span>Transport<span class="token punctuation">,</span> serviceResolver webhook<span class="token punctuation">.</span>ServiceResolver<span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span>admission<span class="token punctuation">.</span>PluginInitializer<span class="token punctuation">,</span> server<span class="token punctuation">.</span>PostStartHookFunc<span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    webhookAuthResolverWrapper <span class="token operator">:=</span> webhook<span class="token punctuation">.</span><span class="token function">NewDefaultAuthenticationInfoResolverWrapper</span><span class="token punctuation">(</span>proxyTransport<span class="token punctuation">,</span> c<span class="token punctuation">.</span>LoopbackClientConfig<span class="token punctuation">)</span>    webhookPluginInitializer <span class="token operator">:=</span> webhookinit<span class="token punctuation">.</span><span class="token function">NewPluginInitializer</span><span class="token punctuation">(</span>webhookAuthResolverWrapper<span class="token punctuation">,</span> serviceResolver<span class="token punctuation">)</span>    <span class="token keyword">var</span> cloudConfig <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span>    <span class="token keyword">if</span> c<span class="token punctuation">.</span>CloudConfigFile <span class="token operator">!=</span> <span class="token string">""</span> <span class="token punctuation">{</span>        <span class="token keyword">var</span> err <span class="token builtin">error</span>        cloudConfig<span class="token punctuation">,</span> err <span class="token operator">=</span> ioutil<span class="token punctuation">.</span><span class="token function">ReadFile</span><span class="token punctuation">(</span>c<span class="token punctuation">.</span>CloudConfigFile<span class="token punctuation">)</span>        <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>            klog<span class="token punctuation">.</span><span class="token function">Fatalf</span><span class="token punctuation">(</span><span class="token string">"Error reading from cloud configuration file %s: %#v"</span><span class="token punctuation">,</span> c<span class="token punctuation">.</span>CloudConfigFile<span class="token punctuation">,</span> err<span class="token punctuation">)</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    internalClient<span class="token punctuation">,</span> err <span class="token operator">:=</span> internalclientset<span class="token punctuation">.</span><span class="token function">NewForConfig</span><span class="token punctuation">(</span>c<span class="token punctuation">.</span>LoopbackClientConfig<span class="token punctuation">)</span>    <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> err    <span class="token punctuation">}</span></code></pre><p><strong>NewPluginInitializer 实例化 PluginInitializer</strong></p><p>具体实现路径为 <code>pkg/kubeapiserver/admission/initializer.go</code></p><pre class=" language-go"><code class="language-go">discoveryClient <span class="token operator">:=</span> cacheddiscovery<span class="token punctuation">.</span><span class="token function">NewMemCacheClient</span><span class="token punctuation">(</span>internalClient<span class="token punctuation">.</span><span class="token function">Discovery</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>discoveryRESTMapper <span class="token operator">:=</span> restmapper<span class="token punctuation">.</span><span class="token function">NewDeferredDiscoveryRESTMapper</span><span class="token punctuation">(</span>discoveryClient<span class="token punctuation">)</span>kubePluginInitializer <span class="token operator">:=</span> <span class="token function">NewPluginInitializer</span><span class="token punctuation">(</span>    cloudConfig<span class="token punctuation">,</span>    discoveryRESTMapper<span class="token punctuation">,</span>    quotainstall<span class="token punctuation">.</span><span class="token function">NewQuotaConfigurationForAdmission</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">)</span></code></pre><p><strong>admissionPostStartHook 函数是重置 cache 操作</strong></p><pre class=" language-go"><code class="language-go">admissionPostStartHook <span class="token operator">:=</span> <span class="token keyword">func</span><span class="token punctuation">(</span>context genericapiserver<span class="token punctuation">.</span>PostStartHookContext<span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">{</span>    discoveryRESTMapper<span class="token punctuation">.</span><span class="token function">Reset</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">go</span> utilwait<span class="token punctuation">.</span><span class="token function">Until</span><span class="token punctuation">(</span>discoveryRESTMapper<span class="token punctuation">.</span>Reset<span class="token punctuation">,</span> <span class="token number">30</span><span class="token operator">*</span>time<span class="token punctuation">.</span>Second<span class="token punctuation">,</span> context<span class="token punctuation">.</span>StopCh<span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">}</span><span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>admission<span class="token punctuation">.</span>PluginInitializer<span class="token punctuation">{</span>webhookPluginInitializer<span class="token punctuation">,</span> kubePluginInitializer<span class="token punctuation">}</span><span class="token punctuation">,</span> admissionPostStartHook<span class="token punctuation">,</span> <span class="token boolean">nil</span></code></pre><p><strong>ApplyTo</strong></p><p> 路径 <code>k8s.io/apiserver/pkg/server/options/admission.go</code></p><pre class=" language-go"><code class="language-go"><span class="token comment" spellcheck="true">// ApplyTo adds the admission chain to the server configuration.</span><span class="token comment" spellcheck="true">// In case admission plugin names were not provided by a custer-admin they will be prepared from the recommended/default values.</span><span class="token comment" spellcheck="true">// In addition the method lazily initializes a generic plugin that is appended to the list of pluginInitializers</span><span class="token comment" spellcheck="true">// note this method uses:</span><span class="token comment" spellcheck="true">//  genericconfig.Authorizer</span><span class="token keyword">func</span> <span class="token punctuation">(</span>a <span class="token operator">*</span>AdmissionOptions<span class="token punctuation">)</span> <span class="token function">ApplyTo</span><span class="token punctuation">(</span>    c <span class="token operator">*</span>server<span class="token punctuation">.</span>Config<span class="token punctuation">,</span>    informers informers<span class="token punctuation">.</span>SharedInformerFactory<span class="token punctuation">,</span>    kubeAPIServerClientConfig <span class="token operator">*</span>rest<span class="token punctuation">.</span>Config<span class="token punctuation">,</span>    pluginInitializers <span class="token operator">...</span>admission<span class="token punctuation">.</span>PluginInitializer<span class="token punctuation">,</span><span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> a <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token boolean">nil</span>    <span class="token punctuation">}</span></code></pre><p><strong>NewFromPlugins</strong></p><p>InitPlugin 主要对插件进行初始化工作，分别调用 Initialize 初始化，在调用 ValidateInitialization 验证是否实现了接口方法 ValidateInitialization</p><p>最后包裹 handlers，chainAdmissionHandler 包含了插件的 handler，实现了 Admit 和 Validate 方法，就是对所有插件 handler 调用 Admit 和 Validate 方法</p><pre><code>func (admissionHandler chainAdmissionHandler) Admit(a Attributes, o ObjectInterfaces) errorfunc (admissionHandler chainAdmissionHandler) Validate(a Attributes, o ObjectInterfaces) error</code></pre><pre><code>// NewFromPlugins returns an admission.Interface that will enforce admission control decisions of all// the given plugins.func (ps *Plugins) NewFromPlugins(pluginNames []string, configProvider ConfigProvider, pluginInitializer PluginInitializer, decorator Decorator) (Interface, error) {    handlers := []Interface{}    mutationPlugins := []string{}    validationPlugins := []string{}    for _, pluginName := range pluginNames {        pluginConfig, err := configProvider.ConfigFor(pluginName)        if err != nil {            return nil, err        }        plugin, err := ps.InitPlugin(pluginName, pluginConfig, pluginInitializer)        if err != nil {            return nil, err        }    return chainAdmissionHandler(handlers), nil}</code></pre><p><strong>赋值 AdmissionControl</strong></p><p>具体操作就是又包裹了一下 pluginHandlerWithMetrics</p><pre class=" language-go"><code class="language-go"><span class="token comment" spellcheck="true">// WithStepMetrics is a decorator for a whole admission phase, i.e. admit or validation.admission step.</span><span class="token keyword">func</span> <span class="token function">WithStepMetrics</span><span class="token punctuation">(</span>i admission<span class="token punctuation">.</span>Interface<span class="token punctuation">)</span> admission<span class="token punctuation">.</span>Interface <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token function">WithMetrics</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> Metrics<span class="token punctuation">.</span>ObserveAdmissionStep<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// WithMetrics is a decorator for admission handlers with a generic observer func.</span><span class="token keyword">func</span> <span class="token function">WithMetrics</span><span class="token punctuation">(</span>i admission<span class="token punctuation">.</span>Interface<span class="token punctuation">,</span> observer ObserverFunc<span class="token punctuation">,</span> extraLabels <span class="token operator">...</span><span class="token builtin">string</span><span class="token punctuation">)</span> admission<span class="token punctuation">.</span>Interface <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token operator">&amp;</span>pluginHandlerWithMetrics<span class="token punctuation">{</span>        Interface<span class="token punctuation">:</span>   i<span class="token punctuation">,</span>        observer<span class="token punctuation">:</span>    observer<span class="token punctuation">,</span>        extraLabels<span class="token punctuation">:</span> extraLabels<span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h5 id="使用插件"><a href="#使用插件" class="headerlink" title="使用插件"></a>使用插件</h5><p>调用链：</p><pre><code>main() -&gt; app.NewAPIServerCommand() -&gt; Run() -&gt; CreateServerChain() -&gt; createAggregatorServer()-&gt;NewWithDelegate()-&gt;InstallAPIGroups()-&gt;installAPIResources()-&gt;InstallREST()-&gt;Install()-&gt;registerResourceHandlers()-&gt;metrics.InstrumentRouteFunc()-&gt;        --&gt;  restfulUpdateResource               PUT        --&gt;  restfulPatchResource                PATCH        --&gt;  restfulCreateNamedResource          POST        --&gt;  restfulCreateResource               POST        --&gt;  restfulDeleteResource               DELETE        --&gt;  restfulDeleteCollection             DELETECOLLECTION        --&gt;  restfulConnectResource              CONNECT </code></pre><p><strong>registerResourceHandlers</strong></p><p> 可以得到 PUT PATCH POST DELETE DELETECOLLECTION CONNECT 这些 method 用到了 admission </p><pre class=" language-go"><code class="language-go"><span class="token keyword">switch</span> action<span class="token punctuation">.</span>Verb <span class="token punctuation">{</span><span class="token keyword">case</span> <span class="token string">"PUT"</span><span class="token punctuation">:</span> <span class="token comment" spellcheck="true">// Update a resource.</span>    doc <span class="token operator">:=</span> <span class="token string">"replace the specified "</span> <span class="token operator">+</span> kind    <span class="token keyword">if</span> isSubresource <span class="token punctuation">{</span>        doc <span class="token operator">=</span> <span class="token string">"replace "</span> <span class="token operator">+</span> subresource <span class="token operator">+</span> <span class="token string">" of the specified "</span> <span class="token operator">+</span> kind    <span class="token punctuation">}</span>    handler <span class="token operator">:=</span> metrics<span class="token punctuation">.</span><span class="token function">InstrumentRouteFunc</span><span class="token punctuation">(</span>action<span class="token punctuation">.</span>Verb<span class="token punctuation">,</span> group<span class="token punctuation">,</span> version<span class="token punctuation">,</span> resource<span class="token punctuation">,</span> subresource<span class="token punctuation">,</span> requestScope<span class="token punctuation">,</span> metrics<span class="token punctuation">.</span>APIServerComponent<span class="token punctuation">,</span> <span class="token function">restfulUpdateResource</span><span class="token punctuation">(</span>updater<span class="token punctuation">,</span> reqScope<span class="token punctuation">,</span> admit<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">case</span> <span class="token string">"PATCH"</span><span class="token punctuation">:</span> <span class="token comment" spellcheck="true">// Partially update a resource</span>    handler <span class="token operator">:=</span> metrics<span class="token punctuation">.</span><span class="token function">InstrumentRouteFunc</span><span class="token punctuation">(</span>action<span class="token punctuation">.</span>Verb<span class="token punctuation">,</span> group<span class="token punctuation">,</span> version<span class="token punctuation">,</span> resource<span class="token punctuation">,</span> subresource<span class="token punctuation">,</span> requestScope<span class="token punctuation">,</span> metrics<span class="token punctuation">.</span>APIServerComponent<span class="token punctuation">,</span> <span class="token function">restfulPatchResource</span><span class="token punctuation">(</span>patcher<span class="token punctuation">,</span> reqScope<span class="token punctuation">,</span> admit<span class="token punctuation">,</span> supportedTypes<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">case</span> <span class="token string">"POST"</span><span class="token punctuation">:</span> <span class="token comment" spellcheck="true">// Create a resource.</span>    <span class="token keyword">var</span> handler restful<span class="token punctuation">.</span>RouteFunction    <span class="token keyword">if</span> isNamedCreater <span class="token punctuation">{</span>        handler <span class="token operator">=</span> <span class="token function">restfulCreateNamedResource</span><span class="token punctuation">(</span>namedCreater<span class="token punctuation">,</span> reqScope<span class="token punctuation">,</span> admit<span class="token punctuation">)</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        handler <span class="token operator">=</span> <span class="token function">restfulCreateResource</span><span class="token punctuation">(</span>creater<span class="token punctuation">,</span> reqScope<span class="token punctuation">,</span> admit<span class="token punctuation">)</span>    <span class="token punctuation">}</span>    handler <span class="token operator">=</span> metrics<span class="token punctuation">.</span><span class="token function">InstrumentRouteFunc</span><span class="token punctuation">(</span>action<span class="token punctuation">.</span>Verb<span class="token punctuation">,</span> group<span class="token punctuation">,</span> version<span class="token punctuation">,</span> resource<span class="token punctuation">,</span> subresource<span class="token punctuation">,</span> requestScope<span class="token punctuation">,</span> metrics<span class="token punctuation">.</span>APIServerComponent<span class="token punctuation">,</span> handler<span class="token punctuation">)</span><span class="token keyword">case</span> <span class="token string">"DELETE"</span><span class="token punctuation">:</span> <span class="token comment" spellcheck="true">// Delete a resource.</span>    handler <span class="token operator">:=</span> metrics<span class="token punctuation">.</span><span class="token function">InstrumentRouteFunc</span><span class="token punctuation">(</span>action<span class="token punctuation">.</span>Verb<span class="token punctuation">,</span> group<span class="token punctuation">,</span> version<span class="token punctuation">,</span> resource<span class="token punctuation">,</span> subresource<span class="token punctuation">,</span> requestScope<span class="token punctuation">,</span> metrics<span class="token punctuation">.</span>APIServerComponent<span class="token punctuation">,</span> <span class="token function">restfulDeleteResource</span><span class="token punctuation">(</span>gracefulDeleter<span class="token punctuation">,</span> isGracefulDeleter<span class="token punctuation">,</span> reqScope<span class="token punctuation">,</span> admit<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">case</span> <span class="token string">"DELETECOLLECTION"</span><span class="token punctuation">:</span>    handler <span class="token operator">:=</span> metrics<span class="token punctuation">.</span><span class="token function">InstrumentRouteFunc</span><span class="token punctuation">(</span>action<span class="token punctuation">.</span>Verb<span class="token punctuation">,</span> group<span class="token punctuation">,</span> version<span class="token punctuation">,</span> resource<span class="token punctuation">,</span> subresource<span class="token punctuation">,</span> requestScope<span class="token punctuation">,</span> metrics<span class="token punctuation">.</span>APIServerComponent<span class="token punctuation">,</span> <span class="token function">restfulDeleteCollection</span><span class="token punctuation">(</span>collectionDeleter<span class="token punctuation">,</span> isCollectionDeleter<span class="token punctuation">,</span> reqScope<span class="token punctuation">,</span> admit<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">case</span> <span class="token string">"CONNECT"</span><span class="token punctuation">:</span>    <span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> method <span class="token operator">:=</span> <span class="token keyword">range</span> connecter<span class="token punctuation">.</span><span class="token function">ConnectMethods</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        handler <span class="token operator">:=</span> metrics<span class="token punctuation">.</span><span class="token function">InstrumentRouteFunc</span><span class="token punctuation">(</span>action<span class="token punctuation">.</span>Verb<span class="token punctuation">,</span> group<span class="token punctuation">,</span> version<span class="token punctuation">,</span> resource<span class="token punctuation">,</span> subresource<span class="token punctuation">,</span> requestScope<span class="token punctuation">,</span> metrics<span class="token punctuation">.</span>APIServerComponent<span class="token punctuation">,</span> <span class="token function">restfulConnectResource</span><span class="token punctuation">(</span>connecter<span class="token punctuation">,</span> reqScope<span class="token punctuation">,</span> admit<span class="token punctuation">,</span> path<span class="token punctuation">,</span> isSubresource<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><h3 id="API-server-路由"><a href="#API-server-路由" class="headerlink" title="API server 路由"></a>API server 路由</h3><h4 id="emicklei-go-restful"><a href="#emicklei-go-restful" class="headerlink" title="emicklei/go-restful"></a>emicklei/go-restful</h4><p>Kubernetes使用emicklei/go-restful包提供RESTful API服务。所以有必要先来了解下emicklei/go-restful是如何使用的。</p><ol><li>创建container</li><li>创建ws</li><li>生成route，即ws.GET(“/hello”).To(hello)</li><li>ws.Route(route)</li><li>container.Add(ws)</li><li>http.Server{}</li></ol><p>即如下代码形式：</p><pre class=" language-go"><code class="language-go">container <span class="token operator">:=</span> restful<span class="token punctuation">.</span><span class="token function">NewContainer</span><span class="token punctuation">(</span><span class="token punctuation">)</span>ws <span class="token operator">:=</span> <span class="token function">new</span><span class="token punctuation">(</span>restful<span class="token punctuation">.</span>WebService<span class="token punctuation">)</span>ws<span class="token punctuation">.</span><span class="token function">Route</span><span class="token punctuation">(</span>ws<span class="token punctuation">.</span><span class="token function">GET</span><span class="token punctuation">(</span><span class="token string">"/hello"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">To</span><span class="token punctuation">(</span>hello<span class="token punctuation">)</span><span class="token punctuation">)</span>container<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span>ws<span class="token punctuation">)</span>server <span class="token operator">:=</span> <span class="token operator">&amp;</span>http<span class="token punctuation">.</span>Server<span class="token punctuation">{</span>Addr<span class="token punctuation">:</span> <span class="token string">":8081"</span><span class="token punctuation">,</span> Handler<span class="token punctuation">:</span> container<span class="token punctuation">}</span>log<span class="token punctuation">.</span><span class="token function">Fatal</span><span class="token punctuation">(</span>server<span class="token punctuation">.</span><span class="token function">ListenAndServe</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">func</span> <span class="token function">hello</span><span class="token punctuation">(</span>req <span class="token operator">*</span>restful<span class="token punctuation">.</span>Request<span class="token punctuation">,</span> resp <span class="token operator">*</span>restful<span class="token punctuation">.</span>Response<span class="token punctuation">)</span> <span class="token punctuation">{</span>    io<span class="token punctuation">.</span><span class="token function">WriteString</span><span class="token punctuation">(</span>resp<span class="token punctuation">,</span> <span class="token string">"default world"</span><span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><h4 id="container的生成"><a href="#container的生成" class="headerlink" title="container的生成"></a>container的生成</h4><p>所以，我们第一件事就是寻找在哪生成的container。container的生成函数定义:</p><pre class=" language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">NewAPIServerHandler</span><span class="token punctuation">(</span>name <span class="token builtin">string</span><span class="token punctuation">,</span> s runtime<span class="token punctuation">.</span>NegotiatedSerializer<span class="token punctuation">,</span> handlerChainBuilder HandlerChainBuilderFn<span class="token punctuation">,</span> notFoundHandler http<span class="token punctuation">.</span>Handler<span class="token punctuation">)</span> <span class="token operator">*</span>APIServerHandler <span class="token punctuation">{</span>    nonGoRestfulMux <span class="token operator">:=</span> mux<span class="token punctuation">.</span><span class="token function">NewPathRecorderMux</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span>    <span class="token keyword">if</span> notFoundHandler <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>        nonGoRestfulMux<span class="token punctuation">.</span><span class="token function">NotFoundHandler</span><span class="token punctuation">(</span>notFoundHandler<span class="token punctuation">)</span>    <span class="token punctuation">}</span>    gorestfulContainer <span class="token operator">:=</span> restful<span class="token punctuation">.</span><span class="token function">NewContainer</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    gorestfulContainer<span class="token punctuation">.</span>ServeMux <span class="token operator">=</span> http<span class="token punctuation">.</span><span class="token function">NewServeMux</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    gorestfulContainer<span class="token punctuation">.</span><span class="token function">Router</span><span class="token punctuation">(</span>restful<span class="token punctuation">.</span>CurlyRouter<span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// e.g. for proxy/{kind}/{name}/{*}</span>    gorestfulContainer<span class="token punctuation">.</span><span class="token function">RecoverHandler</span><span class="token punctuation">(</span><span class="token keyword">func</span><span class="token punctuation">(</span>panicReason <span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> httpWriter http<span class="token punctuation">.</span>ResponseWriter<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">logStackOnRecover</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> panicReason<span class="token punctuation">,</span> httpWriter<span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>    gorestfulContainer<span class="token punctuation">.</span><span class="token function">ServiceErrorHandler</span><span class="token punctuation">(</span><span class="token keyword">func</span><span class="token punctuation">(</span>serviceErr restful<span class="token punctuation">.</span>ServiceError<span class="token punctuation">,</span> request <span class="token operator">*</span>restful<span class="token punctuation">.</span>Request<span class="token punctuation">,</span> response <span class="token operator">*</span>restful<span class="token punctuation">.</span>Response<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">serviceErrorHandler</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> serviceErr<span class="token punctuation">,</span> request<span class="token punctuation">,</span> response<span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>    director <span class="token operator">:=</span> director<span class="token punctuation">{</span>        name<span class="token punctuation">:</span>               name<span class="token punctuation">,</span>        goRestfulContainer<span class="token punctuation">:</span> gorestfulContainer<span class="token punctuation">,</span>        nonGoRestfulMux<span class="token punctuation">:</span>    nonGoRestfulMux<span class="token punctuation">,</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token operator">&amp;</span>APIServerHandler<span class="token punctuation">{</span>        FullHandlerChain<span class="token punctuation">:</span>   <span class="token function">handlerChainBuilder</span><span class="token punctuation">(</span>director<span class="token punctuation">)</span><span class="token punctuation">,</span>        GoRestfulContainer<span class="token punctuation">:</span> gorestfulContainer<span class="token punctuation">,</span>        NonGoRestfulMux<span class="token punctuation">:</span>    nonGoRestfulMux<span class="token punctuation">,</span>        Director<span class="token punctuation">:</span>           director<span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-go"><code class="language-go"><span class="token comment" spellcheck="true">// NewContainer creates a new Container using a new ServeMux and default router (CurlyRouter)</span><span class="token keyword">func</span> <span class="token function">NewContainer</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span>Container <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token operator">&amp;</span>Container<span class="token punctuation">{</span>        webServices<span class="token punctuation">:</span>            <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">*</span>WebService<span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>        ServeMux<span class="token punctuation">:</span>               http<span class="token punctuation">.</span><span class="token function">NewServeMux</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        isRegisteredOnRoot<span class="token punctuation">:</span>     <span class="token boolean">false</span><span class="token punctuation">,</span>        containerFilters<span class="token punctuation">:</span>       <span class="token punctuation">[</span><span class="token punctuation">]</span>FilterFunction<span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>        doNotRecover<span class="token punctuation">:</span>           <span class="token boolean">true</span><span class="token punctuation">,</span>        recoverHandleFunc<span class="token punctuation">:</span>      logStackOnRecover<span class="token punctuation">,</span>        serviceErrorHandleFunc<span class="token punctuation">:</span> writeServiceError<span class="token punctuation">,</span>        router<span class="token punctuation">:</span>                 CurlyRouter<span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>        contentEncodingEnabled<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="API安装入口"><a href="#API安装入口" class="headerlink" title="API安装入口"></a>API安装入口</h4><pre class=" language-java"><code class="language-java">    m <span class="token operator">:</span><span class="token operator">=</span> <span class="token operator">&amp;</span>Master<span class="token punctuation">{</span>        GenericAPIServer<span class="token operator">:</span>          s<span class="token punctuation">,</span>        ClusterAuthenticationInfo<span class="token operator">:</span> c<span class="token punctuation">.</span>ExtraConfig<span class="token punctuation">.</span>ClusterAuthenticationInfo<span class="token punctuation">,</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// install legacy rest storage</span>    <span class="token keyword">if</span> c<span class="token punctuation">.</span>ExtraConfig<span class="token punctuation">.</span>APIResourceConfigSource<span class="token punctuation">.</span><span class="token function">VersionEnabled</span><span class="token punctuation">(</span>apiv1<span class="token punctuation">.</span>SchemeGroupVersion<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>        <span class="token keyword">if</span> err <span class="token operator">:</span><span class="token operator">=</span> m<span class="token punctuation">.</span><span class="token function">InstallLegacyAPI</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>c<span class="token punctuation">,</span> c<span class="token punctuation">.</span>GenericConfig<span class="token punctuation">.</span>RESTOptionsGetter<span class="token punctuation">,</span> legacyRESTStorageProvider<span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">!=</span> nil <span class="token punctuation">{</span>            <span class="token keyword">return</span> nil<span class="token punctuation">,</span> err        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token keyword">if</span> err <span class="token operator">:</span><span class="token operator">=</span> m<span class="token punctuation">.</span><span class="token function">InstallAPIs</span><span class="token punctuation">(</span>c<span class="token punctuation">.</span>ExtraConfig<span class="token punctuation">.</span>APIResourceConfigSource<span class="token punctuation">,</span> c<span class="token punctuation">.</span>GenericConfig<span class="token punctuation">.</span>RESTOptionsGetter<span class="token punctuation">,</span> restStorageProviders<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">!=</span> nil <span class="token punctuation">{</span>        <span class="token keyword">return</span> nil<span class="token punctuation">,</span> err    <span class="token punctuation">}</span></code></pre><p>前面已经分析过了。 </p><h4 id="Container的启动"><a href="#Container的启动" class="headerlink" title="Container的启动"></a>Container的启动</h4><p>Container即GenericAPIServer中的Handler。GenericAPIServer的Run()方法中会启动监听。</p><h4 id="resthandler"><a href="#resthandler" class="headerlink" title="resthandler"></a>resthandler</h4><p>之前已经分析到，Kubernetes是如何注册API的。Kubernetes会把对应路径上的请求交给对应的resthandler处理。所以，resthandler是对请求进行处理并响应的函数。在Kubernetes中，给每一种动作设置了对应的resthandler，如下表格所示(只列出了主要部分)：</p><table><thead><tr><th>动作</th><th>函数</th></tr></thead><tbody><tr><td>GET</td><td>GetResource</td></tr><tr><td>LIST</td><td>ListResource</td></tr><tr><td>PUT</td><td>UpdateResource</td></tr><tr><td>PATCH</td><td>PatchResource</td></tr><tr><td>POST</td><td>CreateResource</td></tr><tr><td>DELETE</td><td>DeleteResource</td></tr><tr><td>WATCH</td><td>ListResource</td></tr></tbody></table><p>调用路径：</p><pre><code>master.goInstallLegacyAPI()-&gt; InstallLegacyAPIGroup()-&gt; installAPIResources()-&gt; InstallREST()-&gt; Install()-&gt; registerResourceHandlers()</code></pre><pre class=" language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token punctuation">(</span>a <span class="token operator">*</span>APIInstaller<span class="token punctuation">)</span> <span class="token function">registerResourceHandlers</span><span class="token punctuation">(</span>path <span class="token builtin">string</span><span class="token punctuation">,</span> storage rest<span class="token punctuation">.</span>Storage<span class="token punctuation">,</span> ws <span class="token operator">*</span>restful<span class="token punctuation">.</span>WebService<span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token operator">*</span>metav1<span class="token punctuation">.</span>APIResource<span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    admit <span class="token operator">:=</span> a<span class="token punctuation">.</span>group<span class="token punctuation">.</span>Admit    optionsExternalVersion <span class="token operator">:=</span> a<span class="token punctuation">.</span>group<span class="token punctuation">.</span>GroupVersion    <span class="token keyword">if</span> a<span class="token punctuation">.</span>group<span class="token punctuation">.</span>OptionsExternalVersion <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>        optionsExternalVersion <span class="token operator">=</span> <span class="token operator">*</span>a<span class="token punctuation">.</span>group<span class="token punctuation">.</span>OptionsExternalVersion    <span class="token punctuation">}</span>    resource<span class="token punctuation">,</span> subresource<span class="token punctuation">,</span> err <span class="token operator">:=</span> <span class="token function">splitSubresource</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span>    <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> err    <span class="token punctuation">}</span>    group<span class="token punctuation">,</span> version <span class="token operator">:=</span> a<span class="token punctuation">.</span>group<span class="token punctuation">.</span>GroupVersion<span class="token punctuation">.</span>Group<span class="token punctuation">,</span> a<span class="token punctuation">.</span>group<span class="token punctuation">.</span>GroupVersion<span class="token punctuation">.</span>Version    fqKindToRegister<span class="token punctuation">,</span> err <span class="token operator">:=</span> <span class="token function">GetResourceKind</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span>group<span class="token punctuation">.</span>GroupVersion<span class="token punctuation">,</span> storage<span class="token punctuation">,</span> a<span class="token punctuation">.</span>group<span class="token punctuation">.</span>Typer<span class="token punctuation">)</span>    <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> err    <span class="token punctuation">}</span>    versionedPtr<span class="token punctuation">,</span> err <span class="token operator">:=</span> a<span class="token punctuation">.</span>group<span class="token punctuation">.</span>Creater<span class="token punctuation">.</span><span class="token function">New</span><span class="token punctuation">(</span>fqKindToRegister<span class="token punctuation">)</span>    <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> err    <span class="token punctuation">}</span>    defaultVersionedObject <span class="token operator">:=</span> <span class="token function">indirectArbitraryPointer</span><span class="token punctuation">(</span>versionedPtr<span class="token punctuation">)</span>    kind <span class="token operator">:=</span> fqKindToRegister<span class="token punctuation">.</span>Kind    isSubresource <span class="token operator">:=</span> <span class="token function">len</span><span class="token punctuation">(</span>subresource<span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">0</span>    <span class="token comment" spellcheck="true">// If there is a subresource, namespace scoping is defined by the parent resource</span>    namespaceScoped <span class="token operator">:=</span> <span class="token boolean">true</span>    <span class="token keyword">if</span> isSubresource <span class="token punctuation">{</span>        parentStorage<span class="token punctuation">,</span> ok <span class="token operator">:=</span> a<span class="token punctuation">.</span>group<span class="token punctuation">.</span>Storage<span class="token punctuation">[</span>resource<span class="token punctuation">]</span>        <span class="token keyword">if</span> <span class="token operator">!</span>ok <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> fmt<span class="token punctuation">.</span><span class="token function">Errorf</span><span class="token punctuation">(</span><span class="token string">"missing parent storage: %q"</span><span class="token punctuation">,</span> resource<span class="token punctuation">)</span>        <span class="token punctuation">}</span>        scoper<span class="token punctuation">,</span> ok <span class="token operator">:=</span> parentStorage<span class="token punctuation">.</span><span class="token punctuation">(</span>rest<span class="token punctuation">.</span>Scoper<span class="token punctuation">)</span>        <span class="token keyword">if</span> <span class="token operator">!</span>ok <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> fmt<span class="token punctuation">.</span><span class="token function">Errorf</span><span class="token punctuation">(</span><span class="token string">"%q must implement scoper"</span><span class="token punctuation">,</span> resource<span class="token punctuation">)</span>        <span class="token punctuation">}</span>        namespaceScoped <span class="token operator">=</span> scoper<span class="token punctuation">.</span><span class="token function">NamespaceScoped</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        scoper<span class="token punctuation">,</span> ok <span class="token operator">:=</span> storage<span class="token punctuation">.</span><span class="token punctuation">(</span>rest<span class="token punctuation">.</span>Scoper<span class="token punctuation">)</span>        <span class="token keyword">if</span> <span class="token operator">!</span>ok <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> fmt<span class="token punctuation">.</span><span class="token function">Errorf</span><span class="token punctuation">(</span><span class="token string">"%q must implement scoper"</span><span class="token punctuation">,</span> resource<span class="token punctuation">)</span>        <span class="token punctuation">}</span>        namespaceScoped <span class="token operator">=</span> scoper<span class="token punctuation">.</span><span class="token function">NamespaceScoped</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// what verbs are supported by the storage, used to know what verbs we support per path</span>    creater<span class="token punctuation">,</span> isCreater <span class="token operator">:=</span> storage<span class="token punctuation">.</span><span class="token punctuation">(</span>rest<span class="token punctuation">.</span>Creater<span class="token punctuation">)</span>    namedCreater<span class="token punctuation">,</span> isNamedCreater <span class="token operator">:=</span> storage<span class="token punctuation">.</span><span class="token punctuation">(</span>rest<span class="token punctuation">.</span>NamedCreater<span class="token punctuation">)</span>    lister<span class="token punctuation">,</span> isLister <span class="token operator">:=</span> storage<span class="token punctuation">.</span><span class="token punctuation">(</span>rest<span class="token punctuation">.</span>Lister<span class="token punctuation">)</span>    getter<span class="token punctuation">,</span> isGetter <span class="token operator">:=</span> storage<span class="token punctuation">.</span><span class="token punctuation">(</span>rest<span class="token punctuation">.</span>Getter<span class="token punctuation">)</span>    getterWithOptions<span class="token punctuation">,</span> isGetterWithOptions <span class="token operator">:=</span> storage<span class="token punctuation">.</span><span class="token punctuation">(</span>rest<span class="token punctuation">.</span>GetterWithOptions<span class="token punctuation">)</span>    gracefulDeleter<span class="token punctuation">,</span> isGracefulDeleter <span class="token operator">:=</span> storage<span class="token punctuation">.</span><span class="token punctuation">(</span>rest<span class="token punctuation">.</span>GracefulDeleter<span class="token punctuation">)</span>    collectionDeleter<span class="token punctuation">,</span> isCollectionDeleter <span class="token operator">:=</span> storage<span class="token punctuation">.</span><span class="token punctuation">(</span>rest<span class="token punctuation">.</span>CollectionDeleter<span class="token punctuation">)</span>    updater<span class="token punctuation">,</span> isUpdater <span class="token operator">:=</span> storage<span class="token punctuation">.</span><span class="token punctuation">(</span>rest<span class="token punctuation">.</span>Updater<span class="token punctuation">)</span>    patcher<span class="token punctuation">,</span> isPatcher <span class="token operator">:=</span> storage<span class="token punctuation">.</span><span class="token punctuation">(</span>rest<span class="token punctuation">.</span>Patcher<span class="token punctuation">)</span>    watcher<span class="token punctuation">,</span> isWatcher <span class="token operator">:=</span> storage<span class="token punctuation">.</span><span class="token punctuation">(</span>rest<span class="token punctuation">.</span>Watcher<span class="token punctuation">)</span>    connecter<span class="token punctuation">,</span> isConnecter <span class="token operator">:=</span> storage<span class="token punctuation">.</span><span class="token punctuation">(</span>rest<span class="token punctuation">.</span>Connecter<span class="token punctuation">)</span>    storageMeta<span class="token punctuation">,</span> isMetadata <span class="token operator">:=</span> storage<span class="token punctuation">.</span><span class="token punctuation">(</span>rest<span class="token punctuation">.</span>StorageMetadata<span class="token punctuation">)</span>    storageVersionProvider<span class="token punctuation">,</span> isStorageVersionProvider <span class="token operator">:=</span> storage<span class="token punctuation">.</span><span class="token punctuation">(</span>rest<span class="token punctuation">.</span>StorageVersionProvider<span class="token punctuation">)</span>    <span class="token keyword">if</span> <span class="token operator">!</span>isMetadata <span class="token punctuation">{</span>        storageMeta <span class="token operator">=</span> defaultStorageMetadata<span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token punctuation">}</span>    exporter<span class="token punctuation">,</span> isExporter <span class="token operator">:=</span> storage<span class="token punctuation">.</span><span class="token punctuation">(</span>rest<span class="token punctuation">.</span>Exporter<span class="token punctuation">)</span>    <span class="token keyword">if</span> <span class="token operator">!</span>isExporter <span class="token punctuation">{</span>        exporter <span class="token operator">=</span> <span class="token boolean">nil</span>    <span class="token punctuation">}</span>    versionedExportOptions<span class="token punctuation">,</span> err <span class="token operator">:=</span> a<span class="token punctuation">.</span>group<span class="token punctuation">.</span>Creater<span class="token punctuation">.</span><span class="token function">New</span><span class="token punctuation">(</span>optionsExternalVersion<span class="token punctuation">.</span><span class="token function">WithKind</span><span class="token punctuation">(</span><span class="token string">"ExportOptions"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> err    <span class="token punctuation">}</span>    <span class="token keyword">if</span> isNamedCreater <span class="token punctuation">{</span>        isCreater <span class="token operator">=</span> <span class="token boolean">true</span>    <span class="token punctuation">}</span>    <span class="token keyword">var</span> versionedList <span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token keyword">if</span> isLister <span class="token punctuation">{</span>        list <span class="token operator">:=</span> lister<span class="token punctuation">.</span><span class="token function">NewList</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        listGVKs<span class="token punctuation">,</span> <span class="token boolean">_</span><span class="token punctuation">,</span> err <span class="token operator">:=</span> a<span class="token punctuation">.</span>group<span class="token punctuation">.</span>Typer<span class="token punctuation">.</span><span class="token function">ObjectKinds</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span>        <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> err        <span class="token punctuation">}</span>        versionedListPtr<span class="token punctuation">,</span> err <span class="token operator">:=</span> a<span class="token punctuation">.</span>group<span class="token punctuation">.</span>Creater<span class="token punctuation">.</span><span class="token function">New</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span>group<span class="token punctuation">.</span>GroupVersion<span class="token punctuation">.</span><span class="token function">WithKind</span><span class="token punctuation">(</span>listGVKs<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>Kind<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> err        <span class="token punctuation">}</span>        versionedList <span class="token operator">=</span> <span class="token function">indirectArbitraryPointer</span><span class="token punctuation">(</span>versionedListPtr<span class="token punctuation">)</span>    <span class="token punctuation">}</span>    versionedListOptions<span class="token punctuation">,</span> err <span class="token operator">:=</span> a<span class="token punctuation">.</span>group<span class="token punctuation">.</span>Creater<span class="token punctuation">.</span><span class="token function">New</span><span class="token punctuation">(</span>optionsExternalVersion<span class="token punctuation">.</span><span class="token function">WithKind</span><span class="token punctuation">(</span><span class="token string">"ListOptions"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> err    <span class="token punctuation">}</span>    versionedCreateOptions<span class="token punctuation">,</span> err <span class="token operator">:=</span> a<span class="token punctuation">.</span>group<span class="token punctuation">.</span>Creater<span class="token punctuation">.</span><span class="token function">New</span><span class="token punctuation">(</span>optionsExternalVersion<span class="token punctuation">.</span><span class="token function">WithKind</span><span class="token punctuation">(</span><span class="token string">"CreateOptions"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> err    <span class="token punctuation">}</span>    versionedPatchOptions<span class="token punctuation">,</span> err <span class="token operator">:=</span> a<span class="token punctuation">.</span>group<span class="token punctuation">.</span>Creater<span class="token punctuation">.</span><span class="token function">New</span><span class="token punctuation">(</span>optionsExternalVersion<span class="token punctuation">.</span><span class="token function">WithKind</span><span class="token punctuation">(</span><span class="token string">"PatchOptions"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> err    <span class="token punctuation">}</span>    versionedUpdateOptions<span class="token punctuation">,</span> err <span class="token operator">:=</span> a<span class="token punctuation">.</span>group<span class="token punctuation">.</span>Creater<span class="token punctuation">.</span><span class="token function">New</span><span class="token punctuation">(</span>optionsExternalVersion<span class="token punctuation">.</span><span class="token function">WithKind</span><span class="token punctuation">(</span><span class="token string">"UpdateOptions"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> err    <span class="token punctuation">}</span>    <span class="token keyword">var</span> versionedDeleteOptions runtime<span class="token punctuation">.</span>Object    <span class="token keyword">var</span> versionedDeleterObject <span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span>    deleteReturnsDeletedObject <span class="token operator">:=</span> <span class="token boolean">false</span>    <span class="token keyword">if</span> isGracefulDeleter <span class="token punctuation">{</span>        versionedDeleteOptions<span class="token punctuation">,</span> err <span class="token operator">=</span> a<span class="token punctuation">.</span>group<span class="token punctuation">.</span>Creater<span class="token punctuation">.</span><span class="token function">New</span><span class="token punctuation">(</span>optionsExternalVersion<span class="token punctuation">.</span><span class="token function">WithKind</span><span class="token punctuation">(</span><span class="token string">"DeleteOptions"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> err        <span class="token punctuation">}</span>        versionedDeleterObject <span class="token operator">=</span> <span class="token function">indirectArbitraryPointer</span><span class="token punctuation">(</span>versionedDeleteOptions<span class="token punctuation">)</span>        <span class="token keyword">if</span> mayReturnFullObjectDeleter<span class="token punctuation">,</span> ok <span class="token operator">:=</span> storage<span class="token punctuation">.</span><span class="token punctuation">(</span>rest<span class="token punctuation">.</span>MayReturnFullObjectDeleter<span class="token punctuation">)</span><span class="token punctuation">;</span> ok <span class="token punctuation">{</span>            deleteReturnsDeletedObject <span class="token operator">=</span> mayReturnFullObjectDeleter<span class="token punctuation">.</span><span class="token function">DeleteReturnsDeletedObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    versionedStatusPtr<span class="token punctuation">,</span> err <span class="token operator">:=</span> a<span class="token punctuation">.</span>group<span class="token punctuation">.</span>Creater<span class="token punctuation">.</span><span class="token function">New</span><span class="token punctuation">(</span>optionsExternalVersion<span class="token punctuation">.</span><span class="token function">WithKind</span><span class="token punctuation">(</span><span class="token string">"Status"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> err    <span class="token punctuation">}</span>    versionedStatus <span class="token operator">:=</span> <span class="token function">indirectArbitraryPointer</span><span class="token punctuation">(</span>versionedStatusPtr<span class="token punctuation">)</span>    <span class="token keyword">var</span> <span class="token punctuation">(</span>        getOptions             runtime<span class="token punctuation">.</span>Object        versionedGetOptions    runtime<span class="token punctuation">.</span>Object        getOptionsInternalKind schema<span class="token punctuation">.</span>GroupVersionKind        getSubpath             <span class="token builtin">bool</span>    <span class="token punctuation">)</span>    <span class="token keyword">if</span> isGetterWithOptions <span class="token punctuation">{</span>        getOptions<span class="token punctuation">,</span> getSubpath<span class="token punctuation">,</span> <span class="token boolean">_</span> <span class="token operator">=</span> getterWithOptions<span class="token punctuation">.</span><span class="token function">NewGetOptions</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        getOptionsInternalKinds<span class="token punctuation">,</span> <span class="token boolean">_</span><span class="token punctuation">,</span> err <span class="token operator">:=</span> a<span class="token punctuation">.</span>group<span class="token punctuation">.</span>Typer<span class="token punctuation">.</span><span class="token function">ObjectKinds</span><span class="token punctuation">(</span>getOptions<span class="token punctuation">)</span>        <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> err        <span class="token punctuation">}</span>        getOptionsInternalKind <span class="token operator">=</span> getOptionsInternalKinds<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>        versionedGetOptions<span class="token punctuation">,</span> err <span class="token operator">=</span> a<span class="token punctuation">.</span>group<span class="token punctuation">.</span>Creater<span class="token punctuation">.</span><span class="token function">New</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span>group<span class="token punctuation">.</span>GroupVersion<span class="token punctuation">.</span><span class="token function">WithKind</span><span class="token punctuation">(</span>getOptionsInternalKind<span class="token punctuation">.</span>Kind<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>            versionedGetOptions<span class="token punctuation">,</span> err <span class="token operator">=</span> a<span class="token punctuation">.</span>group<span class="token punctuation">.</span>Creater<span class="token punctuation">.</span><span class="token function">New</span><span class="token punctuation">(</span>optionsExternalVersion<span class="token punctuation">.</span><span class="token function">WithKind</span><span class="token punctuation">(</span>getOptionsInternalKind<span class="token punctuation">.</span>Kind<span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> err            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        isGetter <span class="token operator">=</span> <span class="token boolean">true</span>    <span class="token punctuation">}</span>    <span class="token keyword">var</span> versionedWatchEvent <span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token keyword">if</span> isWatcher <span class="token punctuation">{</span>        versionedWatchEventPtr<span class="token punctuation">,</span> err <span class="token operator">:=</span> a<span class="token punctuation">.</span>group<span class="token punctuation">.</span>Creater<span class="token punctuation">.</span><span class="token function">New</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span>group<span class="token punctuation">.</span>GroupVersion<span class="token punctuation">.</span><span class="token function">WithKind</span><span class="token punctuation">(</span><span class="token string">"WatchEvent"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> err        <span class="token punctuation">}</span>        versionedWatchEvent <span class="token operator">=</span> <span class="token function">indirectArbitraryPointer</span><span class="token punctuation">(</span>versionedWatchEventPtr<span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token keyword">var</span> <span class="token punctuation">(</span>        connectOptions             runtime<span class="token punctuation">.</span>Object        versionedConnectOptions    runtime<span class="token punctuation">.</span>Object        connectOptionsInternalKind schema<span class="token punctuation">.</span>GroupVersionKind        connectSubpath             <span class="token builtin">bool</span>    <span class="token punctuation">)</span>    <span class="token keyword">if</span> isConnecter <span class="token punctuation">{</span>        connectOptions<span class="token punctuation">,</span> connectSubpath<span class="token punctuation">,</span> <span class="token boolean">_</span> <span class="token operator">=</span> connecter<span class="token punctuation">.</span><span class="token function">NewConnectOptions</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> connectOptions <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>            connectOptionsInternalKinds<span class="token punctuation">,</span> <span class="token boolean">_</span><span class="token punctuation">,</span> err <span class="token operator">:=</span> a<span class="token punctuation">.</span>group<span class="token punctuation">.</span>Typer<span class="token punctuation">.</span><span class="token function">ObjectKinds</span><span class="token punctuation">(</span>connectOptions<span class="token punctuation">)</span>            <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> err            <span class="token punctuation">}</span>            connectOptionsInternalKind <span class="token operator">=</span> connectOptionsInternalKinds<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>            versionedConnectOptions<span class="token punctuation">,</span> err <span class="token operator">=</span> a<span class="token punctuation">.</span>group<span class="token punctuation">.</span>Creater<span class="token punctuation">.</span><span class="token function">New</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span>group<span class="token punctuation">.</span>GroupVersion<span class="token punctuation">.</span><span class="token function">WithKind</span><span class="token punctuation">(</span>connectOptionsInternalKind<span class="token punctuation">.</span>Kind<span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>                versionedConnectOptions<span class="token punctuation">,</span> err <span class="token operator">=</span> a<span class="token punctuation">.</span>group<span class="token punctuation">.</span>Creater<span class="token punctuation">.</span><span class="token function">New</span><span class="token punctuation">(</span>optionsExternalVersion<span class="token punctuation">.</span><span class="token function">WithKind</span><span class="token punctuation">(</span>connectOptionsInternalKind<span class="token punctuation">.</span>Kind<span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>                    <span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> err                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    allowWatchList <span class="token operator">:=</span> isWatcher <span class="token operator">&amp;&amp;</span> isLister <span class="token comment" spellcheck="true">// watching on lists is allowed only for kinds that support both watch and list.</span>    nameParam <span class="token operator">:=</span> ws<span class="token punctuation">.</span><span class="token function">PathParameter</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">,</span> <span class="token string">"name of the "</span><span class="token operator">+</span>kind<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">DataType</span><span class="token punctuation">(</span><span class="token string">"string"</span><span class="token punctuation">)</span>    pathParam <span class="token operator">:=</span> ws<span class="token punctuation">.</span><span class="token function">PathParameter</span><span class="token punctuation">(</span><span class="token string">"path"</span><span class="token punctuation">,</span> <span class="token string">"path to the resource"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">DataType</span><span class="token punctuation">(</span><span class="token string">"string"</span><span class="token punctuation">)</span>    params <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">*</span>restful<span class="token punctuation">.</span>Parameter<span class="token punctuation">{</span><span class="token punctuation">}</span>    actions <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>action<span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token keyword">var</span> resourceKind <span class="token builtin">string</span>    kindProvider<span class="token punctuation">,</span> ok <span class="token operator">:=</span> storage<span class="token punctuation">.</span><span class="token punctuation">(</span>rest<span class="token punctuation">.</span>KindProvider<span class="token punctuation">)</span>    <span class="token keyword">if</span> ok <span class="token punctuation">{</span>        resourceKind <span class="token operator">=</span> kindProvider<span class="token punctuation">.</span><span class="token function">Kind</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        resourceKind <span class="token operator">=</span> kind    <span class="token punctuation">}</span>    tableProvider<span class="token punctuation">,</span> <span class="token boolean">_</span> <span class="token operator">:=</span> storage<span class="token punctuation">.</span><span class="token punctuation">(</span>rest<span class="token punctuation">.</span>TableConvertor<span class="token punctuation">)</span>    <span class="token keyword">var</span> apiResource metav1<span class="token punctuation">.</span>APIResource    <span class="token keyword">if</span> utilfeature<span class="token punctuation">.</span>DefaultFeatureGate<span class="token punctuation">.</span><span class="token function">Enabled</span><span class="token punctuation">(</span>features<span class="token punctuation">.</span>StorageVersionHash<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span>        isStorageVersionProvider <span class="token operator">&amp;&amp;</span>        storageVersionProvider<span class="token punctuation">.</span><span class="token function">StorageVersion</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>        versioner <span class="token operator">:=</span> storageVersionProvider<span class="token punctuation">.</span><span class="token function">StorageVersion</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        gvk<span class="token punctuation">,</span> err <span class="token operator">:=</span> <span class="token function">getStorageVersionKind</span><span class="token punctuation">(</span>versioner<span class="token punctuation">,</span> storage<span class="token punctuation">,</span> a<span class="token punctuation">.</span>group<span class="token punctuation">.</span>Typer<span class="token punctuation">)</span>        <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> err        <span class="token punctuation">}</span>        apiResource<span class="token punctuation">.</span>StorageVersionHash <span class="token operator">=</span> discovery<span class="token punctuation">.</span><span class="token function">StorageVersionHash</span><span class="token punctuation">(</span>gvk<span class="token punctuation">.</span>Group<span class="token punctuation">,</span> gvk<span class="token punctuation">.</span>Version<span class="token punctuation">,</span> gvk<span class="token punctuation">.</span>Kind<span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// Get the list of actions for the given scope.</span>    <span class="token keyword">switch</span> <span class="token punctuation">{</span>    <span class="token keyword">case</span> <span class="token operator">!</span>namespaceScoped<span class="token punctuation">:</span>        <span class="token comment" spellcheck="true">// Handle non-namespace scoped resources like nodes.</span>        resourcePath <span class="token operator">:=</span> resource        resourceParams <span class="token operator">:=</span> params        itemPath <span class="token operator">:=</span> resourcePath <span class="token operator">+</span> <span class="token string">"/{name}"</span>        nameParams <span class="token operator">:=</span> <span class="token function">append</span><span class="token punctuation">(</span>params<span class="token punctuation">,</span> nameParam<span class="token punctuation">)</span>        proxyParams <span class="token operator">:=</span> <span class="token function">append</span><span class="token punctuation">(</span>nameParams<span class="token punctuation">,</span> pathParam<span class="token punctuation">)</span>        suffix <span class="token operator">:=</span> <span class="token string">""</span>        <span class="token keyword">if</span> isSubresource <span class="token punctuation">{</span>            suffix <span class="token operator">=</span> <span class="token string">"/"</span> <span class="token operator">+</span> subresource            itemPath <span class="token operator">=</span> itemPath <span class="token operator">+</span> suffix            resourcePath <span class="token operator">=</span> itemPath            resourceParams <span class="token operator">=</span> nameParams        <span class="token punctuation">}</span>        apiResource<span class="token punctuation">.</span>Name <span class="token operator">=</span> path        apiResource<span class="token punctuation">.</span>Namespaced <span class="token operator">=</span> <span class="token boolean">false</span>        apiResource<span class="token punctuation">.</span>Kind <span class="token operator">=</span> resourceKind        namer <span class="token operator">:=</span> handlers<span class="token punctuation">.</span>ContextBasedNaming<span class="token punctuation">{</span>            SelfLinker<span class="token punctuation">:</span>         a<span class="token punctuation">.</span>group<span class="token punctuation">.</span>Linker<span class="token punctuation">,</span>            ClusterScoped<span class="token punctuation">:</span>      <span class="token boolean">true</span><span class="token punctuation">,</span>            SelfLinkPathPrefix<span class="token punctuation">:</span> gpath<span class="token punctuation">.</span><span class="token function">Join</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span>prefix<span class="token punctuation">,</span> resource<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"/"</span><span class="token punctuation">,</span>            SelfLinkPathSuffix<span class="token punctuation">:</span> suffix<span class="token punctuation">,</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// Handler for standard REST verbs (GET, PUT, POST and DELETE).</span>        <span class="token comment" spellcheck="true">// Add actions at the resource path: /api/apiVersion/resource</span>        actions <span class="token operator">=</span> <span class="token function">appendIf</span><span class="token punctuation">(</span>actions<span class="token punctuation">,</span> action<span class="token punctuation">{</span><span class="token string">"LIST"</span><span class="token punctuation">,</span> resourcePath<span class="token punctuation">,</span> resourceParams<span class="token punctuation">,</span> namer<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">}</span><span class="token punctuation">,</span> isLister<span class="token punctuation">)</span>        actions <span class="token operator">=</span> <span class="token function">appendIf</span><span class="token punctuation">(</span>actions<span class="token punctuation">,</span> action<span class="token punctuation">{</span><span class="token string">"POST"</span><span class="token punctuation">,</span> resourcePath<span class="token punctuation">,</span> resourceParams<span class="token punctuation">,</span> namer<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">}</span><span class="token punctuation">,</span> isCreater<span class="token punctuation">)</span>        actions <span class="token operator">=</span> <span class="token function">appendIf</span><span class="token punctuation">(</span>actions<span class="token punctuation">,</span> action<span class="token punctuation">{</span><span class="token string">"DELETECOLLECTION"</span><span class="token punctuation">,</span> resourcePath<span class="token punctuation">,</span> resourceParams<span class="token punctuation">,</span> namer<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">}</span><span class="token punctuation">,</span> isCollectionDeleter<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">// DEPRECATED in 1.11</span>        actions <span class="token operator">=</span> <span class="token function">appendIf</span><span class="token punctuation">(</span>actions<span class="token punctuation">,</span> action<span class="token punctuation">{</span><span class="token string">"WATCHLIST"</span><span class="token punctuation">,</span> <span class="token string">"watch/"</span> <span class="token operator">+</span> resourcePath<span class="token punctuation">,</span> resourceParams<span class="token punctuation">,</span> namer<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">}</span><span class="token punctuation">,</span> allowWatchList<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">// Add actions at the item path: /api/apiVersion/resource/{name}</span>        actions <span class="token operator">=</span> <span class="token function">appendIf</span><span class="token punctuation">(</span>actions<span class="token punctuation">,</span> action<span class="token punctuation">{</span><span class="token string">"GET"</span><span class="token punctuation">,</span> itemPath<span class="token punctuation">,</span> nameParams<span class="token punctuation">,</span> namer<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">}</span><span class="token punctuation">,</span> isGetter<span class="token punctuation">)</span>        <span class="token keyword">if</span> getSubpath <span class="token punctuation">{</span>            actions <span class="token operator">=</span> <span class="token function">appendIf</span><span class="token punctuation">(</span>actions<span class="token punctuation">,</span> action<span class="token punctuation">{</span><span class="token string">"GET"</span><span class="token punctuation">,</span> itemPath <span class="token operator">+</span> <span class="token string">"/{path:*}"</span><span class="token punctuation">,</span> proxyParams<span class="token punctuation">,</span> namer<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">}</span><span class="token punctuation">,</span> isGetter<span class="token punctuation">)</span>        <span class="token punctuation">}</span>        actions <span class="token operator">=</span> <span class="token function">appendIf</span><span class="token punctuation">(</span>actions<span class="token punctuation">,</span> action<span class="token punctuation">{</span><span class="token string">"PUT"</span><span class="token punctuation">,</span> itemPath<span class="token punctuation">,</span> nameParams<span class="token punctuation">,</span> namer<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">}</span><span class="token punctuation">,</span> isUpdater<span class="token punctuation">)</span>        actions <span class="token operator">=</span> <span class="token function">appendIf</span><span class="token punctuation">(</span>actions<span class="token punctuation">,</span> action<span class="token punctuation">{</span><span class="token string">"PATCH"</span><span class="token punctuation">,</span> itemPath<span class="token punctuation">,</span> nameParams<span class="token punctuation">,</span> namer<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">}</span><span class="token punctuation">,</span> isPatcher<span class="token punctuation">)</span>        actions <span class="token operator">=</span> <span class="token function">appendIf</span><span class="token punctuation">(</span>actions<span class="token punctuation">,</span> action<span class="token punctuation">{</span><span class="token string">"DELETE"</span><span class="token punctuation">,</span> itemPath<span class="token punctuation">,</span> nameParams<span class="token punctuation">,</span> namer<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">}</span><span class="token punctuation">,</span> isGracefulDeleter<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">// DEPRECATED in 1.11</span>        actions <span class="token operator">=</span> <span class="token function">appendIf</span><span class="token punctuation">(</span>actions<span class="token punctuation">,</span> action<span class="token punctuation">{</span><span class="token string">"WATCH"</span><span class="token punctuation">,</span> <span class="token string">"watch/"</span> <span class="token operator">+</span> itemPath<span class="token punctuation">,</span> nameParams<span class="token punctuation">,</span> namer<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">}</span><span class="token punctuation">,</span> isWatcher<span class="token punctuation">)</span>        actions <span class="token operator">=</span> <span class="token function">appendIf</span><span class="token punctuation">(</span>actions<span class="token punctuation">,</span> action<span class="token punctuation">{</span><span class="token string">"CONNECT"</span><span class="token punctuation">,</span> itemPath<span class="token punctuation">,</span> nameParams<span class="token punctuation">,</span> namer<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">}</span><span class="token punctuation">,</span> isConnecter<span class="token punctuation">)</span>        actions <span class="token operator">=</span> <span class="token function">appendIf</span><span class="token punctuation">(</span>actions<span class="token punctuation">,</span> action<span class="token punctuation">{</span><span class="token string">"CONNECT"</span><span class="token punctuation">,</span> itemPath <span class="token operator">+</span> <span class="token string">"/{path:*}"</span><span class="token punctuation">,</span> proxyParams<span class="token punctuation">,</span> namer<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">}</span><span class="token punctuation">,</span> isConnecter <span class="token operator">&amp;&amp;</span> connectSubpath<span class="token punctuation">)</span>    <span class="token keyword">default</span><span class="token punctuation">:</span>        namespaceParamName <span class="token operator">:=</span> <span class="token string">"namespaces"</span>        <span class="token comment" spellcheck="true">// Handler for standard REST verbs (GET, PUT, POST and DELETE).</span>        namespaceParam <span class="token operator">:=</span> ws<span class="token punctuation">.</span><span class="token function">PathParameter</span><span class="token punctuation">(</span><span class="token string">"namespace"</span><span class="token punctuation">,</span> <span class="token string">"object name and auth scope, such as for teams and projects"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">DataType</span><span class="token punctuation">(</span><span class="token string">"string"</span><span class="token punctuation">)</span>        namespacedPath <span class="token operator">:=</span> namespaceParamName <span class="token operator">+</span> <span class="token string">"/{namespace}/"</span> <span class="token operator">+</span> resource        namespaceParams <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">*</span>restful<span class="token punctuation">.</span>Parameter<span class="token punctuation">{</span>namespaceParam<span class="token punctuation">}</span>        resourcePath <span class="token operator">:=</span> namespacedPath        resourceParams <span class="token operator">:=</span> namespaceParams        itemPath <span class="token operator">:=</span> namespacedPath <span class="token operator">+</span> <span class="token string">"/{name}"</span>        nameParams <span class="token operator">:=</span> <span class="token function">append</span><span class="token punctuation">(</span>namespaceParams<span class="token punctuation">,</span> nameParam<span class="token punctuation">)</span>        proxyParams <span class="token operator">:=</span> <span class="token function">append</span><span class="token punctuation">(</span>nameParams<span class="token punctuation">,</span> pathParam<span class="token punctuation">)</span>        itemPathSuffix <span class="token operator">:=</span> <span class="token string">""</span>        <span class="token keyword">if</span> isSubresource <span class="token punctuation">{</span>            itemPathSuffix <span class="token operator">=</span> <span class="token string">"/"</span> <span class="token operator">+</span> subresource            itemPath <span class="token operator">=</span> itemPath <span class="token operator">+</span> itemPathSuffix            resourcePath <span class="token operator">=</span> itemPath            resourceParams <span class="token operator">=</span> nameParams        <span class="token punctuation">}</span>        apiResource<span class="token punctuation">.</span>Name <span class="token operator">=</span> path        apiResource<span class="token punctuation">.</span>Namespaced <span class="token operator">=</span> <span class="token boolean">true</span>        apiResource<span class="token punctuation">.</span>Kind <span class="token operator">=</span> resourceKind        namer <span class="token operator">:=</span> handlers<span class="token punctuation">.</span>ContextBasedNaming<span class="token punctuation">{</span>            SelfLinker<span class="token punctuation">:</span>         a<span class="token punctuation">.</span>group<span class="token punctuation">.</span>Linker<span class="token punctuation">,</span>            ClusterScoped<span class="token punctuation">:</span>      <span class="token boolean">false</span><span class="token punctuation">,</span>            SelfLinkPathPrefix<span class="token punctuation">:</span> gpath<span class="token punctuation">.</span><span class="token function">Join</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span>prefix<span class="token punctuation">,</span> namespaceParamName<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"/"</span><span class="token punctuation">,</span>            SelfLinkPathSuffix<span class="token punctuation">:</span> itemPathSuffix<span class="token punctuation">,</span>        <span class="token punctuation">}</span>        actions <span class="token operator">=</span> <span class="token function">appendIf</span><span class="token punctuation">(</span>actions<span class="token punctuation">,</span> action<span class="token punctuation">{</span><span class="token string">"LIST"</span><span class="token punctuation">,</span> resourcePath<span class="token punctuation">,</span> resourceParams<span class="token punctuation">,</span> namer<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">}</span><span class="token punctuation">,</span> isLister<span class="token punctuation">)</span>        actions <span class="token operator">=</span> <span class="token function">appendIf</span><span class="token punctuation">(</span>actions<span class="token punctuation">,</span> action<span class="token punctuation">{</span><span class="token string">"POST"</span><span class="token punctuation">,</span> resourcePath<span class="token punctuation">,</span> resourceParams<span class="token punctuation">,</span> namer<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">}</span><span class="token punctuation">,</span> isCreater<span class="token punctuation">)</span>        actions <span class="token operator">=</span> <span class="token function">appendIf</span><span class="token punctuation">(</span>actions<span class="token punctuation">,</span> action<span class="token punctuation">{</span><span class="token string">"DELETECOLLECTION"</span><span class="token punctuation">,</span> resourcePath<span class="token punctuation">,</span> resourceParams<span class="token punctuation">,</span> namer<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">}</span><span class="token punctuation">,</span> isCollectionDeleter<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">// DEPRECATED in 1.11</span>        actions <span class="token operator">=</span> <span class="token function">appendIf</span><span class="token punctuation">(</span>actions<span class="token punctuation">,</span> action<span class="token punctuation">{</span><span class="token string">"WATCHLIST"</span><span class="token punctuation">,</span> <span class="token string">"watch/"</span> <span class="token operator">+</span> resourcePath<span class="token punctuation">,</span> resourceParams<span class="token punctuation">,</span> namer<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">}</span><span class="token punctuation">,</span> allowWatchList<span class="token punctuation">)</span>        actions <span class="token operator">=</span> <span class="token function">appendIf</span><span class="token punctuation">(</span>actions<span class="token punctuation">,</span> action<span class="token punctuation">{</span><span class="token string">"GET"</span><span class="token punctuation">,</span> itemPath<span class="token punctuation">,</span> nameParams<span class="token punctuation">,</span> namer<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">}</span><span class="token punctuation">,</span> isGetter<span class="token punctuation">)</span>        <span class="token keyword">if</span> getSubpath <span class="token punctuation">{</span>            actions <span class="token operator">=</span> <span class="token function">appendIf</span><span class="token punctuation">(</span>actions<span class="token punctuation">,</span> action<span class="token punctuation">{</span><span class="token string">"GET"</span><span class="token punctuation">,</span> itemPath <span class="token operator">+</span> <span class="token string">"/{path:*}"</span><span class="token punctuation">,</span> proxyParams<span class="token punctuation">,</span> namer<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">}</span><span class="token punctuation">,</span> isGetter<span class="token punctuation">)</span>        <span class="token punctuation">}</span>        actions <span class="token operator">=</span> <span class="token function">appendIf</span><span class="token punctuation">(</span>actions<span class="token punctuation">,</span> action<span class="token punctuation">{</span><span class="token string">"PUT"</span><span class="token punctuation">,</span> itemPath<span class="token punctuation">,</span> nameParams<span class="token punctuation">,</span> namer<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">}</span><span class="token punctuation">,</span> isUpdater<span class="token punctuation">)</span>        actions <span class="token operator">=</span> <span class="token function">appendIf</span><span class="token punctuation">(</span>actions<span class="token punctuation">,</span> action<span class="token punctuation">{</span><span class="token string">"PATCH"</span><span class="token punctuation">,</span> itemPath<span class="token punctuation">,</span> nameParams<span class="token punctuation">,</span> namer<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">}</span><span class="token punctuation">,</span> isPatcher<span class="token punctuation">)</span>        actions <span class="token operator">=</span> <span class="token function">appendIf</span><span class="token punctuation">(</span>actions<span class="token punctuation">,</span> action<span class="token punctuation">{</span><span class="token string">"DELETE"</span><span class="token punctuation">,</span> itemPath<span class="token punctuation">,</span> nameParams<span class="token punctuation">,</span> namer<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">}</span><span class="token punctuation">,</span> isGracefulDeleter<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">// DEPRECATED in 1.11</span>        actions <span class="token operator">=</span> <span class="token function">appendIf</span><span class="token punctuation">(</span>actions<span class="token punctuation">,</span> action<span class="token punctuation">{</span><span class="token string">"WATCH"</span><span class="token punctuation">,</span> <span class="token string">"watch/"</span> <span class="token operator">+</span> itemPath<span class="token punctuation">,</span> nameParams<span class="token punctuation">,</span> namer<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">}</span><span class="token punctuation">,</span> isWatcher<span class="token punctuation">)</span>        actions <span class="token operator">=</span> <span class="token function">appendIf</span><span class="token punctuation">(</span>actions<span class="token punctuation">,</span> action<span class="token punctuation">{</span><span class="token string">"CONNECT"</span><span class="token punctuation">,</span> itemPath<span class="token punctuation">,</span> nameParams<span class="token punctuation">,</span> namer<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">}</span><span class="token punctuation">,</span> isConnecter<span class="token punctuation">)</span>        actions <span class="token operator">=</span> <span class="token function">appendIf</span><span class="token punctuation">(</span>actions<span class="token punctuation">,</span> action<span class="token punctuation">{</span><span class="token string">"CONNECT"</span><span class="token punctuation">,</span> itemPath <span class="token operator">+</span> <span class="token string">"/{path:*}"</span><span class="token punctuation">,</span> proxyParams<span class="token punctuation">,</span> namer<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">}</span><span class="token punctuation">,</span> isConnecter <span class="token operator">&amp;&amp;</span> connectSubpath<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">// list or post across namespace.</span>        <span class="token comment" spellcheck="true">// For ex: LIST all pods in all namespaces by sending a LIST request at /api/apiVersion/pods.</span>        <span class="token comment" spellcheck="true">// TODO: more strongly type whether a resource allows these actions on "all namespaces" (bulk delete)</span>        <span class="token keyword">if</span> <span class="token operator">!</span>isSubresource <span class="token punctuation">{</span>            actions <span class="token operator">=</span> <span class="token function">appendIf</span><span class="token punctuation">(</span>actions<span class="token punctuation">,</span> action<span class="token punctuation">{</span><span class="token string">"LIST"</span><span class="token punctuation">,</span> resource<span class="token punctuation">,</span> params<span class="token punctuation">,</span> namer<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">}</span><span class="token punctuation">,</span> isLister<span class="token punctuation">)</span>            <span class="token comment" spellcheck="true">// DEPRECATED in 1.11</span>            actions <span class="token operator">=</span> <span class="token function">appendIf</span><span class="token punctuation">(</span>actions<span class="token punctuation">,</span> action<span class="token punctuation">{</span><span class="token string">"WATCHLIST"</span><span class="token punctuation">,</span> <span class="token string">"watch/"</span> <span class="token operator">+</span> resource<span class="token punctuation">,</span> params<span class="token punctuation">,</span> namer<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">}</span><span class="token punctuation">,</span> allowWatchList<span class="token punctuation">)</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// Create Routes for the actions.</span>    <span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> s <span class="token operator">:=</span> <span class="token keyword">range</span> a<span class="token punctuation">.</span>group<span class="token punctuation">.</span>Serializer<span class="token punctuation">.</span><span class="token function">SupportedMediaTypes</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token function">len</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span>MediaTypeSubType<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">||</span> <span class="token function">len</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span>MediaTypeType<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> fmt<span class="token punctuation">.</span><span class="token function">Errorf</span><span class="token punctuation">(</span><span class="token string">"all serializers in the group Serializer must have MediaTypeType and MediaTypeSubType set: %s"</span><span class="token punctuation">,</span> s<span class="token punctuation">.</span>MediaType<span class="token punctuation">)</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    mediaTypes<span class="token punctuation">,</span> streamMediaTypes <span class="token operator">:=</span> negotiation<span class="token punctuation">.</span><span class="token function">MediaTypesForSerializer</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span>group<span class="token punctuation">.</span>Serializer<span class="token punctuation">)</span>    allMediaTypes <span class="token operator">:=</span> <span class="token function">append</span><span class="token punctuation">(</span>mediaTypes<span class="token punctuation">,</span> streamMediaTypes<span class="token operator">...</span><span class="token punctuation">)</span>    ws<span class="token punctuation">.</span><span class="token function">Produces</span><span class="token punctuation">(</span>allMediaTypes<span class="token operator">...</span><span class="token punctuation">)</span>    kubeVerbs <span class="token operator">:=</span> <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token keyword">struct</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">{</span><span class="token punctuation">}</span>    reqScope <span class="token operator">:=</span> handlers<span class="token punctuation">.</span>RequestScope<span class="token punctuation">{</span>        Serializer<span class="token punctuation">:</span>      a<span class="token punctuation">.</span>group<span class="token punctuation">.</span>Serializer<span class="token punctuation">,</span>        ParameterCodec<span class="token punctuation">:</span>  a<span class="token punctuation">.</span>group<span class="token punctuation">.</span>ParameterCodec<span class="token punctuation">,</span>        Creater<span class="token punctuation">:</span>         a<span class="token punctuation">.</span>group<span class="token punctuation">.</span>Creater<span class="token punctuation">,</span>        Convertor<span class="token punctuation">:</span>       a<span class="token punctuation">.</span>group<span class="token punctuation">.</span>Convertor<span class="token punctuation">,</span>        Defaulter<span class="token punctuation">:</span>       a<span class="token punctuation">.</span>group<span class="token punctuation">.</span>Defaulter<span class="token punctuation">,</span>        Typer<span class="token punctuation">:</span>           a<span class="token punctuation">.</span>group<span class="token punctuation">.</span>Typer<span class="token punctuation">,</span>        UnsafeConvertor<span class="token punctuation">:</span> a<span class="token punctuation">.</span>group<span class="token punctuation">.</span>UnsafeConvertor<span class="token punctuation">,</span>        Authorizer<span class="token punctuation">:</span>      a<span class="token punctuation">.</span>group<span class="token punctuation">.</span>Authorizer<span class="token punctuation">,</span>        EquivalentResourceMapper<span class="token punctuation">:</span> a<span class="token punctuation">.</span>group<span class="token punctuation">.</span>EquivalentResourceRegistry<span class="token punctuation">,</span>        <span class="token comment" spellcheck="true">// TODO: Check for the interface on storage</span>        TableConvertor<span class="token punctuation">:</span> tableProvider<span class="token punctuation">,</span>        <span class="token comment" spellcheck="true">// TODO: This seems wrong for cross-group subresources. It makes an assumption that a subresource and its parent are in the same group version. Revisit this.</span>        Resource<span class="token punctuation">:</span>    a<span class="token punctuation">.</span>group<span class="token punctuation">.</span>GroupVersion<span class="token punctuation">.</span><span class="token function">WithResource</span><span class="token punctuation">(</span>resource<span class="token punctuation">)</span><span class="token punctuation">,</span>        Subresource<span class="token punctuation">:</span> subresource<span class="token punctuation">,</span>        Kind<span class="token punctuation">:</span>        fqKindToRegister<span class="token punctuation">,</span>        HubGroupVersion<span class="token punctuation">:</span> schema<span class="token punctuation">.</span>GroupVersion<span class="token punctuation">{</span>Group<span class="token punctuation">:</span> fqKindToRegister<span class="token punctuation">.</span>Group<span class="token punctuation">,</span> Version<span class="token punctuation">:</span> runtime<span class="token punctuation">.</span>APIVersionInternal<span class="token punctuation">}</span><span class="token punctuation">,</span>        MetaGroupVersion<span class="token punctuation">:</span> metav1<span class="token punctuation">.</span>SchemeGroupVersion<span class="token punctuation">,</span>        MaxRequestBodyBytes<span class="token punctuation">:</span> a<span class="token punctuation">.</span>group<span class="token punctuation">.</span>MaxRequestBodyBytes<span class="token punctuation">,</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> a<span class="token punctuation">.</span>group<span class="token punctuation">.</span>MetaGroupVersion <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>        reqScope<span class="token punctuation">.</span>MetaGroupVersion <span class="token operator">=</span> <span class="token operator">*</span>a<span class="token punctuation">.</span>group<span class="token punctuation">.</span>MetaGroupVersion    <span class="token punctuation">}</span>    <span class="token keyword">if</span> a<span class="token punctuation">.</span>group<span class="token punctuation">.</span>OpenAPIModels <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token operator">&amp;&amp;</span> utilfeature<span class="token punctuation">.</span>DefaultFeatureGate<span class="token punctuation">.</span><span class="token function">Enabled</span><span class="token punctuation">(</span>features<span class="token punctuation">.</span>ServerSideApply<span class="token punctuation">)</span> <span class="token punctuation">{</span>        reqScope<span class="token punctuation">.</span>FieldManager<span class="token punctuation">,</span> err <span class="token operator">=</span> fieldmanager<span class="token punctuation">.</span><span class="token function">NewDefaultFieldManager</span><span class="token punctuation">(</span>            a<span class="token punctuation">.</span>group<span class="token punctuation">.</span>OpenAPIModels<span class="token punctuation">,</span>            a<span class="token punctuation">.</span>group<span class="token punctuation">.</span>UnsafeConvertor<span class="token punctuation">,</span>            a<span class="token punctuation">.</span>group<span class="token punctuation">.</span>Defaulter<span class="token punctuation">,</span>            a<span class="token punctuation">.</span>group<span class="token punctuation">.</span>Creater<span class="token punctuation">,</span>            fqKindToRegister<span class="token punctuation">,</span>            reqScope<span class="token punctuation">.</span>HubGroupVersion<span class="token punctuation">,</span>        <span class="token punctuation">)</span>        <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> fmt<span class="token punctuation">.</span><span class="token function">Errorf</span><span class="token punctuation">(</span><span class="token string">"failed to create field manager: %v"</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> action <span class="token operator">:=</span> <span class="token keyword">range</span> actions <span class="token punctuation">{</span>        producedObject <span class="token operator">:=</span> storageMeta<span class="token punctuation">.</span><span class="token function">ProducesObject</span><span class="token punctuation">(</span>action<span class="token punctuation">.</span>Verb<span class="token punctuation">)</span>        <span class="token keyword">if</span> producedObject <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>            producedObject <span class="token operator">=</span> defaultVersionedObject        <span class="token punctuation">}</span>        reqScope<span class="token punctuation">.</span>Namer <span class="token operator">=</span> action<span class="token punctuation">.</span>Namer        requestScope <span class="token operator">:=</span> <span class="token string">"cluster"</span>        <span class="token keyword">var</span> namespaced <span class="token builtin">string</span>        <span class="token keyword">var</span> operationSuffix <span class="token builtin">string</span>        <span class="token keyword">if</span> apiResource<span class="token punctuation">.</span>Namespaced <span class="token punctuation">{</span>            requestScope <span class="token operator">=</span> <span class="token string">"namespace"</span>            namespaced <span class="token operator">=</span> <span class="token string">"Namespaced"</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> strings<span class="token punctuation">.</span><span class="token function">HasSuffix</span><span class="token punctuation">(</span>action<span class="token punctuation">.</span>Path<span class="token punctuation">,</span> <span class="token string">"/{path:*}"</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            requestScope <span class="token operator">=</span> <span class="token string">"resource"</span>            operationSuffix <span class="token operator">=</span> operationSuffix <span class="token operator">+</span> <span class="token string">"WithPath"</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> action<span class="token punctuation">.</span>AllNamespaces <span class="token punctuation">{</span>            requestScope <span class="token operator">=</span> <span class="token string">"cluster"</span>            operationSuffix <span class="token operator">=</span> operationSuffix <span class="token operator">+</span> <span class="token string">"ForAllNamespaces"</span>            namespaced <span class="token operator">=</span> <span class="token string">""</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> kubeVerb<span class="token punctuation">,</span> found <span class="token operator">:=</span> toDiscoveryKubeVerb<span class="token punctuation">[</span>action<span class="token punctuation">.</span>Verb<span class="token punctuation">]</span><span class="token punctuation">;</span> found <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token function">len</span><span class="token punctuation">(</span>kubeVerb<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span> <span class="token punctuation">{</span>                kubeVerbs<span class="token punctuation">[</span>kubeVerb<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">struct</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">{</span><span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> fmt<span class="token punctuation">.</span><span class="token function">Errorf</span><span class="token punctuation">(</span><span class="token string">"unknown action verb for discovery: %s"</span><span class="token punctuation">,</span> action<span class="token punctuation">.</span>Verb<span class="token punctuation">)</span>        <span class="token punctuation">}</span>        routes <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">*</span>restful<span class="token punctuation">.</span>RouteBuilder<span class="token punctuation">{</span><span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// If there is a subresource, kind should be the parent's kind.</span>        <span class="token keyword">if</span> isSubresource <span class="token punctuation">{</span>            parentStorage<span class="token punctuation">,</span> ok <span class="token operator">:=</span> a<span class="token punctuation">.</span>group<span class="token punctuation">.</span>Storage<span class="token punctuation">[</span>resource<span class="token punctuation">]</span>            <span class="token keyword">if</span> <span class="token operator">!</span>ok <span class="token punctuation">{</span>                <span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> fmt<span class="token punctuation">.</span><span class="token function">Errorf</span><span class="token punctuation">(</span><span class="token string">"missing parent storage: %q"</span><span class="token punctuation">,</span> resource<span class="token punctuation">)</span>            <span class="token punctuation">}</span>            fqParentKind<span class="token punctuation">,</span> err <span class="token operator">:=</span> <span class="token function">GetResourceKind</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span>group<span class="token punctuation">.</span>GroupVersion<span class="token punctuation">,</span> parentStorage<span class="token punctuation">,</span> a<span class="token punctuation">.</span>group<span class="token punctuation">.</span>Typer<span class="token punctuation">)</span>            <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> err            <span class="token punctuation">}</span>            kind <span class="token operator">=</span> fqParentKind<span class="token punctuation">.</span>Kind        <span class="token punctuation">}</span>        verbOverrider<span class="token punctuation">,</span> needOverride <span class="token operator">:=</span> storage<span class="token punctuation">.</span><span class="token punctuation">(</span>StorageMetricsOverride<span class="token punctuation">)</span>        <span class="token keyword">switch</span> action<span class="token punctuation">.</span>Verb <span class="token punctuation">{</span>        <span class="token keyword">case</span> <span class="token string">"GET"</span><span class="token punctuation">:</span> <span class="token comment" spellcheck="true">// Get a resource.</span>            <span class="token keyword">var</span> handler restful<span class="token punctuation">.</span>RouteFunction            <span class="token keyword">if</span> isGetterWithOptions <span class="token punctuation">{</span>                handler <span class="token operator">=</span> <span class="token function">restfulGetResourceWithOptions</span><span class="token punctuation">(</span>getterWithOptions<span class="token punctuation">,</span> reqScope<span class="token punctuation">,</span> isSubresource<span class="token punctuation">)</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                handler <span class="token operator">=</span> <span class="token function">restfulGetResource</span><span class="token punctuation">(</span>getter<span class="token punctuation">,</span> exporter<span class="token punctuation">,</span> reqScope<span class="token punctuation">)</span>            <span class="token punctuation">}</span>            <span class="token keyword">if</span> needOverride <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// need change the reported verb</span>                handler <span class="token operator">=</span> metrics<span class="token punctuation">.</span><span class="token function">InstrumentRouteFunc</span><span class="token punctuation">(</span>verbOverrider<span class="token punctuation">.</span><span class="token function">OverrideMetricsVerb</span><span class="token punctuation">(</span>action<span class="token punctuation">.</span>Verb<span class="token punctuation">)</span><span class="token punctuation">,</span> group<span class="token punctuation">,</span> version<span class="token punctuation">,</span> resource<span class="token punctuation">,</span> subresource<span class="token punctuation">,</span> requestScope<span class="token punctuation">,</span> metrics<span class="token punctuation">.</span>APIServerComponent<span class="token punctuation">,</span> handler<span class="token punctuation">)</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                handler <span class="token operator">=</span> metrics<span class="token punctuation">.</span><span class="token function">InstrumentRouteFunc</span><span class="token punctuation">(</span>action<span class="token punctuation">.</span>Verb<span class="token punctuation">,</span> group<span class="token punctuation">,</span> version<span class="token punctuation">,</span> resource<span class="token punctuation">,</span> subresource<span class="token punctuation">,</span> requestScope<span class="token punctuation">,</span> metrics<span class="token punctuation">.</span>APIServerComponent<span class="token punctuation">,</span> handler<span class="token punctuation">)</span>            <span class="token punctuation">}</span>            doc <span class="token operator">:=</span> <span class="token string">"read the specified "</span> <span class="token operator">+</span> kind            <span class="token keyword">if</span> isSubresource <span class="token punctuation">{</span>                doc <span class="token operator">=</span> <span class="token string">"read "</span> <span class="token operator">+</span> subresource <span class="token operator">+</span> <span class="token string">" of the specified "</span> <span class="token operator">+</span> kind            <span class="token punctuation">}</span>            route <span class="token operator">:=</span> ws<span class="token punctuation">.</span><span class="token function">GET</span><span class="token punctuation">(</span>action<span class="token punctuation">.</span>Path<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">To</span><span class="token punctuation">(</span>handler<span class="token punctuation">)</span><span class="token punctuation">.</span>                <span class="token function">Doc</span><span class="token punctuation">(</span>doc<span class="token punctuation">)</span><span class="token punctuation">.</span>                <span class="token function">Param</span><span class="token punctuation">(</span>ws<span class="token punctuation">.</span><span class="token function">QueryParameter</span><span class="token punctuation">(</span><span class="token string">"pretty"</span><span class="token punctuation">,</span> <span class="token string">"If 'true', then the output is pretty printed."</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>                <span class="token function">Operation</span><span class="token punctuation">(</span><span class="token string">"read"</span><span class="token operator">+</span>namespaced<span class="token operator">+</span>kind<span class="token operator">+</span>strings<span class="token punctuation">.</span><span class="token function">Title</span><span class="token punctuation">(</span>subresource<span class="token punctuation">)</span><span class="token operator">+</span>operationSuffix<span class="token punctuation">)</span><span class="token punctuation">.</span>                <span class="token function">Produces</span><span class="token punctuation">(</span><span class="token function">append</span><span class="token punctuation">(</span>storageMeta<span class="token punctuation">.</span><span class="token function">ProducesMIMETypes</span><span class="token punctuation">(</span>action<span class="token punctuation">.</span>Verb<span class="token punctuation">)</span><span class="token punctuation">,</span> mediaTypes<span class="token operator">...</span><span class="token punctuation">)</span><span class="token operator">...</span><span class="token punctuation">)</span><span class="token punctuation">.</span>                <span class="token function">Returns</span><span class="token punctuation">(</span>http<span class="token punctuation">.</span>StatusOK<span class="token punctuation">,</span> <span class="token string">"OK"</span><span class="token punctuation">,</span> producedObject<span class="token punctuation">)</span><span class="token punctuation">.</span>                <span class="token function">Writes</span><span class="token punctuation">(</span>producedObject<span class="token punctuation">)</span>            <span class="token keyword">if</span> isGetterWithOptions <span class="token punctuation">{</span>                <span class="token keyword">if</span> err <span class="token operator">:=</span> <span class="token function">AddObjectParams</span><span class="token punctuation">(</span>ws<span class="token punctuation">,</span> route<span class="token punctuation">,</span> versionedGetOptions<span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>                    <span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> err                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            <span class="token keyword">if</span> isExporter <span class="token punctuation">{</span>                <span class="token keyword">if</span> err <span class="token operator">:=</span> <span class="token function">AddObjectParams</span><span class="token punctuation">(</span>ws<span class="token punctuation">,</span> route<span class="token punctuation">,</span> versionedExportOptions<span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>                    <span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> err                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            <span class="token function">addParams</span><span class="token punctuation">(</span>route<span class="token punctuation">,</span> action<span class="token punctuation">.</span>Params<span class="token punctuation">)</span>            routes <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>routes<span class="token punctuation">,</span> route<span class="token punctuation">)</span>        <span class="token keyword">case</span> <span class="token string">"LIST"</span><span class="token punctuation">:</span> <span class="token comment" spellcheck="true">// List all resources of a kind.</span>            doc <span class="token operator">:=</span> <span class="token string">"list objects of kind "</span> <span class="token operator">+</span> kind            <span class="token keyword">if</span> isSubresource <span class="token punctuation">{</span>                doc <span class="token operator">=</span> <span class="token string">"list "</span> <span class="token operator">+</span> subresource <span class="token operator">+</span> <span class="token string">" of objects of kind "</span> <span class="token operator">+</span> kind            <span class="token punctuation">}</span>            handler <span class="token operator">:=</span> metrics<span class="token punctuation">.</span><span class="token function">InstrumentRouteFunc</span><span class="token punctuation">(</span>action<span class="token punctuation">.</span>Verb<span class="token punctuation">,</span> group<span class="token punctuation">,</span> version<span class="token punctuation">,</span> resource<span class="token punctuation">,</span> subresource<span class="token punctuation">,</span> requestScope<span class="token punctuation">,</span> metrics<span class="token punctuation">.</span>APIServerComponent<span class="token punctuation">,</span> <span class="token function">restfulListResource</span><span class="token punctuation">(</span>lister<span class="token punctuation">,</span> watcher<span class="token punctuation">,</span> reqScope<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> a<span class="token punctuation">.</span>minRequestTimeout<span class="token punctuation">)</span><span class="token punctuation">)</span>            route <span class="token operator">:=</span> ws<span class="token punctuation">.</span><span class="token function">GET</span><span class="token punctuation">(</span>action<span class="token punctuation">.</span>Path<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">To</span><span class="token punctuation">(</span>handler<span class="token punctuation">)</span><span class="token punctuation">.</span>                <span class="token function">Doc</span><span class="token punctuation">(</span>doc<span class="token punctuation">)</span><span class="token punctuation">.</span>                <span class="token function">Param</span><span class="token punctuation">(</span>ws<span class="token punctuation">.</span><span class="token function">QueryParameter</span><span class="token punctuation">(</span><span class="token string">"pretty"</span><span class="token punctuation">,</span> <span class="token string">"If 'true', then the output is pretty printed."</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>                <span class="token function">Operation</span><span class="token punctuation">(</span><span class="token string">"list"</span><span class="token operator">+</span>namespaced<span class="token operator">+</span>kind<span class="token operator">+</span>strings<span class="token punctuation">.</span><span class="token function">Title</span><span class="token punctuation">(</span>subresource<span class="token punctuation">)</span><span class="token operator">+</span>operationSuffix<span class="token punctuation">)</span><span class="token punctuation">.</span>                <span class="token function">Produces</span><span class="token punctuation">(</span><span class="token function">append</span><span class="token punctuation">(</span>storageMeta<span class="token punctuation">.</span><span class="token function">ProducesMIMETypes</span><span class="token punctuation">(</span>action<span class="token punctuation">.</span>Verb<span class="token punctuation">)</span><span class="token punctuation">,</span> allMediaTypes<span class="token operator">...</span><span class="token punctuation">)</span><span class="token operator">...</span><span class="token punctuation">)</span><span class="token punctuation">.</span>                <span class="token function">Returns</span><span class="token punctuation">(</span>http<span class="token punctuation">.</span>StatusOK<span class="token punctuation">,</span> <span class="token string">"OK"</span><span class="token punctuation">,</span> versionedList<span class="token punctuation">)</span><span class="token punctuation">.</span>                <span class="token function">Writes</span><span class="token punctuation">(</span>versionedList<span class="token punctuation">)</span>            <span class="token keyword">if</span> err <span class="token operator">:=</span> <span class="token function">AddObjectParams</span><span class="token punctuation">(</span>ws<span class="token punctuation">,</span> route<span class="token punctuation">,</span> versionedListOptions<span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> err            <span class="token punctuation">}</span>            <span class="token keyword">switch</span> <span class="token punctuation">{</span>            <span class="token keyword">case</span> isLister <span class="token operator">&amp;&amp;</span> isWatcher<span class="token punctuation">:</span>                doc <span class="token operator">:=</span> <span class="token string">"list or watch objects of kind "</span> <span class="token operator">+</span> kind                <span class="token keyword">if</span> isSubresource <span class="token punctuation">{</span>                    doc <span class="token operator">=</span> <span class="token string">"list or watch "</span> <span class="token operator">+</span> subresource <span class="token operator">+</span> <span class="token string">" of objects of kind "</span> <span class="token operator">+</span> kind                <span class="token punctuation">}</span>                route<span class="token punctuation">.</span><span class="token function">Doc</span><span class="token punctuation">(</span>doc<span class="token punctuation">)</span>            <span class="token keyword">case</span> isWatcher<span class="token punctuation">:</span>                doc <span class="token operator">:=</span> <span class="token string">"watch objects of kind "</span> <span class="token operator">+</span> kind                <span class="token keyword">if</span> isSubresource <span class="token punctuation">{</span>                    doc <span class="token operator">=</span> <span class="token string">"watch "</span> <span class="token operator">+</span> subresource <span class="token operator">+</span> <span class="token string">"of objects of kind "</span> <span class="token operator">+</span> kind                <span class="token punctuation">}</span>                route<span class="token punctuation">.</span><span class="token function">Doc</span><span class="token punctuation">(</span>doc<span class="token punctuation">)</span>            <span class="token punctuation">}</span>            <span class="token function">addParams</span><span class="token punctuation">(</span>route<span class="token punctuation">,</span> action<span class="token punctuation">.</span>Params<span class="token punctuation">)</span>            routes <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>routes<span class="token punctuation">,</span> route<span class="token punctuation">)</span>        <span class="token keyword">case</span> <span class="token string">"PUT"</span><span class="token punctuation">:</span> <span class="token comment" spellcheck="true">// Update a resource.</span>            doc <span class="token operator">:=</span> <span class="token string">"replace the specified "</span> <span class="token operator">+</span> kind            <span class="token keyword">if</span> isSubresource <span class="token punctuation">{</span>                doc <span class="token operator">=</span> <span class="token string">"replace "</span> <span class="token operator">+</span> subresource <span class="token operator">+</span> <span class="token string">" of the specified "</span> <span class="token operator">+</span> kind            <span class="token punctuation">}</span>            handler <span class="token operator">:=</span> metrics<span class="token punctuation">.</span><span class="token function">InstrumentRouteFunc</span><span class="token punctuation">(</span>action<span class="token punctuation">.</span>Verb<span class="token punctuation">,</span> group<span class="token punctuation">,</span> version<span class="token punctuation">,</span> resource<span class="token punctuation">,</span> subresource<span class="token punctuation">,</span> requestScope<span class="token punctuation">,</span> metrics<span class="token punctuation">.</span>APIServerComponent<span class="token punctuation">,</span> <span class="token function">restfulUpdateResource</span><span class="token punctuation">(</span>updater<span class="token punctuation">,</span> reqScope<span class="token punctuation">,</span> admit<span class="token punctuation">)</span><span class="token punctuation">)</span>            route <span class="token operator">:=</span> ws<span class="token punctuation">.</span><span class="token function">PUT</span><span class="token punctuation">(</span>action<span class="token punctuation">.</span>Path<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">To</span><span class="token punctuation">(</span>handler<span class="token punctuation">)</span><span class="token punctuation">.</span>                <span class="token function">Doc</span><span class="token punctuation">(</span>doc<span class="token punctuation">)</span><span class="token punctuation">.</span>                <span class="token function">Param</span><span class="token punctuation">(</span>ws<span class="token punctuation">.</span><span class="token function">QueryParameter</span><span class="token punctuation">(</span><span class="token string">"pretty"</span><span class="token punctuation">,</span> <span class="token string">"If 'true', then the output is pretty printed."</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>                <span class="token function">Operation</span><span class="token punctuation">(</span><span class="token string">"replace"</span><span class="token operator">+</span>namespaced<span class="token operator">+</span>kind<span class="token operator">+</span>strings<span class="token punctuation">.</span><span class="token function">Title</span><span class="token punctuation">(</span>subresource<span class="token punctuation">)</span><span class="token operator">+</span>operationSuffix<span class="token punctuation">)</span><span class="token punctuation">.</span>                <span class="token function">Produces</span><span class="token punctuation">(</span><span class="token function">append</span><span class="token punctuation">(</span>storageMeta<span class="token punctuation">.</span><span class="token function">ProducesMIMETypes</span><span class="token punctuation">(</span>action<span class="token punctuation">.</span>Verb<span class="token punctuation">)</span><span class="token punctuation">,</span> mediaTypes<span class="token operator">...</span><span class="token punctuation">)</span><span class="token operator">...</span><span class="token punctuation">)</span><span class="token punctuation">.</span>                <span class="token function">Returns</span><span class="token punctuation">(</span>http<span class="token punctuation">.</span>StatusOK<span class="token punctuation">,</span> <span class="token string">"OK"</span><span class="token punctuation">,</span> producedObject<span class="token punctuation">)</span><span class="token punctuation">.</span>                <span class="token comment" spellcheck="true">// TODO: in some cases, the API may return a v1.Status instead of the versioned object</span>                <span class="token comment" spellcheck="true">// but currently go-restful can't handle multiple different objects being returned.</span>                <span class="token function">Returns</span><span class="token punctuation">(</span>http<span class="token punctuation">.</span>StatusCreated<span class="token punctuation">,</span> <span class="token string">"Created"</span><span class="token punctuation">,</span> producedObject<span class="token punctuation">)</span><span class="token punctuation">.</span>                <span class="token function">Reads</span><span class="token punctuation">(</span>defaultVersionedObject<span class="token punctuation">)</span><span class="token punctuation">.</span>                <span class="token function">Writes</span><span class="token punctuation">(</span>producedObject<span class="token punctuation">)</span>            <span class="token keyword">if</span> err <span class="token operator">:=</span> <span class="token function">AddObjectParams</span><span class="token punctuation">(</span>ws<span class="token punctuation">,</span> route<span class="token punctuation">,</span> versionedUpdateOptions<span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> err            <span class="token punctuation">}</span>            <span class="token function">addParams</span><span class="token punctuation">(</span>route<span class="token punctuation">,</span> action<span class="token punctuation">.</span>Params<span class="token punctuation">)</span>            routes <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>routes<span class="token punctuation">,</span> route<span class="token punctuation">)</span>        <span class="token keyword">case</span> <span class="token string">"PATCH"</span><span class="token punctuation">:</span> <span class="token comment" spellcheck="true">// Partially update a resource</span>            doc <span class="token operator">:=</span> <span class="token string">"partially update the specified "</span> <span class="token operator">+</span> kind            <span class="token keyword">if</span> isSubresource <span class="token punctuation">{</span>                doc <span class="token operator">=</span> <span class="token string">"partially update "</span> <span class="token operator">+</span> subresource <span class="token operator">+</span> <span class="token string">" of the specified "</span> <span class="token operator">+</span> kind            <span class="token punctuation">}</span>            supportedTypes <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">{</span>                <span class="token function">string</span><span class="token punctuation">(</span>types<span class="token punctuation">.</span>JSONPatchType<span class="token punctuation">)</span><span class="token punctuation">,</span>                <span class="token function">string</span><span class="token punctuation">(</span>types<span class="token punctuation">.</span>MergePatchType<span class="token punctuation">)</span><span class="token punctuation">,</span>                <span class="token function">string</span><span class="token punctuation">(</span>types<span class="token punctuation">.</span>StrategicMergePatchType<span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token punctuation">}</span>            <span class="token keyword">if</span> utilfeature<span class="token punctuation">.</span>DefaultFeatureGate<span class="token punctuation">.</span><span class="token function">Enabled</span><span class="token punctuation">(</span>features<span class="token punctuation">.</span>ServerSideApply<span class="token punctuation">)</span> <span class="token punctuation">{</span>                supportedTypes <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>supportedTypes<span class="token punctuation">,</span> <span class="token function">string</span><span class="token punctuation">(</span>types<span class="token punctuation">.</span>ApplyPatchType<span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token punctuation">}</span>            handler <span class="token operator">:=</span> metrics<span class="token punctuation">.</span><span class="token function">InstrumentRouteFunc</span><span class="token punctuation">(</span>action<span class="token punctuation">.</span>Verb<span class="token punctuation">,</span> group<span class="token punctuation">,</span> version<span class="token punctuation">,</span> resource<span class="token punctuation">,</span> subresource<span class="token punctuation">,</span> requestScope<span class="token punctuation">,</span> metrics<span class="token punctuation">.</span>APIServerComponent<span class="token punctuation">,</span> <span class="token function">restfulPatchResource</span><span class="token punctuation">(</span>patcher<span class="token punctuation">,</span> reqScope<span class="token punctuation">,</span> admit<span class="token punctuation">,</span> supportedTypes<span class="token punctuation">)</span><span class="token punctuation">)</span>            route <span class="token operator">:=</span> ws<span class="token punctuation">.</span><span class="token function">PATCH</span><span class="token punctuation">(</span>action<span class="token punctuation">.</span>Path<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">To</span><span class="token punctuation">(</span>handler<span class="token punctuation">)</span><span class="token punctuation">.</span>                <span class="token function">Doc</span><span class="token punctuation">(</span>doc<span class="token punctuation">)</span><span class="token punctuation">.</span>                <span class="token function">Param</span><span class="token punctuation">(</span>ws<span class="token punctuation">.</span><span class="token function">QueryParameter</span><span class="token punctuation">(</span><span class="token string">"pretty"</span><span class="token punctuation">,</span> <span class="token string">"If 'true', then the output is pretty printed."</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>                <span class="token function">Consumes</span><span class="token punctuation">(</span>supportedTypes<span class="token operator">...</span><span class="token punctuation">)</span><span class="token punctuation">.</span>                <span class="token function">Operation</span><span class="token punctuation">(</span><span class="token string">"patch"</span><span class="token operator">+</span>namespaced<span class="token operator">+</span>kind<span class="token operator">+</span>strings<span class="token punctuation">.</span><span class="token function">Title</span><span class="token punctuation">(</span>subresource<span class="token punctuation">)</span><span class="token operator">+</span>operationSuffix<span class="token punctuation">)</span><span class="token punctuation">.</span>                <span class="token function">Produces</span><span class="token punctuation">(</span><span class="token function">append</span><span class="token punctuation">(</span>storageMeta<span class="token punctuation">.</span><span class="token function">ProducesMIMETypes</span><span class="token punctuation">(</span>action<span class="token punctuation">.</span>Verb<span class="token punctuation">)</span><span class="token punctuation">,</span> mediaTypes<span class="token operator">...</span><span class="token punctuation">)</span><span class="token operator">...</span><span class="token punctuation">)</span><span class="token punctuation">.</span>                <span class="token function">Returns</span><span class="token punctuation">(</span>http<span class="token punctuation">.</span>StatusOK<span class="token punctuation">,</span> <span class="token string">"OK"</span><span class="token punctuation">,</span> producedObject<span class="token punctuation">)</span><span class="token punctuation">.</span>                <span class="token function">Reads</span><span class="token punctuation">(</span>metav1<span class="token punctuation">.</span>Patch<span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span>                <span class="token function">Writes</span><span class="token punctuation">(</span>producedObject<span class="token punctuation">)</span>            <span class="token keyword">if</span> err <span class="token operator">:=</span> <span class="token function">AddObjectParams</span><span class="token punctuation">(</span>ws<span class="token punctuation">,</span> route<span class="token punctuation">,</span> versionedPatchOptions<span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> err            <span class="token punctuation">}</span>            <span class="token function">addParams</span><span class="token punctuation">(</span>route<span class="token punctuation">,</span> action<span class="token punctuation">.</span>Params<span class="token punctuation">)</span>            routes <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>routes<span class="token punctuation">,</span> route<span class="token punctuation">)</span>        <span class="token keyword">case</span> <span class="token string">"POST"</span><span class="token punctuation">:</span> <span class="token comment" spellcheck="true">// Create a resource.</span>            <span class="token keyword">var</span> handler restful<span class="token punctuation">.</span>RouteFunction            <span class="token keyword">if</span> isNamedCreater <span class="token punctuation">{</span>                handler <span class="token operator">=</span> <span class="token function">restfulCreateNamedResource</span><span class="token punctuation">(</span>namedCreater<span class="token punctuation">,</span> reqScope<span class="token punctuation">,</span> admit<span class="token punctuation">)</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                handler <span class="token operator">=</span> <span class="token function">restfulCreateResource</span><span class="token punctuation">(</span>creater<span class="token punctuation">,</span> reqScope<span class="token punctuation">,</span> admit<span class="token punctuation">)</span>            <span class="token punctuation">}</span>            handler <span class="token operator">=</span> metrics<span class="token punctuation">.</span><span class="token function">InstrumentRouteFunc</span><span class="token punctuation">(</span>action<span class="token punctuation">.</span>Verb<span class="token punctuation">,</span> group<span class="token punctuation">,</span> version<span class="token punctuation">,</span> resource<span class="token punctuation">,</span> subresource<span class="token punctuation">,</span> requestScope<span class="token punctuation">,</span> metrics<span class="token punctuation">.</span>APIServerComponent<span class="token punctuation">,</span> handler<span class="token punctuation">)</span>            article <span class="token operator">:=</span> <span class="token function">GetArticleForNoun</span><span class="token punctuation">(</span>kind<span class="token punctuation">,</span> <span class="token string">" "</span><span class="token punctuation">)</span>            doc <span class="token operator">:=</span> <span class="token string">"create"</span> <span class="token operator">+</span> article <span class="token operator">+</span> kind            <span class="token keyword">if</span> isSubresource <span class="token punctuation">{</span>                doc <span class="token operator">=</span> <span class="token string">"create "</span> <span class="token operator">+</span> subresource <span class="token operator">+</span> <span class="token string">" of"</span> <span class="token operator">+</span> article <span class="token operator">+</span> kind            <span class="token punctuation">}</span>            route <span class="token operator">:=</span> ws<span class="token punctuation">.</span><span class="token function">POST</span><span class="token punctuation">(</span>action<span class="token punctuation">.</span>Path<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">To</span><span class="token punctuation">(</span>handler<span class="token punctuation">)</span><span class="token punctuation">.</span>                <span class="token function">Doc</span><span class="token punctuation">(</span>doc<span class="token punctuation">)</span><span class="token punctuation">.</span>                <span class="token function">Param</span><span class="token punctuation">(</span>ws<span class="token punctuation">.</span><span class="token function">QueryParameter</span><span class="token punctuation">(</span><span class="token string">"pretty"</span><span class="token punctuation">,</span> <span class="token string">"If 'true', then the output is pretty printed."</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>                <span class="token function">Operation</span><span class="token punctuation">(</span><span class="token string">"create"</span><span class="token operator">+</span>namespaced<span class="token operator">+</span>kind<span class="token operator">+</span>strings<span class="token punctuation">.</span><span class="token function">Title</span><span class="token punctuation">(</span>subresource<span class="token punctuation">)</span><span class="token operator">+</span>operationSuffix<span class="token punctuation">)</span><span class="token punctuation">.</span>                <span class="token function">Produces</span><span class="token punctuation">(</span><span class="token function">append</span><span class="token punctuation">(</span>storageMeta<span class="token punctuation">.</span><span class="token function">ProducesMIMETypes</span><span class="token punctuation">(</span>action<span class="token punctuation">.</span>Verb<span class="token punctuation">)</span><span class="token punctuation">,</span> mediaTypes<span class="token operator">...</span><span class="token punctuation">)</span><span class="token operator">...</span><span class="token punctuation">)</span><span class="token punctuation">.</span>                <span class="token function">Returns</span><span class="token punctuation">(</span>http<span class="token punctuation">.</span>StatusOK<span class="token punctuation">,</span> <span class="token string">"OK"</span><span class="token punctuation">,</span> producedObject<span class="token punctuation">)</span><span class="token punctuation">.</span>                <span class="token comment" spellcheck="true">// TODO: in some cases, the API may return a v1.Status instead of the versioned object</span>                <span class="token comment" spellcheck="true">// but currently go-restful can't handle multiple different objects being returned.</span>                <span class="token function">Returns</span><span class="token punctuation">(</span>http<span class="token punctuation">.</span>StatusCreated<span class="token punctuation">,</span> <span class="token string">"Created"</span><span class="token punctuation">,</span> producedObject<span class="token punctuation">)</span><span class="token punctuation">.</span>                <span class="token function">Returns</span><span class="token punctuation">(</span>http<span class="token punctuation">.</span>StatusAccepted<span class="token punctuation">,</span> <span class="token string">"Accepted"</span><span class="token punctuation">,</span> producedObject<span class="token punctuation">)</span><span class="token punctuation">.</span>                <span class="token function">Reads</span><span class="token punctuation">(</span>defaultVersionedObject<span class="token punctuation">)</span><span class="token punctuation">.</span>                <span class="token function">Writes</span><span class="token punctuation">(</span>producedObject<span class="token punctuation">)</span>            <span class="token keyword">if</span> err <span class="token operator">:=</span> <span class="token function">AddObjectParams</span><span class="token punctuation">(</span>ws<span class="token punctuation">,</span> route<span class="token punctuation">,</span> versionedCreateOptions<span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> err            <span class="token punctuation">}</span>            <span class="token function">addParams</span><span class="token punctuation">(</span>route<span class="token punctuation">,</span> action<span class="token punctuation">.</span>Params<span class="token punctuation">)</span>            routes <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>routes<span class="token punctuation">,</span> route<span class="token punctuation">)</span>        <span class="token keyword">case</span> <span class="token string">"DELETE"</span><span class="token punctuation">:</span> <span class="token comment" spellcheck="true">// Delete a resource.</span>            article <span class="token operator">:=</span> <span class="token function">GetArticleForNoun</span><span class="token punctuation">(</span>kind<span class="token punctuation">,</span> <span class="token string">" "</span><span class="token punctuation">)</span>            doc <span class="token operator">:=</span> <span class="token string">"delete"</span> <span class="token operator">+</span> article <span class="token operator">+</span> kind            <span class="token keyword">if</span> isSubresource <span class="token punctuation">{</span>                doc <span class="token operator">=</span> <span class="token string">"delete "</span> <span class="token operator">+</span> subresource <span class="token operator">+</span> <span class="token string">" of"</span> <span class="token operator">+</span> article <span class="token operator">+</span> kind            <span class="token punctuation">}</span>            deleteReturnType <span class="token operator">:=</span> versionedStatus            <span class="token keyword">if</span> deleteReturnsDeletedObject <span class="token punctuation">{</span>                deleteReturnType <span class="token operator">=</span> producedObject            <span class="token punctuation">}</span>            handler <span class="token operator">:=</span> metrics<span class="token punctuation">.</span><span class="token function">InstrumentRouteFunc</span><span class="token punctuation">(</span>action<span class="token punctuation">.</span>Verb<span class="token punctuation">,</span> group<span class="token punctuation">,</span> version<span class="token punctuation">,</span> resource<span class="token punctuation">,</span> subresource<span class="token punctuation">,</span> requestScope<span class="token punctuation">,</span> metrics<span class="token punctuation">.</span>APIServerComponent<span class="token punctuation">,</span> <span class="token function">restfulDeleteResource</span><span class="token punctuation">(</span>gracefulDeleter<span class="token punctuation">,</span> isGracefulDeleter<span class="token punctuation">,</span> reqScope<span class="token punctuation">,</span> admit<span class="token punctuation">)</span><span class="token punctuation">)</span>            route <span class="token operator">:=</span> ws<span class="token punctuation">.</span><span class="token function">DELETE</span><span class="token punctuation">(</span>action<span class="token punctuation">.</span>Path<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">To</span><span class="token punctuation">(</span>handler<span class="token punctuation">)</span><span class="token punctuation">.</span>                <span class="token function">Doc</span><span class="token punctuation">(</span>doc<span class="token punctuation">)</span><span class="token punctuation">.</span>                <span class="token function">Param</span><span class="token punctuation">(</span>ws<span class="token punctuation">.</span><span class="token function">QueryParameter</span><span class="token punctuation">(</span><span class="token string">"pretty"</span><span class="token punctuation">,</span> <span class="token string">"If 'true', then the output is pretty printed."</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>                <span class="token function">Operation</span><span class="token punctuation">(</span><span class="token string">"delete"</span><span class="token operator">+</span>namespaced<span class="token operator">+</span>kind<span class="token operator">+</span>strings<span class="token punctuation">.</span><span class="token function">Title</span><span class="token punctuation">(</span>subresource<span class="token punctuation">)</span><span class="token operator">+</span>operationSuffix<span class="token punctuation">)</span><span class="token punctuation">.</span>                <span class="token function">Produces</span><span class="token punctuation">(</span><span class="token function">append</span><span class="token punctuation">(</span>storageMeta<span class="token punctuation">.</span><span class="token function">ProducesMIMETypes</span><span class="token punctuation">(</span>action<span class="token punctuation">.</span>Verb<span class="token punctuation">)</span><span class="token punctuation">,</span> mediaTypes<span class="token operator">...</span><span class="token punctuation">)</span><span class="token operator">...</span><span class="token punctuation">)</span><span class="token punctuation">.</span>                <span class="token function">Writes</span><span class="token punctuation">(</span>deleteReturnType<span class="token punctuation">)</span><span class="token punctuation">.</span>                <span class="token function">Returns</span><span class="token punctuation">(</span>http<span class="token punctuation">.</span>StatusOK<span class="token punctuation">,</span> <span class="token string">"OK"</span><span class="token punctuation">,</span> deleteReturnType<span class="token punctuation">)</span><span class="token punctuation">.</span>                <span class="token function">Returns</span><span class="token punctuation">(</span>http<span class="token punctuation">.</span>StatusAccepted<span class="token punctuation">,</span> <span class="token string">"Accepted"</span><span class="token punctuation">,</span> deleteReturnType<span class="token punctuation">)</span>            <span class="token keyword">if</span> isGracefulDeleter <span class="token punctuation">{</span>                route<span class="token punctuation">.</span><span class="token function">Reads</span><span class="token punctuation">(</span>versionedDeleterObject<span class="token punctuation">)</span>                route<span class="token punctuation">.</span><span class="token function">ParameterNamed</span><span class="token punctuation">(</span><span class="token string">"body"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Required</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span>                <span class="token keyword">if</span> err <span class="token operator">:=</span> <span class="token function">AddObjectParams</span><span class="token punctuation">(</span>ws<span class="token punctuation">,</span> route<span class="token punctuation">,</span> versionedDeleteOptions<span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>                    <span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> err                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            <span class="token function">addParams</span><span class="token punctuation">(</span>route<span class="token punctuation">,</span> action<span class="token punctuation">.</span>Params<span class="token punctuation">)</span>            routes <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>routes<span class="token punctuation">,</span> route<span class="token punctuation">)</span>        <span class="token keyword">case</span> <span class="token string">"DELETECOLLECTION"</span><span class="token punctuation">:</span>            doc <span class="token operator">:=</span> <span class="token string">"delete collection of "</span> <span class="token operator">+</span> kind            <span class="token keyword">if</span> isSubresource <span class="token punctuation">{</span>                doc <span class="token operator">=</span> <span class="token string">"delete collection of "</span> <span class="token operator">+</span> subresource <span class="token operator">+</span> <span class="token string">" of a "</span> <span class="token operator">+</span> kind            <span class="token punctuation">}</span>            handler <span class="token operator">:=</span> metrics<span class="token punctuation">.</span><span class="token function">InstrumentRouteFunc</span><span class="token punctuation">(</span>action<span class="token punctuation">.</span>Verb<span class="token punctuation">,</span> group<span class="token punctuation">,</span> version<span class="token punctuation">,</span> resource<span class="token punctuation">,</span> subresource<span class="token punctuation">,</span> requestScope<span class="token punctuation">,</span> metrics<span class="token punctuation">.</span>APIServerComponent<span class="token punctuation">,</span> <span class="token function">restfulDeleteCollection</span><span class="token punctuation">(</span>collectionDeleter<span class="token punctuation">,</span> isCollectionDeleter<span class="token punctuation">,</span> reqScope<span class="token punctuation">,</span> admit<span class="token punctuation">)</span><span class="token punctuation">)</span>            route <span class="token operator">:=</span> ws<span class="token punctuation">.</span><span class="token function">DELETE</span><span class="token punctuation">(</span>action<span class="token punctuation">.</span>Path<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">To</span><span class="token punctuation">(</span>handler<span class="token punctuation">)</span><span class="token punctuation">.</span>                <span class="token function">Doc</span><span class="token punctuation">(</span>doc<span class="token punctuation">)</span><span class="token punctuation">.</span>                <span class="token function">Param</span><span class="token punctuation">(</span>ws<span class="token punctuation">.</span><span class="token function">QueryParameter</span><span class="token punctuation">(</span><span class="token string">"pretty"</span><span class="token punctuation">,</span> <span class="token string">"If 'true', then the output is pretty printed."</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>                <span class="token function">Operation</span><span class="token punctuation">(</span><span class="token string">"deletecollection"</span><span class="token operator">+</span>namespaced<span class="token operator">+</span>kind<span class="token operator">+</span>strings<span class="token punctuation">.</span><span class="token function">Title</span><span class="token punctuation">(</span>subresource<span class="token punctuation">)</span><span class="token operator">+</span>operationSuffix<span class="token punctuation">)</span><span class="token punctuation">.</span>                <span class="token function">Produces</span><span class="token punctuation">(</span><span class="token function">append</span><span class="token punctuation">(</span>storageMeta<span class="token punctuation">.</span><span class="token function">ProducesMIMETypes</span><span class="token punctuation">(</span>action<span class="token punctuation">.</span>Verb<span class="token punctuation">)</span><span class="token punctuation">,</span> mediaTypes<span class="token operator">...</span><span class="token punctuation">)</span><span class="token operator">...</span><span class="token punctuation">)</span><span class="token punctuation">.</span>                <span class="token function">Writes</span><span class="token punctuation">(</span>versionedStatus<span class="token punctuation">)</span><span class="token punctuation">.</span>                <span class="token function">Returns</span><span class="token punctuation">(</span>http<span class="token punctuation">.</span>StatusOK<span class="token punctuation">,</span> <span class="token string">"OK"</span><span class="token punctuation">,</span> versionedStatus<span class="token punctuation">)</span>            <span class="token keyword">if</span> isCollectionDeleter <span class="token punctuation">{</span>                route<span class="token punctuation">.</span><span class="token function">Reads</span><span class="token punctuation">(</span>versionedDeleterObject<span class="token punctuation">)</span>                route<span class="token punctuation">.</span><span class="token function">ParameterNamed</span><span class="token punctuation">(</span><span class="token string">"body"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Required</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span>                <span class="token keyword">if</span> err <span class="token operator">:=</span> <span class="token function">AddObjectParams</span><span class="token punctuation">(</span>ws<span class="token punctuation">,</span> route<span class="token punctuation">,</span> versionedDeleteOptions<span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>                    <span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> err                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            <span class="token keyword">if</span> err <span class="token operator">:=</span> <span class="token function">AddObjectParams</span><span class="token punctuation">(</span>ws<span class="token punctuation">,</span> route<span class="token punctuation">,</span> versionedListOptions<span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> err            <span class="token punctuation">}</span>            <span class="token function">addParams</span><span class="token punctuation">(</span>route<span class="token punctuation">,</span> action<span class="token punctuation">.</span>Params<span class="token punctuation">)</span>            routes <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>routes<span class="token punctuation">,</span> route<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">// deprecated in 1.11</span>        <span class="token keyword">case</span> <span class="token string">"WATCH"</span><span class="token punctuation">:</span> <span class="token comment" spellcheck="true">// Watch a resource.</span>            doc <span class="token operator">:=</span> <span class="token string">"watch changes to an object of kind "</span> <span class="token operator">+</span> kind            <span class="token keyword">if</span> isSubresource <span class="token punctuation">{</span>                doc <span class="token operator">=</span> <span class="token string">"watch changes to "</span> <span class="token operator">+</span> subresource <span class="token operator">+</span> <span class="token string">" of an object of kind "</span> <span class="token operator">+</span> kind            <span class="token punctuation">}</span>            doc <span class="token operator">+=</span> <span class="token string">". deprecated: use the 'watch' parameter with a list operation instead, filtered to a single item with the 'fieldSelector' parameter."</span>            handler <span class="token operator">:=</span> metrics<span class="token punctuation">.</span><span class="token function">InstrumentRouteFunc</span><span class="token punctuation">(</span>action<span class="token punctuation">.</span>Verb<span class="token punctuation">,</span> group<span class="token punctuation">,</span> version<span class="token punctuation">,</span> resource<span class="token punctuation">,</span> subresource<span class="token punctuation">,</span> requestScope<span class="token punctuation">,</span> metrics<span class="token punctuation">.</span>APIServerComponent<span class="token punctuation">,</span> <span class="token function">restfulListResource</span><span class="token punctuation">(</span>lister<span class="token punctuation">,</span> watcher<span class="token punctuation">,</span> reqScope<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">,</span> a<span class="token punctuation">.</span>minRequestTimeout<span class="token punctuation">)</span><span class="token punctuation">)</span>            route <span class="token operator">:=</span> ws<span class="token punctuation">.</span><span class="token function">GET</span><span class="token punctuation">(</span>action<span class="token punctuation">.</span>Path<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">To</span><span class="token punctuation">(</span>handler<span class="token punctuation">)</span><span class="token punctuation">.</span>                <span class="token function">Doc</span><span class="token punctuation">(</span>doc<span class="token punctuation">)</span><span class="token punctuation">.</span>                <span class="token function">Param</span><span class="token punctuation">(</span>ws<span class="token punctuation">.</span><span class="token function">QueryParameter</span><span class="token punctuation">(</span><span class="token string">"pretty"</span><span class="token punctuation">,</span> <span class="token string">"If 'true', then the output is pretty printed."</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>                <span class="token function">Operation</span><span class="token punctuation">(</span><span class="token string">"watch"</span><span class="token operator">+</span>namespaced<span class="token operator">+</span>kind<span class="token operator">+</span>strings<span class="token punctuation">.</span><span class="token function">Title</span><span class="token punctuation">(</span>subresource<span class="token punctuation">)</span><span class="token operator">+</span>operationSuffix<span class="token punctuation">)</span><span class="token punctuation">.</span>                <span class="token function">Produces</span><span class="token punctuation">(</span>allMediaTypes<span class="token operator">...</span><span class="token punctuation">)</span><span class="token punctuation">.</span>                <span class="token function">Returns</span><span class="token punctuation">(</span>http<span class="token punctuation">.</span>StatusOK<span class="token punctuation">,</span> <span class="token string">"OK"</span><span class="token punctuation">,</span> versionedWatchEvent<span class="token punctuation">)</span><span class="token punctuation">.</span>                <span class="token function">Writes</span><span class="token punctuation">(</span>versionedWatchEvent<span class="token punctuation">)</span>            <span class="token keyword">if</span> err <span class="token operator">:=</span> <span class="token function">AddObjectParams</span><span class="token punctuation">(</span>ws<span class="token punctuation">,</span> route<span class="token punctuation">,</span> versionedListOptions<span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> err            <span class="token punctuation">}</span>            <span class="token function">addParams</span><span class="token punctuation">(</span>route<span class="token punctuation">,</span> action<span class="token punctuation">.</span>Params<span class="token punctuation">)</span>            routes <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>routes<span class="token punctuation">,</span> route<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">// deprecated in 1.11</span>        <span class="token keyword">case</span> <span class="token string">"WATCHLIST"</span><span class="token punctuation">:</span> <span class="token comment" spellcheck="true">// Watch all resources of a kind.</span>            doc <span class="token operator">:=</span> <span class="token string">"watch individual changes to a list of "</span> <span class="token operator">+</span> kind            <span class="token keyword">if</span> isSubresource <span class="token punctuation">{</span>                doc <span class="token operator">=</span> <span class="token string">"watch individual changes to a list of "</span> <span class="token operator">+</span> subresource <span class="token operator">+</span> <span class="token string">" of "</span> <span class="token operator">+</span> kind            <span class="token punctuation">}</span>            doc <span class="token operator">+=</span> <span class="token string">". deprecated: use the 'watch' parameter with a list operation instead."</span>            handler <span class="token operator">:=</span> metrics<span class="token punctuation">.</span><span class="token function">InstrumentRouteFunc</span><span class="token punctuation">(</span>action<span class="token punctuation">.</span>Verb<span class="token punctuation">,</span> group<span class="token punctuation">,</span> version<span class="token punctuation">,</span> resource<span class="token punctuation">,</span> subresource<span class="token punctuation">,</span> requestScope<span class="token punctuation">,</span> metrics<span class="token punctuation">.</span>APIServerComponent<span class="token punctuation">,</span> <span class="token function">restfulListResource</span><span class="token punctuation">(</span>lister<span class="token punctuation">,</span> watcher<span class="token punctuation">,</span> reqScope<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">,</span> a<span class="token punctuation">.</span>minRequestTimeout<span class="token punctuation">)</span><span class="token punctuation">)</span>            route <span class="token operator">:=</span> ws<span class="token punctuation">.</span><span class="token function">GET</span><span class="token punctuation">(</span>action<span class="token punctuation">.</span>Path<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">To</span><span class="token punctuation">(</span>handler<span class="token punctuation">)</span><span class="token punctuation">.</span>                <span class="token function">Doc</span><span class="token punctuation">(</span>doc<span class="token punctuation">)</span><span class="token punctuation">.</span>                <span class="token function">Param</span><span class="token punctuation">(</span>ws<span class="token punctuation">.</span><span class="token function">QueryParameter</span><span class="token punctuation">(</span><span class="token string">"pretty"</span><span class="token punctuation">,</span> <span class="token string">"If 'true', then the output is pretty printed."</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>                <span class="token function">Operation</span><span class="token punctuation">(</span><span class="token string">"watch"</span><span class="token operator">+</span>namespaced<span class="token operator">+</span>kind<span class="token operator">+</span>strings<span class="token punctuation">.</span><span class="token function">Title</span><span class="token punctuation">(</span>subresource<span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"List"</span><span class="token operator">+</span>operationSuffix<span class="token punctuation">)</span><span class="token punctuation">.</span>                <span class="token function">Produces</span><span class="token punctuation">(</span>allMediaTypes<span class="token operator">...</span><span class="token punctuation">)</span><span class="token punctuation">.</span>                <span class="token function">Returns</span><span class="token punctuation">(</span>http<span class="token punctuation">.</span>StatusOK<span class="token punctuation">,</span> <span class="token string">"OK"</span><span class="token punctuation">,</span> versionedWatchEvent<span class="token punctuation">)</span><span class="token punctuation">.</span>                <span class="token function">Writes</span><span class="token punctuation">(</span>versionedWatchEvent<span class="token punctuation">)</span>            <span class="token keyword">if</span> err <span class="token operator">:=</span> <span class="token function">AddObjectParams</span><span class="token punctuation">(</span>ws<span class="token punctuation">,</span> route<span class="token punctuation">,</span> versionedListOptions<span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> err            <span class="token punctuation">}</span>            <span class="token function">addParams</span><span class="token punctuation">(</span>route<span class="token punctuation">,</span> action<span class="token punctuation">.</span>Params<span class="token punctuation">)</span>            routes <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>routes<span class="token punctuation">,</span> route<span class="token punctuation">)</span>        <span class="token keyword">case</span> <span class="token string">"CONNECT"</span><span class="token punctuation">:</span>            <span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> method <span class="token operator">:=</span> <span class="token keyword">range</span> connecter<span class="token punctuation">.</span><span class="token function">ConnectMethods</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                connectProducedObject <span class="token operator">:=</span> storageMeta<span class="token punctuation">.</span><span class="token function">ProducesObject</span><span class="token punctuation">(</span>method<span class="token punctuation">)</span>                <span class="token keyword">if</span> connectProducedObject <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>                    connectProducedObject <span class="token operator">=</span> <span class="token string">"string"</span>                <span class="token punctuation">}</span>                doc <span class="token operator">:=</span> <span class="token string">"connect "</span> <span class="token operator">+</span> method <span class="token operator">+</span> <span class="token string">" requests to "</span> <span class="token operator">+</span> kind                <span class="token keyword">if</span> isSubresource <span class="token punctuation">{</span>                    doc <span class="token operator">=</span> <span class="token string">"connect "</span> <span class="token operator">+</span> method <span class="token operator">+</span> <span class="token string">" requests to "</span> <span class="token operator">+</span> subresource <span class="token operator">+</span> <span class="token string">" of "</span> <span class="token operator">+</span> kind                <span class="token punctuation">}</span>                handler <span class="token operator">:=</span> metrics<span class="token punctuation">.</span><span class="token function">InstrumentRouteFunc</span><span class="token punctuation">(</span>action<span class="token punctuation">.</span>Verb<span class="token punctuation">,</span> group<span class="token punctuation">,</span> version<span class="token punctuation">,</span> resource<span class="token punctuation">,</span> subresource<span class="token punctuation">,</span> requestScope<span class="token punctuation">,</span> metrics<span class="token punctuation">.</span>APIServerComponent<span class="token punctuation">,</span> <span class="token function">restfulConnectResource</span><span class="token punctuation">(</span>connecter<span class="token punctuation">,</span> reqScope<span class="token punctuation">,</span> admit<span class="token punctuation">,</span> path<span class="token punctuation">,</span> isSubresource<span class="token punctuation">)</span><span class="token punctuation">)</span>                route <span class="token operator">:=</span> ws<span class="token punctuation">.</span><span class="token function">Method</span><span class="token punctuation">(</span>method<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Path</span><span class="token punctuation">(</span>action<span class="token punctuation">.</span>Path<span class="token punctuation">)</span><span class="token punctuation">.</span>                    <span class="token function">To</span><span class="token punctuation">(</span>handler<span class="token punctuation">)</span><span class="token punctuation">.</span>                    <span class="token function">Doc</span><span class="token punctuation">(</span>doc<span class="token punctuation">)</span><span class="token punctuation">.</span>                    <span class="token function">Operation</span><span class="token punctuation">(</span><span class="token string">"connect"</span> <span class="token operator">+</span> strings<span class="token punctuation">.</span><span class="token function">Title</span><span class="token punctuation">(</span>strings<span class="token punctuation">.</span><span class="token function">ToLower</span><span class="token punctuation">(</span>method<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span> namespaced <span class="token operator">+</span> kind <span class="token operator">+</span> strings<span class="token punctuation">.</span><span class="token function">Title</span><span class="token punctuation">(</span>subresource<span class="token punctuation">)</span> <span class="token operator">+</span> operationSuffix<span class="token punctuation">)</span><span class="token punctuation">.</span>                    <span class="token function">Produces</span><span class="token punctuation">(</span>"<span class="token operator">*</span><span class="token comment" spellcheck="true">/*").                    Consumes("*/</span><span class="token operator">*</span>"<span class="token punctuation">)</span><span class="token punctuation">.</span>                    <span class="token function">Writes</span><span class="token punctuation">(</span>connectProducedObject<span class="token punctuation">)</span>                <span class="token keyword">if</span> versionedConnectOptions <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>                    <span class="token keyword">if</span> err <span class="token operator">:=</span> <span class="token function">AddObjectParams</span><span class="token punctuation">(</span>ws<span class="token punctuation">,</span> route<span class="token punctuation">,</span> versionedConnectOptions<span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>                        <span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> err                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>                <span class="token function">addParams</span><span class="token punctuation">(</span>route<span class="token punctuation">,</span> action<span class="token punctuation">.</span>Params<span class="token punctuation">)</span>                routes <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>routes<span class="token punctuation">,</span> route<span class="token punctuation">)</span>                <span class="token comment" spellcheck="true">// transform ConnectMethods to kube verbs</span>                <span class="token keyword">if</span> kubeVerb<span class="token punctuation">,</span> found <span class="token operator">:=</span> toDiscoveryKubeVerb<span class="token punctuation">[</span>method<span class="token punctuation">]</span><span class="token punctuation">;</span> found <span class="token punctuation">{</span>                    <span class="token keyword">if</span> <span class="token function">len</span><span class="token punctuation">(</span>kubeVerb<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span> <span class="token punctuation">{</span>                        kubeVerbs<span class="token punctuation">[</span>kubeVerb<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">struct</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">{</span><span class="token punctuation">}</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token keyword">default</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> fmt<span class="token punctuation">.</span><span class="token function">Errorf</span><span class="token punctuation">(</span><span class="token string">"unrecognized action verb: %s"</span><span class="token punctuation">,</span> action<span class="token punctuation">.</span>Verb<span class="token punctuation">)</span>        <span class="token punctuation">}</span>        <span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> route <span class="token operator">:=</span> <span class="token keyword">range</span> routes <span class="token punctuation">{</span>            route<span class="token punctuation">.</span><span class="token function">Metadata</span><span class="token punctuation">(</span>ROUTE_META_GVK<span class="token punctuation">,</span> metav1<span class="token punctuation">.</span>GroupVersionKind<span class="token punctuation">{</span>                Group<span class="token punctuation">:</span>   reqScope<span class="token punctuation">.</span>Kind<span class="token punctuation">.</span>Group<span class="token punctuation">,</span>                Version<span class="token punctuation">:</span> reqScope<span class="token punctuation">.</span>Kind<span class="token punctuation">.</span>Version<span class="token punctuation">,</span>                Kind<span class="token punctuation">:</span>    reqScope<span class="token punctuation">.</span>Kind<span class="token punctuation">.</span>Kind<span class="token punctuation">,</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span>            route<span class="token punctuation">.</span><span class="token function">Metadata</span><span class="token punctuation">(</span>ROUTE_META_ACTION<span class="token punctuation">,</span> strings<span class="token punctuation">.</span><span class="token function">ToLower</span><span class="token punctuation">(</span>action<span class="token punctuation">.</span>Verb<span class="token punctuation">)</span><span class="token punctuation">)</span>            ws<span class="token punctuation">.</span><span class="token function">Route</span><span class="token punctuation">(</span>route<span class="token punctuation">)</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// Note: update GetAuthorizerAttributes() when adding a custom handler.</span>    <span class="token punctuation">}</span>    apiResource<span class="token punctuation">.</span>Verbs <span class="token operator">=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token function">len</span><span class="token punctuation">(</span>kubeVerbs<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> kubeVerb <span class="token operator">:=</span> <span class="token keyword">range</span> kubeVerbs <span class="token punctuation">{</span>        apiResource<span class="token punctuation">.</span>Verbs <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>apiResource<span class="token punctuation">.</span>Verbs<span class="token punctuation">,</span> kubeVerb<span class="token punctuation">)</span>    <span class="token punctuation">}</span>    sort<span class="token punctuation">.</span><span class="token function">Strings</span><span class="token punctuation">(</span>apiResource<span class="token punctuation">.</span>Verbs<span class="token punctuation">)</span>    <span class="token keyword">if</span> shortNamesProvider<span class="token punctuation">,</span> ok <span class="token operator">:=</span> storage<span class="token punctuation">.</span><span class="token punctuation">(</span>rest<span class="token punctuation">.</span>ShortNamesProvider<span class="token punctuation">)</span><span class="token punctuation">;</span> ok <span class="token punctuation">{</span>        apiResource<span class="token punctuation">.</span>ShortNames <span class="token operator">=</span> shortNamesProvider<span class="token punctuation">.</span><span class="token function">ShortNames</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> categoriesProvider<span class="token punctuation">,</span> ok <span class="token operator">:=</span> storage<span class="token punctuation">.</span><span class="token punctuation">(</span>rest<span class="token punctuation">.</span>CategoriesProvider<span class="token punctuation">)</span><span class="token punctuation">;</span> ok <span class="token punctuation">{</span>        apiResource<span class="token punctuation">.</span>Categories <span class="token operator">=</span> categoriesProvider<span class="token punctuation">.</span><span class="token function">Categories</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> gvkProvider<span class="token punctuation">,</span> ok <span class="token operator">:=</span> storage<span class="token punctuation">.</span><span class="token punctuation">(</span>rest<span class="token punctuation">.</span>GroupVersionKindProvider<span class="token punctuation">)</span><span class="token punctuation">;</span> ok <span class="token punctuation">{</span>        gvk <span class="token operator">:=</span> gvkProvider<span class="token punctuation">.</span><span class="token function">GroupVersionKind</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span>group<span class="token punctuation">.</span>GroupVersion<span class="token punctuation">)</span>        apiResource<span class="token punctuation">.</span>Group <span class="token operator">=</span> gvk<span class="token punctuation">.</span>Group        apiResource<span class="token punctuation">.</span>Version <span class="token operator">=</span> gvk<span class="token punctuation">.</span>Version        apiResource<span class="token punctuation">.</span>Kind <span class="token operator">=</span> gvk<span class="token punctuation">.</span>Kind    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// Record the existence of the GVR and the corresponding GVK</span>    a<span class="token punctuation">.</span>group<span class="token punctuation">.</span>EquivalentResourceRegistry<span class="token punctuation">.</span><span class="token function">RegisterKindFor</span><span class="token punctuation">(</span>reqScope<span class="token punctuation">.</span>Resource<span class="token punctuation">,</span> reqScope<span class="token punctuation">.</span>Subresource<span class="token punctuation">,</span> fqKindToRegister<span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token operator">&amp;</span>apiResource<span class="token punctuation">,</span> <span class="token boolean">nil</span><span class="token punctuation">}</span></code></pre><h3 id="API-server-存储"><a href="#API-server-存储" class="headerlink" title="API server 存储"></a>API server 存储</h3><h4 id="registry"><a href="#registry" class="headerlink" title="registry"></a>registry</h4><p>在 Kubernetes中，registry 可以对 ETCD中 的 Kubernetes 各类型进行增删查改操作，并对外提供了生成apiGroupInfo 的方法。这里的 registry 包含了两层含义，Storage 和 Registry，如 NodeStorage 和NodeRegistry。Storage 提供了通用的增删查改方法，Regsitry 是对Storage的封装，提供了具体类型的增删查改方法。registry定义在<code>/pkg/registry</code>目录下，主要包含：</p><ul><li>admissionregistration:  定义 admission 相关的 registry 信息</li></ul><ul><li>apps: 定义statefulsets相关的registry信息；</li><li>authentication: 定义tokenreview相关的registry信息；</li><li>authorization: 定义localsubjectaccessreview, selfsubjectaccessreview, subjectaccessreview相关的registry信息；</li><li>autoscaling: 定义horizontalpodautoscaler相关的registry信息；</li><li>batch: 定义scheduledjobs相关的registry信息；</li><li>certificates: 定义certificatesigningrequests相关的registry信息；</li><li>core: 定义componentstatus, configmap, controller, endpoint, event, limitrange, namespace, node, persistentvolume, persistentvolumeclaim, pod, podtemplate, rangeallocation, resourcequota, secret, service, serviceaccount的registry信息；</li><li>extensions: 定义replicationcontrollers, daemonset, deployment, ingress, networkpolicy, podsecuritypolicy, replicaset等相关的registry信息；</li><li>generic: 公共模块，对storage模块进行封装；</li><li>policy: 定义poddisruptionbudgets相关的registry信息；</li><li>rbac: 定义cluserrole, role等相关的registry信息；</li><li>storage: 定义storageclass相关的registry信息。</li></ul><p>每个子目录都对应一个APIGroup，如core对应的是v1，每个子目录下都有个rest的目录，其中core目录实现了NewLegacyRESTStorage()方法生成对应的apiGroupInfo，其他目录实现了NewRESTStorage()方法生成对应的apiGroupInfo。apiGroupInfo是联系registry和apiserver的通道。</p><p>在NewLegacyRESTStorage()方法中，会调用NewStorage()生成storage，如nodeStorage等，进一步地生成restStorageMap，然后生成apiGroupInfo。</p><p>其他APIGroup使用NewRESTStorage()，会调用NewREST()生成storage，如rolesStorage。</p><p>我们以core包下的node为例来看下NewStorage()的实现，以rbac包下的role为例来看下NewREST()的实现。</p><h5 id="nodeStorage"><a href="#nodeStorage" class="headerlink" title="nodeStorage"></a>nodeStorage</h5><p>node定义在<code>/pkg/registry/core/node</code>目录下。我们先来看下<code>/pkg/registry/core/rest/storage_core.go</code>中的NewLegacyRESTStorage()是如何生成 nodeStorage 的，代码如下：</p><pre class=" language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token punctuation">(</span>c LegacyRESTStorageProvider<span class="token punctuation">)</span> <span class="token function">NewLegacyRESTStorage</span><span class="token punctuation">(</span>restOptionsGetter generic<span class="token punctuation">.</span>RESTOptionsGetter<span class="token punctuation">)</span> <span class="token punctuation">(</span>LegacyRESTStorage<span class="token punctuation">,</span> genericapiserver<span class="token punctuation">.</span>APIGroupInfo<span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    apiGroupInfo <span class="token operator">:=</span> genericapiserver<span class="token punctuation">.</span>APIGroupInfo<span class="token punctuation">{</span>        PrioritizedVersions<span class="token punctuation">:</span>          legacyscheme<span class="token punctuation">.</span>Scheme<span class="token punctuation">.</span><span class="token function">PrioritizedVersionsForGroup</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        VersionedResourcesStorageMap<span class="token punctuation">:</span> <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span>rest<span class="token punctuation">.</span>Storage<span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>        Scheme<span class="token punctuation">:</span>                       legacyscheme<span class="token punctuation">.</span>Scheme<span class="token punctuation">,</span>        ParameterCodec<span class="token punctuation">:</span>               legacyscheme<span class="token punctuation">.</span>ParameterCodec<span class="token punctuation">,</span>        NegotiatedSerializer<span class="token punctuation">:</span>         legacyscheme<span class="token punctuation">.</span>Codecs<span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token operator">...</span>    restStorage <span class="token operator">:=</span> LegacyRESTStorage<span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token operator">...</span><span class="token punctuation">.</span>    nodeStorage<span class="token punctuation">,</span> err <span class="token operator">:=</span> nodestore<span class="token punctuation">.</span><span class="token function">NewStorage</span><span class="token punctuation">(</span>restOptionsGetter<span class="token punctuation">,</span> c<span class="token punctuation">.</span>KubeletClientConfig<span class="token punctuation">,</span> c<span class="token punctuation">.</span>ProxyTransport<span class="token punctuation">)</span>    <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> LegacyRESTStorage<span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> genericapiserver<span class="token punctuation">.</span>APIGroupInfo<span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> err    <span class="token punctuation">}</span><span class="token comment" spellcheck="true">///</span>    apiGroupInfo<span class="token punctuation">.</span>VersionedResourcesStorageMap<span class="token punctuation">[</span><span class="token string">"v1"</span><span class="token punctuation">]</span> <span class="token operator">=</span> restStorageMap    <span class="token keyword">return</span> restStorage<span class="token punctuation">,</span> apiGroupInfo<span class="token punctuation">,</span> <span class="token boolean">nil</span><span class="token punctuation">}</span></code></pre><h5 id="NewStorage"><a href="#NewStorage" class="headerlink" title="NewStorage"></a>NewStorage</h5><p>node的NewStorage()定义在<code>/pkg/registry/core/node/storage/storage.go</code>中，主要流程如下：</p><ol><li>生成store，store为genericStore</li><li>生成nodeREST;</li><li>生成NodeStorage。</li></ol><pre class=" language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">NewStorage</span><span class="token punctuation">(</span>optsGetter generic<span class="token punctuation">.</span>RESTOptionsGetter<span class="token punctuation">,</span> kubeletClientConfig client<span class="token punctuation">.</span>KubeletClientConfig<span class="token punctuation">,</span> proxyTransport http<span class="token punctuation">.</span>RoundTripper<span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token operator">*</span>NodeStorage<span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    store <span class="token operator">:=</span> <span class="token operator">&amp;</span>genericregistry<span class="token punctuation">.</span>Store<span class="token punctuation">{</span>        NewFunc<span class="token punctuation">:</span>                  <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> runtime<span class="token punctuation">.</span>Object <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token operator">&amp;</span>api<span class="token punctuation">.</span>Node<span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>        NewListFunc<span class="token punctuation">:</span>              <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> runtime<span class="token punctuation">.</span>Object <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token operator">&amp;</span>api<span class="token punctuation">.</span>NodeList<span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>        PredicateFunc<span class="token punctuation">:</span>            node<span class="token punctuation">.</span>MatchNode<span class="token punctuation">,</span>        DefaultQualifiedResource<span class="token punctuation">:</span> api<span class="token punctuation">.</span><span class="token function">Resource</span><span class="token punctuation">(</span><span class="token string">"nodes"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        CreateStrategy<span class="token punctuation">:</span> node<span class="token punctuation">.</span>Strategy<span class="token punctuation">,</span>        UpdateStrategy<span class="token punctuation">:</span> node<span class="token punctuation">.</span>Strategy<span class="token punctuation">,</span>        DeleteStrategy<span class="token punctuation">:</span> node<span class="token punctuation">.</span>Strategy<span class="token punctuation">,</span>        ExportStrategy<span class="token punctuation">:</span> node<span class="token punctuation">.</span>Strategy<span class="token punctuation">,</span>        TableConvertor<span class="token punctuation">:</span> printerstorage<span class="token punctuation">.</span>TableConvertor<span class="token punctuation">{</span>TableGenerator<span class="token punctuation">:</span> printers<span class="token punctuation">.</span><span class="token function">NewTableGenerator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">With</span><span class="token punctuation">(</span>printersinternal<span class="token punctuation">.</span>AddHandlers<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">}</span>    options <span class="token operator">:=</span> <span class="token operator">&amp;</span>generic<span class="token punctuation">.</span>StoreOptions<span class="token punctuation">{</span>        RESTOptions<span class="token punctuation">:</span> optsGetter<span class="token punctuation">,</span>        AttrFunc<span class="token punctuation">:</span>    node<span class="token punctuation">.</span>GetAttrs<span class="token punctuation">,</span>        TriggerFunc<span class="token punctuation">:</span> <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span>storage<span class="token punctuation">.</span>IndexerFunc<span class="token punctuation">{</span><span class="token string">"metadata.name"</span><span class="token punctuation">:</span> node<span class="token punctuation">.</span>NameTriggerFunc<span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> err <span class="token operator">:=</span> store<span class="token punctuation">.</span><span class="token function">CompleteWithOptions</span><span class="token punctuation">(</span>options<span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> err    <span class="token punctuation">}</span>    statusStore <span class="token operator">:=</span> <span class="token operator">*</span>store    statusStore<span class="token punctuation">.</span>UpdateStrategy <span class="token operator">=</span> node<span class="token punctuation">.</span>StatusStrategy    <span class="token comment" spellcheck="true">// Set up REST handlers</span>    nodeREST <span class="token operator">:=</span> <span class="token operator">&amp;</span>REST<span class="token punctuation">{</span>Store<span class="token punctuation">:</span> store<span class="token punctuation">,</span> proxyTransport<span class="token punctuation">:</span> proxyTransport<span class="token punctuation">}</span>    statusREST <span class="token operator">:=</span> <span class="token operator">&amp;</span>StatusREST<span class="token punctuation">{</span>store<span class="token punctuation">:</span> <span class="token operator">&amp;</span>statusStore<span class="token punctuation">}</span>    proxyREST <span class="token operator">:=</span> <span class="token operator">&amp;</span>noderest<span class="token punctuation">.</span>ProxyREST<span class="token punctuation">{</span>Store<span class="token punctuation">:</span> store<span class="token punctuation">,</span> ProxyTransport<span class="token punctuation">:</span> proxyTransport<span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// Build a NodeGetter that looks up nodes using the REST handler</span>    nodeGetter <span class="token operator">:=</span> client<span class="token punctuation">.</span><span class="token function">NodeGetterFunc</span><span class="token punctuation">(</span><span class="token keyword">func</span><span class="token punctuation">(</span>ctx context<span class="token punctuation">.</span>Context<span class="token punctuation">,</span> nodeName <span class="token builtin">string</span><span class="token punctuation">,</span> options metav1<span class="token punctuation">.</span>GetOptions<span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token operator">*</span>v1<span class="token punctuation">.</span>Node<span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        obj<span class="token punctuation">,</span> err <span class="token operator">:=</span> nodeREST<span class="token punctuation">.</span><span class="token function">Get</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> nodeName<span class="token punctuation">,</span> <span class="token operator">&amp;</span>options<span class="token punctuation">)</span>        <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> err        <span class="token punctuation">}</span>        node<span class="token punctuation">,</span> ok <span class="token operator">:=</span> obj<span class="token punctuation">.</span><span class="token punctuation">(</span><span class="token operator">*</span>api<span class="token punctuation">.</span>Node<span class="token punctuation">)</span>        <span class="token keyword">if</span> <span class="token operator">!</span>ok <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> fmt<span class="token punctuation">.</span><span class="token function">Errorf</span><span class="token punctuation">(</span><span class="token string">"unexpected type %T"</span><span class="token punctuation">,</span> obj<span class="token punctuation">)</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// TODO: Remove the conversion. Consider only return the NodeAddresses</span>        externalNode <span class="token operator">:=</span> <span class="token operator">&amp;</span>v1<span class="token punctuation">.</span>Node<span class="token punctuation">{</span><span class="token punctuation">}</span>        err <span class="token operator">=</span> k8s_api_v1<span class="token punctuation">.</span><span class="token function">Convert_core_Node_To_v1_Node</span><span class="token punctuation">(</span>node<span class="token punctuation">,</span> externalNode<span class="token punctuation">,</span> <span class="token boolean">nil</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> fmt<span class="token punctuation">.</span><span class="token function">Errorf</span><span class="token punctuation">(</span><span class="token string">"failed to convert to v1.Node: %v"</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> externalNode<span class="token punctuation">,</span> <span class="token boolean">nil</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>    connectionInfoGetter<span class="token punctuation">,</span> err <span class="token operator">:=</span> client<span class="token punctuation">.</span><span class="token function">NewNodeConnectionInfoGetter</span><span class="token punctuation">(</span>nodeGetter<span class="token punctuation">,</span> kubeletClientConfig<span class="token punctuation">)</span>    <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> err    <span class="token punctuation">}</span>    nodeREST<span class="token punctuation">.</span>connection <span class="token operator">=</span> connectionInfoGetter    proxyREST<span class="token punctuation">.</span>Connection <span class="token operator">=</span> connectionInfoGetter    <span class="token keyword">return</span> <span class="token operator">&amp;</span>NodeStorage<span class="token punctuation">{</span>        Node<span class="token punctuation">:</span>                  nodeREST<span class="token punctuation">,</span>        Status<span class="token punctuation">:</span>                statusREST<span class="token punctuation">,</span>        Proxy<span class="token punctuation">:</span>                 proxyREST<span class="token punctuation">,</span>        KubeletConnectionInfo<span class="token punctuation">:</span> connectionInfoGetter<span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token boolean">nil</span><span class="token punctuation">}</span></code></pre><p>可以看出，NodeStorage 本质是一个genericStore，Store中定义有Create(), Delete(), Get(), List(), Watch()等方法。</p><pre class=" language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token punctuation">(</span>e <span class="token operator">*</span>Store<span class="token punctuation">)</span> <span class="token function">New</span><span class="token punctuation">(</span><span class="token punctuation">)</span> runtime<span class="token punctuation">.</span>Object <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token punctuation">(</span>e <span class="token operator">*</span>Store<span class="token punctuation">)</span> <span class="token function">List</span><span class="token punctuation">(</span>ctx context<span class="token punctuation">.</span>Context<span class="token punctuation">,</span> options <span class="token operator">*</span>metainternalversion<span class="token punctuation">.</span>ListOptions<span class="token punctuation">)</span> <span class="token punctuation">(</span>runtime<span class="token punctuation">.</span>Object<span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token punctuation">(</span>e <span class="token operator">*</span>Store<span class="token punctuation">)</span> <span class="token function">Create</span><span class="token punctuation">(</span>ctx context<span class="token punctuation">.</span>Context<span class="token punctuation">,</span> obj runtime<span class="token punctuation">.</span>Object<span class="token punctuation">,</span> createValidation rest<span class="token punctuation">.</span>ValidateObjectFunc<span class="token punctuation">,</span> options <span class="token operator">*</span>metav1<span class="token punctuation">.</span>CreateOptions<span class="token punctuation">)</span> <span class="token punctuation">(</span>runtime<span class="token punctuation">.</span>Object<span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">func</span> <span class="token punctuation">(</span>e <span class="token operator">*</span>Store<span class="token punctuation">)</span> <span class="token function">Update</span><span class="token punctuation">(</span>ctx context<span class="token punctuation">.</span>Context<span class="token punctuation">,</span> name <span class="token builtin">string</span><span class="token punctuation">,</span> objInfo rest<span class="token punctuation">.</span>UpdatedObjectInfo<span class="token punctuation">,</span> createValidation rest<span class="token punctuation">.</span>ValidateObjectFunc<span class="token punctuation">,</span> updateValidation rest<span class="token punctuation">.</span>ValidateObjectUpdateFunc<span class="token punctuation">,</span> forceAllowCreate <span class="token builtin">bool</span><span class="token punctuation">,</span> options <span class="token operator">*</span>metav1<span class="token punctuation">.</span>UpdateOptions<span class="token punctuation">)</span> <span class="token punctuation">(</span>runtime<span class="token punctuation">.</span>Object<span class="token punctuation">,</span> <span class="token builtin">bool</span><span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token punctuation">(</span>e <span class="token operator">*</span>Store<span class="token punctuation">)</span> <span class="token function">Get</span><span class="token punctuation">(</span>ctx context<span class="token punctuation">.</span>Context<span class="token punctuation">,</span> name <span class="token builtin">string</span><span class="token punctuation">,</span> options <span class="token operator">*</span>metav1<span class="token punctuation">.</span>GetOptions<span class="token punctuation">)</span> <span class="token punctuation">(</span>runtime<span class="token punctuation">.</span>Object<span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token punctuation">(</span>e <span class="token operator">*</span>Store<span class="token punctuation">)</span> <span class="token function">Delete</span><span class="token punctuation">(</span>ctx context<span class="token punctuation">.</span>Context<span class="token punctuation">,</span> name <span class="token builtin">string</span><span class="token punctuation">,</span> deleteValidation rest<span class="token punctuation">.</span>ValidateObjectFunc<span class="token punctuation">,</span> options <span class="token operator">*</span>metav1<span class="token punctuation">.</span>DeleteOptions<span class="token punctuation">)</span> <span class="token punctuation">(</span>runtime<span class="token punctuation">.</span>Object<span class="token punctuation">,</span> <span class="token builtin">bool</span><span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Kubernetes </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Kubernetes </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>深入理解 Kubernetes 之 Kubectl</title>
      <link href="/2020/05/21/k8s02/"/>
      <url>/2020/05/21/k8s02/</url>
      
        <content type="html"><![CDATA[<h1 id="深入理解-Kubectl"><a href="#深入理解-Kubectl" class="headerlink" title="深入理解 Kubectl"></a>深入理解 Kubectl</h1><p>kubectl 是 Kubernetes 集群的命令行工具，通过 kubectl 能够对集群本身进行管理，并能够在集群上进行容器化应用的安装部署。运行 kubectl 命令的语法如下所示：</p><pre class=" language-bash"><code class="language-bash">kubectl <span class="token punctuation">[</span>command<span class="token punctuation">]</span> <span class="token punctuation">[</span>TYPE<span class="token punctuation">]</span> <span class="token punctuation">[</span>NAME<span class="token punctuation">]</span> <span class="token punctuation">[</span>flags<span class="token punctuation">]</span></code></pre><p><strong>comand</strong>：指定要对资源执行的操作，例如 create、get、describe 和 delete。</p><p><strong>TYPE</strong>：指定资源类型，资源类型是大小学敏感的，开发者能够以单数、复数和缩略的形式。</p><p><strong>NAME</strong>：指定资源的名称，名称也大小写敏感的。如果省略名称，则会显示所有的资源。</p><p><strong>flags</strong>：指定可选的参数。</p><p>例如：</p><pre class=" language-bash"><code class="language-bash">kubectl create -f nginx-deployment.yaml</code></pre><h2 id="Kubectl-流程"><a href="#Kubectl-流程" class="headerlink" title="Kubectl 流程"></a>Kubectl 流程</h2><p><img src="/images/2020/kubectl.png" alt=""></p><p>Kubectl 的执行流程：</p><ol><li><p>用户发起请求</p></li><li><p>根据用户执行动作分发给处理对应动作的 Cmd （Builder 设计模式）</p></li><li><p>解析用户命令 （Visitor 设计模式）</p></li><li><p>向Apiserver获取数据</p></li><li><p>解析返回为通用的数据集合</p></li></ol><h2 id="源码分析"><a href="#源码分析" class="headerlink" title="源码分析"></a>源码分析</h2><p>执行以下代码：</p><pre class=" language-bash"><code class="language-bash">kubectl create -f nginx-deployment.yaml</code></pre><h3 id="入口"><a href="#入口" class="headerlink" title="入口"></a>入口</h3><p>代码路径：</p><p><a href="https://github.com/kubernetes/kubernetes/blob/9e991415386e4cf155a24b1da15becaa390438d8/cmd/kubectl/kubectl.go#L35" target="_blank" rel="noopener"><code>kubernetes/cmd/kubectl/kubectl.go</code></a></p><pre class=" language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token operator">...</span>    <span class="token comment" spellcheck="true">// 准备command</span>    command <span class="token operator">:=</span> cmd<span class="token punctuation">.</span><span class="token function">NewDefaultKubectlCommand</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// 执行命令</span>    <span class="token keyword">if</span> err <span class="token operator">:=</span> command<span class="token punctuation">.</span><span class="token function">Execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>        os<span class="token punctuation">.</span><span class="token function">Exit</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="命令匹配"><a href="#命令匹配" class="headerlink" title="命令匹配"></a>命令匹配</h3><p>代码路径：</p><p><a href="https://github.com/kubernetes/kubernetes/blob/9e991415386e4cf155a24b1da15becaa390438d8/pkg/kubectl/cmd/cmd.go#L482" target="_blank" rel="noopener">kubernetes/pkg/kubectl/cmd/cmd.go</a></p><pre class=" language-go"><code class="language-go"><span class="token comment" spellcheck="true">// 对用户输入的命令进行匹配</span>groups <span class="token operator">:=</span> templates<span class="token punctuation">.</span>CommandGroups<span class="token punctuation">{</span>        <span class="token punctuation">{</span>            Message<span class="token punctuation">:</span> <span class="token string">"Basic Commands (Beginner):"</span><span class="token punctuation">,</span>            Commands<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">*</span>cobra<span class="token punctuation">.</span>Command<span class="token punctuation">{</span>                create<span class="token punctuation">.</span><span class="token function">NewCmdCreate</span><span class="token punctuation">(</span>f<span class="token punctuation">,</span> ioStreams<span class="token punctuation">)</span><span class="token punctuation">,</span>                expose<span class="token punctuation">.</span><span class="token function">NewCmdExposeService</span><span class="token punctuation">(</span>f<span class="token punctuation">,</span> ioStreams<span class="token punctuation">)</span><span class="token punctuation">,</span>                run<span class="token punctuation">.</span><span class="token function">NewCmdRun</span><span class="token punctuation">(</span>f<span class="token punctuation">,</span> ioStreams<span class="token punctuation">)</span><span class="token punctuation">,</span>                set<span class="token punctuation">.</span><span class="token function">NewCmdSet</span><span class="token punctuation">(</span>f<span class="token punctuation">,</span> ioStreams<span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token punctuation">}</span>        <span class="token operator">...</span><span class="token punctuation">}</span></code></pre><h3 id="处理用户命令"><a href="#处理用户命令" class="headerlink" title="处理用户命令"></a>处理用户命令</h3><p>代码路径：</p><p><a href="https://github.com/kubernetes/kubernetes/blob/9e991415386e4cf155a24b1da15becaa390438d8/staging/src/k8s.io/kubectl/pkg/cmd/create/create.go#L116" target="_blank" rel="noopener">kubernetes/staging/src/k8s.io/kubectl/pkg/cmd/create/create.go</a></p><p>匹配上 <code>create</code> 命令调用 <code>o.RunCreate(f,cmd)</code> 函数执行</p><pre class=" language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">NewCmdCreate</span><span class="token punctuation">(</span>f cmdutil<span class="token punctuation">.</span>Factory<span class="token punctuation">,</span> ioStreams genericclioptions<span class="token punctuation">.</span>IOStreams<span class="token punctuation">)</span> <span class="token operator">*</span>cobra<span class="token punctuation">.</span>Command <span class="token punctuation">{</span>    o <span class="token operator">:=</span> <span class="token function">NewCreateOptions</span><span class="token punctuation">(</span>ioStreams<span class="token punctuation">)</span>    cmd <span class="token operator">:=</span> <span class="token operator">&amp;</span>cobra<span class="token punctuation">.</span>Command<span class="token punctuation">{</span>        Use<span class="token punctuation">:</span>                   <span class="token string">"create -f FILENAME"</span><span class="token punctuation">,</span>        DisableFlagsInUseLine<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>        Short<span class="token punctuation">:</span>                 i18n<span class="token punctuation">.</span><span class="token function">T</span><span class="token punctuation">(</span><span class="token string">"Create a resource from a file or from stdin."</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        Long<span class="token punctuation">:</span>                  createLong<span class="token punctuation">,</span>        Example<span class="token punctuation">:</span>               createExample<span class="token punctuation">,</span>        Run<span class="token punctuation">:</span> <span class="token keyword">func</span><span class="token punctuation">(</span>cmd <span class="token operator">*</span>cobra<span class="token punctuation">.</span>Command<span class="token punctuation">,</span> args <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 合法性检查</span>            cmdutil<span class="token punctuation">.</span><span class="token function">CheckErr</span><span class="token punctuation">(</span>o<span class="token punctuation">.</span><span class="token function">Complete</span><span class="token punctuation">(</span>f<span class="token punctuation">,</span> cmd<span class="token punctuation">)</span><span class="token punctuation">)</span>            cmdutil<span class="token punctuation">.</span><span class="token function">CheckErr</span><span class="token punctuation">(</span>o<span class="token punctuation">.</span><span class="token function">ValidateArgs</span><span class="token punctuation">(</span>cmd<span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token comment" spellcheck="true">// 执行命令</span>            cmdutil<span class="token punctuation">.</span><span class="token function">CheckErr</span><span class="token punctuation">(</span>o<span class="token punctuation">.</span><span class="token function">RunCreate</span><span class="token punctuation">(</span>f<span class="token punctuation">,</span> cmd<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 创建子命令</span>    cmd<span class="token punctuation">.</span><span class="token function">AddCommand</span><span class="token punctuation">(</span><span class="token function">NewCmdCreateNamespace</span><span class="token punctuation">(</span>f<span class="token punctuation">,</span> ioStreams<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">...</span>    <span class="token keyword">return</span> cmd<span class="token punctuation">}</span></code></pre><p>在 RunCreate 中时对该命令的具体处理，通过链式反应</p><p><code>f.NewBuilder().Unstructured().Schema(schema).ContinueOnError().NamespaceParam(cmdNamespace).DefaultNamespace().FilenameParam().LabelSelectorParam().Flatten().Do()</code></p><p>为执行命令做好数据准备。这段代码所做的事情是将命令行接收到的参数转化为一个资源的列。它也负责创建一个可以用来迭代访问所有资源的 Visitor 结构。这个命令比较复杂，因为它使用了Builder模式的变种，使用独立的函数做各自的数据初始化工作。</p><p>一旦所有的初始化都完成，resource.NewBuilder 函数会调用 Do 函数。<code>Do()</code> 函数是注册具体向 Apiserver 请求数据，和将返回数据转化为通用结构的函数。它会返回一个Result对象，并且将执行对资源的创建。Do 函数还会创建一个Visitor对象，可以用来遍历所有关联到 resource.NewBuilder 执行过程的资源。</p><pre class=" language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token punctuation">(</span>o <span class="token operator">*</span>CreateOptions<span class="token punctuation">)</span> <span class="token function">RunCreate</span><span class="token punctuation">(</span>f cmdutil<span class="token punctuation">.</span>Factory<span class="token punctuation">,</span> cmd <span class="token operator">*</span>cobra<span class="token punctuation">.</span>Command<span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">{</span><span class="token operator">...</span>    r <span class="token operator">:=</span> f<span class="token punctuation">.</span><span class="token function">NewBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>  <span class="token comment" spellcheck="true">// Builder 设计模式</span>        <span class="token function">Unstructured</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>   <span class="token comment" spellcheck="true">// 支持非结构化数据</span>        <span class="token function">Schema</span><span class="token punctuation">(</span>schema<span class="token punctuation">)</span><span class="token punctuation">.</span>        <span class="token function">ContinueOnError</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>        <span class="token function">NamespaceParam</span><span class="token punctuation">(</span>cmdNamespace<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">DefaultNamespace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>        <span class="token function">FilenameParam</span><span class="token punctuation">(</span>enforceNamespace<span class="token punctuation">,</span> <span class="token operator">&amp;</span>o<span class="token punctuation">.</span>FilenameOptions<span class="token punctuation">)</span><span class="token punctuation">.</span>        <span class="token function">LabelSelectorParam</span><span class="token punctuation">(</span>o<span class="token punctuation">.</span>Selector<span class="token punctuation">)</span><span class="token punctuation">.</span> <span class="token comment" spellcheck="true">// 设置用户的标签选择</span>        <span class="token function">Flatten</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>  <span class="token comment" spellcheck="true">// 决定以何种方式从 Kubernetes 的返回数据中提取数据</span>        <span class="token function">Do</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 执行命令获取数据</span>    <span class="token comment" spellcheck="true">// 创建 Visitor 对象，可以用来遍历所有关联到 Builder 执行过程的资源</span>    err <span class="token operator">=</span> r<span class="token punctuation">.</span><span class="token function">Visit</span><span class="token punctuation">(</span><span class="token keyword">func</span><span class="token punctuation">(</span>info <span class="token operator">*</span>resource<span class="token punctuation">.</span>Info<span class="token punctuation">,</span> err <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">{</span><span class="token operator">...</span>        <span class="token keyword">return</span> o<span class="token punctuation">.</span><span class="token function">PrintObj</span><span class="token punctuation">(</span>info<span class="token punctuation">.</span>Object<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 打印对象</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token operator">...</span><span class="token punctuation">}</span></code></pre><h3 id="发送请求并获取数据"><a href="#发送请求并获取数据" class="headerlink" title="发送请求并获取数据"></a>发送请求并获取数据</h3><p>代码路径：</p><p><a href="https://github.com/kubernetes/kubernetes/blob/v1.18.0/staging/src/k8s.io/cli-runtime/pkg/resource/builder.go#L1098" target="_blank" rel="noopener">kubernetes/staging/src/k8s.io/cli-runtime/pkg/resource/builder.go </a></p><p>重要函数：</p><ul><li><code>RetrieveLazy</code> 中注册了从 Apiserver 获取数据的操作。</li><li><code>NewDecoratedVisitor</code> 中注册了从获取到的数据结构中转化出通用数据的方法。</li></ul><pre class=" language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token punctuation">(</span>b <span class="token operator">*</span>Builder<span class="token punctuation">)</span> <span class="token function">Do</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span>Result <span class="token punctuation">{</span>    r <span class="token operator">:=</span> b<span class="token punctuation">.</span><span class="token function">visitorResult</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    r<span class="token punctuation">.</span>mapper <span class="token operator">=</span> b<span class="token punctuation">.</span><span class="token function">Mapper</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> r<span class="token punctuation">.</span>err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> r    <span class="token punctuation">}</span>    <span class="token keyword">if</span> b<span class="token punctuation">.</span>flatten <span class="token punctuation">{</span>        r<span class="token punctuation">.</span>visitor <span class="token operator">=</span> <span class="token function">NewFlattenListVisitor</span><span class="token punctuation">(</span>r<span class="token punctuation">.</span>visitor<span class="token punctuation">,</span> b<span class="token punctuation">.</span>objectTyper<span class="token punctuation">,</span> b<span class="token punctuation">.</span>mapper<span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 注册获取数据前的动作</span>    helpers <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>VisitorFunc<span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token keyword">if</span> b<span class="token punctuation">.</span>defaultNamespace <span class="token punctuation">{</span>        helpers <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>helpers<span class="token punctuation">,</span> <span class="token function">SetNamespace</span><span class="token punctuation">(</span>b<span class="token punctuation">.</span>namespace<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> b<span class="token punctuation">.</span>requireNamespace <span class="token punctuation">{</span>        helpers <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>helpers<span class="token punctuation">,</span> <span class="token function">RequireNamespace</span><span class="token punctuation">(</span>b<span class="token punctuation">.</span>namespace<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    helpers <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>helpers<span class="token punctuation">,</span> FilterNamespace<span class="token punctuation">)</span>     <span class="token comment" spellcheck="true">// 注册从 Apiserver 获取数据的方法</span>    <span class="token keyword">if</span> b<span class="token punctuation">.</span>requireObject <span class="token punctuation">{</span>        helpers <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>helpers<span class="token punctuation">,</span> RetrieveLazy<span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 注册从返回数据中提取信息的方法</span>    <span class="token keyword">if</span> b<span class="token punctuation">.</span>continueOnError <span class="token punctuation">{</span>        r<span class="token punctuation">.</span>visitor <span class="token operator">=</span> <span class="token function">NewDecoratedVisitor</span><span class="token punctuation">(</span>ContinueOnErrorVisitor<span class="token punctuation">{</span>r<span class="token punctuation">.</span>visitor<span class="token punctuation">}</span><span class="token punctuation">,</span> helpers<span class="token operator">...</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        r<span class="token punctuation">.</span>visitor <span class="token operator">=</span> <span class="token function">NewDecoratedVisitor</span><span class="token punctuation">(</span>r<span class="token punctuation">.</span>visitor<span class="token punctuation">,</span> helpers<span class="token operator">...</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> r<span class="token punctuation">}</span></code></pre><pre class=" language-go"><code class="language-go"><span class="token comment" spellcheck="true">// RetrieveLazy updates the object if it has not been loaded yet.</span><span class="token keyword">func</span> <span class="token function">RetrieveLazy</span><span class="token punctuation">(</span>info <span class="token operator">*</span>Info<span class="token punctuation">,</span> err <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> err    <span class="token punctuation">}</span>    <span class="token keyword">if</span> info<span class="token punctuation">.</span>Object <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> info<span class="token punctuation">.</span><span class="token function">Get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 从 API server 获取数据</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">}</span></code></pre><p>而 NewDecoratedVisitor 函数注册了数据处理的关键函数 Visit， 这个函数可以使用户可以将来自 API server 的数据转化为通用数据集合。</p><pre class=" language-go"><code class="language-go"><span class="token comment" spellcheck="true">// Visit implements Visitor</span><span class="token keyword">func</span> <span class="token punctuation">(</span>v DecoratedVisitor<span class="token punctuation">)</span> <span class="token function">Visit</span><span class="token punctuation">(</span>fn VisitorFunc<span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> v<span class="token punctuation">.</span>visitor<span class="token punctuation">.</span><span class="token function">Visit</span><span class="token punctuation">(</span><span class="token keyword">func</span><span class="token punctuation">(</span>info <span class="token operator">*</span>Info<span class="token punctuation">,</span> err <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> err        <span class="token punctuation">}</span>        <span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token keyword">range</span> v<span class="token punctuation">.</span>decorators <span class="token punctuation">{</span>            <span class="token keyword">if</span> err <span class="token operator">:=</span> v<span class="token punctuation">.</span>decorators<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">(</span>info<span class="token punctuation">,</span> <span class="token boolean">nil</span><span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> err            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token function">fn</span><span class="token punctuation">(</span>info<span class="token punctuation">,</span> <span class="token boolean">nil</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><h3 id="打印返回数据"><a href="#打印返回数据" class="headerlink" title="打印返回数据"></a>打印返回数据</h3><pre class=" language-go"><code class="language-go">err <span class="token operator">=</span> r<span class="token punctuation">.</span><span class="token function">Visit</span><span class="token punctuation">(</span><span class="token keyword">func</span><span class="token punctuation">(</span>info <span class="token operator">*</span>resource<span class="token punctuation">.</span>Info<span class="token punctuation">,</span> err <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> o<span class="token punctuation">.</span>DryRunStrategy <span class="token operator">!=</span> cmdutil<span class="token punctuation">.</span>DryRunClient <span class="token punctuation">{</span>            obj<span class="token punctuation">,</span> err <span class="token operator">:=</span> resource<span class="token punctuation">.</span>                <span class="token function">NewHelper</span><span class="token punctuation">(</span>info<span class="token punctuation">.</span>Client<span class="token punctuation">,</span> info<span class="token punctuation">.</span>Mapping<span class="token punctuation">)</span><span class="token punctuation">.</span>                <span class="token function">DryRun</span><span class="token punctuation">(</span>o<span class="token punctuation">.</span>DryRunStrategy <span class="token operator">==</span> cmdutil<span class="token punctuation">.</span>DryRunServer<span class="token punctuation">)</span><span class="token punctuation">.</span>                <span class="token function">Create</span><span class="token punctuation">(</span>info<span class="token punctuation">.</span>Namespace<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">,</span> info<span class="token punctuation">.</span>Object<span class="token punctuation">)</span>            info<span class="token punctuation">.</span><span class="token function">Refresh</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span><span class="token operator">...</span>        <span class="token comment" spellcheck="true">// 打印数据 </span>        <span class="token keyword">return</span> o<span class="token punctuation">.</span><span class="token function">PrintObj</span><span class="token punctuation">(</span>info<span class="token punctuation">.</span>Object<span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><p>到此 Kubectl 的流程分析完毕。</p><h2 id="重要数据结构及函数"><a href="#重要数据结构及函数" class="headerlink" title="重要数据结构及函数"></a>重要数据结构及函数</h2><h3 id="Client"><a href="#Client" class="headerlink" title="Client"></a>Client</h3><p>在 Kubernetes 上，通常需要 Client 来访问 Kubernetes 中的对象，目前最常用的是RESTClient, DynamicClient和ClientSet 这三种Client。</p><h4 id="RESTClient"><a href="#RESTClient" class="headerlink" title="RESTClient"></a>RESTClient</h4><p>RESTClient 是 Kubernetes最基础的 Client，直接负责与 Request(RESTClient中的概念)打交道。下面的 Demo 就描述如何生成一个RESTClient，并用该RESTClient获取某具体 Pod 的详细信息。</p><pre class=" language-go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token punctuation">(</span>    <span class="token string">"flag"</span>    <span class="token string">"fmt"</span>    <span class="token string">"k8s.io/client-go/pkg/runtime"</span>    <span class="token string">"k8s.io/client-go/pkg/runtime/serializer"</span>    <span class="token string">"k8s.io/client-go/pkg/api"</span>    v1 <span class="token string">"k8s.io/client-go/pkg/api/v1"</span>    <span class="token string">"k8s.io/client-go/pkg/api/unversioned"</span>    <span class="token string">"k8s.io/client-go/rest"</span>    <span class="token string">"k8s.io/client-go/tools/clientcmd"</span><span class="token punctuation">)</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    kubeconfig <span class="token operator">:=</span> flag<span class="token punctuation">.</span><span class="token function">String</span><span class="token punctuation">(</span><span class="token string">"kubeconfig"</span><span class="token punctuation">,</span> <span class="token string">"/root/.kube/config"</span><span class="token punctuation">,</span> <span class="token string">"Path to a kube config. Only required if out-of-cluster."</span><span class="token punctuation">)</span>    flag<span class="token punctuation">.</span><span class="token function">Parse</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    config<span class="token punctuation">,</span> err <span class="token operator">:=</span> clientcmd<span class="token punctuation">.</span><span class="token function">BuildConfigFromFlags</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">,</span> <span class="token operator">*</span>kubeconfig<span class="token punctuation">)</span>    <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>        fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"BuildConfigFromFlags error"</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    groupversion <span class="token operator">:=</span> <span class="token operator">&amp;</span>unversioned<span class="token punctuation">.</span>GroupVersion<span class="token punctuation">{</span><span class="token string">""</span><span class="token punctuation">,</span> <span class="token string">"v1"</span><span class="token punctuation">}</span>    config<span class="token punctuation">.</span>GroupVersion <span class="token operator">=</span> groupversion    config<span class="token punctuation">.</span>APIPath <span class="token operator">=</span> <span class="token string">"/api"</span>    config<span class="token punctuation">.</span>ContentType <span class="token operator">=</span> runtime<span class="token punctuation">.</span>ContentTypeJSON    config<span class="token punctuation">.</span>NegotiatedSerializer <span class="token operator">=</span> serializer<span class="token punctuation">.</span>DirectCodecFactory<span class="token punctuation">{</span>CodecFactory<span class="token punctuation">:</span> api<span class="token punctuation">.</span>Codecs<span class="token punctuation">}</span>    restClient<span class="token punctuation">,</span> err <span class="token operator">:=</span> rest<span class="token punctuation">.</span><span class="token function">RESTClientFor</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span>    <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>        fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"RESTClientFor error"</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    pod <span class="token operator">:=</span> v1<span class="token punctuation">.</span>Pod<span class="token punctuation">{</span><span class="token punctuation">}</span>    err <span class="token operator">=</span> restClient<span class="token punctuation">.</span><span class="token function">Get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Resource</span><span class="token punctuation">(</span><span class="token string">"pods"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Namespace</span><span class="token punctuation">(</span><span class="token string">"default"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Name</span><span class="token punctuation">(</span><span class="token string">"nginx-1487191267-b4w5j"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Do</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Into</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>pod<span class="token punctuation">)</span>    <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>        fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"error"</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>pod<span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><h4 id="DynamicClient"><a href="#DynamicClient" class="headerlink" title="DynamicClient"></a>DynamicClient</h4><p>RESTClient需要自己设置请求各属性，用起来很不方便。DynamicClient是对RESTClient的封装，支持动态设置访问类型。</p><pre class=" language-go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token punctuation">(</span>    <span class="token string">"flag"</span>    <span class="token string">"fmt"</span>    <span class="token string">"reflect"</span>    <span class="token string">"encoding/json"</span>    <span class="token string">"k8s.io/client-go/pkg/api/v1"</span>    <span class="token string">"k8s.io/client-go/pkg/api/unversioned"</span>    <span class="token string">"k8s.io/client-go/dynamic"</span>    <span class="token string">"k8s.io/client-go/tools/clientcmd"</span>    <span class="token string">"k8s.io/client-go/rest"</span><span class="token punctuation">)</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    kubeconfig <span class="token operator">:=</span> flag<span class="token punctuation">.</span><span class="token function">String</span><span class="token punctuation">(</span><span class="token string">"kubeconfig"</span><span class="token punctuation">,</span> <span class="token string">"/root/.kube/config"</span><span class="token punctuation">,</span> <span class="token string">"Path to a kube config. Only required if out-of-cluster."</span><span class="token punctuation">)</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>kubeconfig<span class="token punctuation">)</span>    flag<span class="token punctuation">.</span><span class="token function">Parse</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    config<span class="token punctuation">,</span> err <span class="token operator">:=</span> clientcmd<span class="token punctuation">.</span><span class="token function">BuildConfigFromFlags</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">,</span> <span class="token operator">*</span>kubeconfig<span class="token punctuation">)</span>    <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>        fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"error1"</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 生成dynamicClient</span>    gv <span class="token operator">:=</span> <span class="token operator">&amp;</span>unversioned<span class="token punctuation">.</span>GroupVersion<span class="token punctuation">{</span><span class="token string">""</span><span class="token punctuation">,</span> <span class="token string">"v1"</span><span class="token punctuation">}</span>    resource <span class="token operator">:=</span> <span class="token operator">&amp;</span>unversioned<span class="token punctuation">.</span>APIResource<span class="token punctuation">{</span>Name<span class="token punctuation">:</span> <span class="token string">"pods"</span><span class="token punctuation">,</span> Namespaced<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">}</span>    config<span class="token punctuation">.</span>ContentConfig <span class="token operator">=</span> rest<span class="token punctuation">.</span>ContentConfig<span class="token punctuation">{</span>GroupVersion<span class="token punctuation">:</span> gv<span class="token punctuation">}</span>    config<span class="token punctuation">.</span>APIPath <span class="token operator">=</span> <span class="token string">"/api"</span>    dynamicClient<span class="token punctuation">,</span> err <span class="token operator">:=</span> dynamic<span class="token punctuation">.</span><span class="token function">NewClient</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span>    <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>        fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"dynamic NewCLient error"</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 获取所有namespace的pod列表</span>    obj<span class="token punctuation">,</span> err <span class="token operator">:=</span> dynamicClient<span class="token punctuation">.</span><span class="token function">Resource</span><span class="token punctuation">(</span>resource<span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">List</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>v1<span class="token punctuation">.</span>ListOptions<span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>        fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"dynamicClient Resource error"</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    js<span class="token punctuation">,</span> err <span class="token operator">:=</span> json<span class="token punctuation">.</span><span class="token function">Marshal</span><span class="token punctuation">(</span>reflect<span class="token punctuation">.</span><span class="token function">ValueOf</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Elem</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Interface</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>        fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"error"</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    podlist <span class="token operator">:=</span> v1<span class="token punctuation">.</span>PodList<span class="token punctuation">{</span><span class="token punctuation">}</span>    json<span class="token punctuation">.</span><span class="token function">Unmarshal</span><span class="token punctuation">(</span>js<span class="token punctuation">,</span> <span class="token operator">&amp;</span>podlist<span class="token punctuation">)</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>podlist<span class="token punctuation">)</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"------------------------"</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// 获取具体具体pod</span>    obj<span class="token punctuation">,</span> err <span class="token operator">=</span> dynamicClient<span class="token punctuation">.</span><span class="token function">Resource</span><span class="token punctuation">(</span>resource<span class="token punctuation">,</span> <span class="token string">"default"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Get</span><span class="token punctuation">(</span><span class="token string">"nginx-1487191267-b4w5j"</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>                fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"dynamicClient Resource error"</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span>        js<span class="token punctuation">,</span> err <span class="token operator">=</span> json<span class="token punctuation">.</span><span class="token function">Marshal</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span>        <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>                fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"error"</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span>        pod <span class="token operator">:=</span> v1<span class="token punctuation">.</span>Pod<span class="token punctuation">{</span><span class="token punctuation">}</span>        json<span class="token punctuation">.</span><span class="token function">Unmarshal</span><span class="token punctuation">(</span>js<span class="token punctuation">,</span> <span class="token operator">&amp;</span>pod<span class="token punctuation">)</span>        fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>pod<span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><h4 id="ClientSet"><a href="#ClientSet" class="headerlink" title="ClientSet"></a>ClientSet</h4><p>ClientSet也是对RESTClient的一种封装，与DynamicClient不同的是，ClientSet支持衍生出具体资源的Client，如PodClient等。ClientSet是Kubernetes用的最多的Client类型 。</p><pre class=" language-go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token punctuation">(</span>    <span class="token string">"flag"</span>    <span class="token string">"fmt"</span>    apiv1 <span class="token string">"k8s.io/client-go/pkg/api/v1"</span>    <span class="token string">"k8s.io/client-go/kubernetes"</span>    <span class="token string">"k8s.io/client-go/tools/clientcmd"</span><span class="token punctuation">)</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    kubeconfig <span class="token operator">:=</span> flag<span class="token punctuation">.</span><span class="token function">String</span><span class="token punctuation">(</span><span class="token string">"kubeconfig"</span><span class="token punctuation">,</span> <span class="token string">"/root/.kube/config"</span><span class="token punctuation">,</span> <span class="token string">"Path to a kube config. Only required if out-of-cluster."</span><span class="token punctuation">)</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>kubeconfig<span class="token punctuation">)</span>    flag<span class="token punctuation">.</span><span class="token function">Parse</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    config<span class="token punctuation">,</span> err <span class="token operator">:=</span> clientcmd<span class="token punctuation">.</span><span class="token function">BuildConfigFromFlags</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">,</span> <span class="token operator">*</span>kubeconfig<span class="token punctuation">)</span>    <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>        fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"error"</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 生成clientset</span>    clientset<span class="token punctuation">,</span> err <span class="token operator">:=</span> kubernetes<span class="token punctuation">.</span><span class="token function">NewForConfig</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span>    <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>        fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"error"</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 生成podCLient</span>    podClient <span class="token operator">:=</span> clientset<span class="token punctuation">.</span><span class="token function">Core</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Pods</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span>    pods<span class="token punctuation">,</span> err <span class="token operator">:=</span> podClient<span class="token punctuation">.</span><span class="token function">List</span><span class="token punctuation">(</span>apiv1<span class="token punctuation">.</span>ListOptions<span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>        fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"error"</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> pod <span class="token operator">:=</span> <span class="token keyword">range</span> pods<span class="token punctuation">.</span>Items <span class="token punctuation">{</span>        fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>pod<span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="Builder"><a href="#Builder" class="headerlink" title="Builder"></a>Builder</h3><p>代码路径：</p><p><a href="https://github.com/kubernetes/kubernetes/blob/v1.18.0/staging/src/k8s.io/cli-runtime/pkg/resource/builder.go#L49" target="_blank" rel="noopener">kubernetes/staging/src/k8s.io/cli-runtime/pkg/resource/builder.go</a></p><p>Builder 的作用是将命令行输入的参数转换为资源列表，然后通过 visitor 接口迭代资源。</p><pre class=" language-go"><code class="language-go"><span class="token keyword">type</span> Builder <span class="token keyword">struct</span> <span class="token punctuation">{</span>    categoryExpanderFn CategoryExpanderFunc    mapper <span class="token operator">*</span>mapper    clientConfigFn ClientConfigFunc    restMapperFn RESTMapperFunc    objectTyper runtime<span class="token punctuation">.</span>ObjectTyper    negotiatedSerializer runtime<span class="token punctuation">.</span>NegotiatedSerializer    local <span class="token builtin">bool</span>    errs <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">error</span>    paths  <span class="token punctuation">[</span><span class="token punctuation">]</span>Visitor    stream <span class="token builtin">bool</span>    dir    <span class="token builtin">bool</span>    labelSelector     <span class="token operator">*</span><span class="token builtin">string</span>    fieldSelector     <span class="token operator">*</span><span class="token builtin">string</span>    selectAll         <span class="token builtin">bool</span>    limitChunks       <span class="token builtin">int64</span>    requestTransforms <span class="token punctuation">[</span><span class="token punctuation">]</span>RequestTransform    resources <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span>    namespace    <span class="token builtin">string</span>    allNamespace <span class="token builtin">bool</span>    names        <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span>    resourceTuples <span class="token punctuation">[</span><span class="token punctuation">]</span>resourceTuple    defaultNamespace <span class="token builtin">bool</span>    requireNamespace <span class="token builtin">bool</span>    flatten <span class="token builtin">bool</span>    latest  <span class="token builtin">bool</span>    requireObject <span class="token builtin">bool</span>    singleResourceType <span class="token builtin">bool</span>    continueOnError    <span class="token builtin">bool</span>    singleItemImplied <span class="token builtin">bool</span>    export <span class="token builtin">bool</span>    schema ContentValidator<span class="token punctuation">}</span>## Method## path<span class="token keyword">func</span> <span class="token punctuation">(</span>b <span class="token operator">*</span>Builder<span class="token punctuation">)</span> <span class="token function">Path</span><span class="token punctuation">(</span>paths <span class="token operator">...</span><span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token operator">*</span>Builder <span class="token punctuation">{</span><span class="token punctuation">}</span>## selector<span class="token keyword">func</span> <span class="token punctuation">(</span>b <span class="token operator">*</span>Builder<span class="token punctuation">)</span> <span class="token function">SelectorParam</span><span class="token punctuation">(</span>s <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token operator">*</span>Builder <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token punctuation">(</span>b <span class="token operator">*</span>Builder<span class="token punctuation">)</span> <span class="token function">Selector</span><span class="token punctuation">(</span>selector labels<span class="token punctuation">.</span>Selector<span class="token punctuation">)</span> <span class="token operator">*</span>Builder <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token punctuation">(</span>b <span class="token operator">*</span>Builder<span class="token punctuation">)</span> <span class="token function">SelectAllParam</span><span class="token punctuation">(</span>selectAll <span class="token builtin">bool</span><span class="token punctuation">)</span> <span class="token operator">*</span>Builder<span class="token punctuation">{</span><span class="token punctuation">}</span>## namespace<span class="token keyword">func</span> <span class="token punctuation">(</span>b <span class="token operator">*</span>Builder<span class="token punctuation">)</span> <span class="token function">NamespaceParam</span><span class="token punctuation">(</span>namespace <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token operator">*</span>Builder <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token punctuation">(</span>b <span class="token operator">*</span>Builder<span class="token punctuation">)</span> <span class="token function">DefaultNamespace</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span>Builder <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token punctuation">(</span>b <span class="token operator">*</span>Builder<span class="token punctuation">)</span> <span class="token function">AllNamespaces</span><span class="token punctuation">(</span>allNamespace <span class="token builtin">bool</span><span class="token punctuation">)</span> <span class="token operator">*</span>Builder <span class="token punctuation">{</span><span class="token punctuation">}</span>## resource<span class="token keyword">func</span> <span class="token punctuation">(</span>b <span class="token operator">*</span>Builder<span class="token punctuation">)</span> <span class="token function">ResourceNames</span><span class="token punctuation">(</span>resource <span class="token builtin">string</span><span class="token punctuation">,</span> names <span class="token operator">...</span><span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token operator">*</span>Builder <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token punctuation">(</span>b <span class="token operator">*</span>Builder<span class="token punctuation">)</span> <span class="token function">ResourceTypes</span><span class="token punctuation">(</span>types <span class="token operator">...</span><span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token operator">*</span>Builder <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token punctuation">(</span>b <span class="token operator">*</span>Builder<span class="token punctuation">)</span> <span class="token function">ResourceTypeOrNameArgs</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span>Builder<span class="token punctuation">{</span><span class="token punctuation">}</span>## url<span class="token keyword">func</span> <span class="token punctuation">(</span>b <span class="token operator">*</span>Builder<span class="token punctuation">)</span> <span class="token function">URL</span><span class="token punctuation">(</span>urls <span class="token operator">...</span><span class="token operator">*</span>url<span class="token punctuation">.</span>URL<span class="token punctuation">)</span> <span class="token operator">*</span>Builder <span class="token punctuation">{</span><span class="token punctuation">}</span>## stream<span class="token keyword">func</span> <span class="token punctuation">(</span>b <span class="token operator">*</span>Builder<span class="token punctuation">)</span> <span class="token function">Stream</span><span class="token punctuation">(</span>r io<span class="token punctuation">.</span>Reader<span class="token punctuation">,</span> name <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token operator">*</span>Builder <span class="token punctuation">{</span><span class="token punctuation">}</span>## stdin<span class="token keyword">func</span> <span class="token punctuation">(</span>b <span class="token operator">*</span>Builder<span class="token punctuation">)</span> <span class="token function">Stdin</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span>Builder <span class="token punctuation">{</span><span class="token punctuation">}</span></code></pre><p>Builder是 Kubectl 命令行信息的内部载体，可以通过 Builder 生成Result对象。Builder大多方法支持链式调用：</p><pre class=" language-go"><code class="language-go">resource<span class="token punctuation">.</span><span class="token function">NewBuilder</span><span class="token punctuation">(</span>mapper<span class="token punctuation">,</span> typer<span class="token punctuation">,</span> resource<span class="token punctuation">.</span><span class="token function">ClientMapperFunc</span><span class="token punctuation">(</span>f<span class="token punctuation">.</span>UnstructuredClientForMapping<span class="token punctuation">)</span><span class="token punctuation">,</span> runtime<span class="token punctuation">.</span>UnstructuredJSONScheme<span class="token punctuation">)</span><span class="token punctuation">.</span>        <span class="token function">NamespaceParam</span><span class="token punctuation">(</span>cmdNamespace<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">DefaultNamespace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">AllNamespaces</span><span class="token punctuation">(</span>allNamespaces<span class="token punctuation">)</span><span class="token punctuation">.</span>        <span class="token function">FilenameParam</span><span class="token punctuation">(</span>enforceNamespace<span class="token punctuation">,</span> <span class="token operator">&amp;</span>options<span class="token punctuation">.</span>FilenameOptions<span class="token punctuation">)</span><span class="token punctuation">.</span>        <span class="token function">SelectorParam</span><span class="token punctuation">(</span>selector<span class="token punctuation">)</span><span class="token punctuation">.</span>        <span class="token function">ExportParam</span><span class="token punctuation">(</span>export<span class="token punctuation">)</span><span class="token punctuation">.</span>        <span class="token function">ResourceTypeOrNameArgs</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">,</span> args<span class="token operator">...</span><span class="token punctuation">)</span><span class="token punctuation">.</span>        <span class="token function">ContinueOnError</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>        <span class="token function">Latest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>        <span class="token function">Flatten</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>        <span class="token function">Do</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><h4 id="NewBuilder"><a href="#NewBuilder" class="headerlink" title="NewBuilder()"></a>NewBuilder()</h4><p>NewBuilder() 生成一个Builder，新的 Builder只设置了 mapper，及标记 requireObject 为true。</p><pre><code>func NewBuilder(mapper meta.RESTMapper, typer runtime.ObjectTyper, clientMapper ClientMapper, decoder runtime.Decoder) *Builder {    return &amp;Builder{        // 把RESTMapper, ObjectTyper, ClientMapper, Decoder封装成kubectl的Mapper        mapper:        &amp;Mapper{typer, mapper, clientMapper, decoder},        requireObject: true,    }}</code></pre><h4 id="Do"><a href="#Do" class="headerlink" title="Do()"></a>Do()</h4><p>Do() 先调用 visitorResult() 生成 Result 对象，然后设置 Result 对象中的 Visitor。</p><pre><code>// 返回一个 *Result，Result可以使Infos()或Object()来获取执行结果// 关于 visitor 层层封装，可以理解为每个 visitor 实现一定的功能，然后按一定的顺序来执行这些功能func (b *Builder) Do() *Result {    r := b.visitorResult()    if r.err != nil {        return r    }    // 层层封装visitor    if b.flatten {        r.visitor = NewFlattenListVisitor(r.visitor, b.mapper)    }    helpers := []VisitorFunc{}    if b.defaultNamespace {        helpers = append(helpers, SetNamespace(b.namespace))    }    if b.requireNamespace {        helpers = append(helpers, RequireNamespace(b.namespace))    }    helpers = append(helpers, FilterNamespace)    if b.requireObject {        helpers = append(helpers, RetrieveLazy)    }    r.visitor = NewDecoratedVisitor(r.visitor, helpers...)    if b.continueOnError {        r.visitor = ContinueOnErrorVisitor{r.visitor}    }    return r}</code></pre><h4 id="visitResult"><a href="#visitResult" class="headerlink" title="visitResult()"></a>visitResult()</h4><p>visitResult() 会根据 Builder 中字段的设置情况来生成不同的 Result。一般来说 b.paths, b.selectors, b.resourceTuples, b.names 只需设置一个即可。</p><pre class=" language-go"><code class="language-go"><span class="token comment" spellcheck="true">// 返回一个result对象</span><span class="token comment" spellcheck="true">// visitByPaths()等会生成info对象</span><span class="token keyword">func</span> <span class="token punctuation">(</span>b <span class="token operator">*</span>Builder<span class="token punctuation">)</span> <span class="token function">visitorResult</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span>Result <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token function">len</span><span class="token punctuation">(</span>b<span class="token punctuation">.</span>errs<span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">0</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token operator">&amp;</span>Result<span class="token punctuation">{</span>err<span class="token punctuation">:</span> utilerrors<span class="token punctuation">.</span><span class="token function">NewAggregate</span><span class="token punctuation">(</span>b<span class="token punctuation">.</span>errs<span class="token punctuation">)</span><span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token operator">/</span><span class="token comment" spellcheck="true">/***设置selector为labels.Everything()***/</span><span class="token operator">/</span>    <span class="token keyword">if</span> b<span class="token punctuation">.</span>selectAll <span class="token punctuation">{</span>        b<span class="token punctuation">.</span>selector <span class="token operator">=</span> labels<span class="token punctuation">.</span><span class="token function">Everything</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// visit items specified by paths</span>    <span class="token keyword">if</span> <span class="token function">len</span><span class="token punctuation">(</span>b<span class="token punctuation">.</span>paths<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> b<span class="token punctuation">.</span><span class="token function">visitByPaths</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// visit selectors</span>    <span class="token keyword">if</span> b<span class="token punctuation">.</span>selector <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> b<span class="token punctuation">.</span><span class="token function">visitBySelector</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// visit items specified by resource and name</span>    <span class="token keyword">if</span> <span class="token function">len</span><span class="token punctuation">(</span>b<span class="token punctuation">.</span>resourceTuples<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> b<span class="token punctuation">.</span><span class="token function">visitByResource</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// visit items specified by name</span>    <span class="token keyword">if</span> <span class="token function">len</span><span class="token punctuation">(</span>b<span class="token punctuation">.</span>names<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> b<span class="token punctuation">.</span><span class="token function">visitByName</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token function">len</span><span class="token punctuation">(</span>b<span class="token punctuation">.</span>resources<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token operator">&amp;</span>Result<span class="token punctuation">{</span>err<span class="token punctuation">:</span> fmt<span class="token punctuation">.</span><span class="token function">Errorf</span><span class="token punctuation">(</span><span class="token string">"resource(s) were provided, but no name, label selector, or --all flag specified"</span><span class="token punctuation">)</span><span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token operator">&amp;</span>Result<span class="token punctuation">{</span>err<span class="token punctuation">:</span> missingResourceError<span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="visitBySelector"><a href="#visitBySelector" class="headerlink" title="visitBySelector()"></a>visitBySelector()</h4><p>visitBySelector()生成一个Selector visitor，然后把该visitor封装成Result并返回。</p><pre class=" language-go"><code class="language-go"><span class="token comment" spellcheck="true">// selector visitor 的 visitFunc 会生成 Info</span><span class="token keyword">func</span> <span class="token punctuation">(</span>b <span class="token operator">*</span>Builder<span class="token punctuation">)</span> <span class="token function">visitBySelector</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span>Result <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token function">len</span><span class="token punctuation">(</span>b<span class="token punctuation">.</span>names<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token operator">&amp;</span>Result<span class="token punctuation">{</span>err<span class="token punctuation">:</span> fmt<span class="token punctuation">.</span><span class="token function">Errorf</span><span class="token punctuation">(</span><span class="token string">"name cannot be provided when a selector is specified"</span><span class="token punctuation">)</span><span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token function">len</span><span class="token punctuation">(</span>b<span class="token punctuation">.</span>resourceTuples<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token operator">&amp;</span>Result<span class="token punctuation">{</span>err<span class="token punctuation">:</span> fmt<span class="token punctuation">.</span><span class="token function">Errorf</span><span class="token punctuation">(</span><span class="token string">"selectors and the all flag cannot be used when passing resource/name arguments"</span><span class="token punctuation">)</span><span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token function">len</span><span class="token punctuation">(</span>b<span class="token punctuation">.</span>resources<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token operator">&amp;</span>Result<span class="token punctuation">{</span>err<span class="token punctuation">:</span> fmt<span class="token punctuation">.</span><span class="token function">Errorf</span><span class="token punctuation">(</span><span class="token string">"at least one resource must be specified to use a selector"</span><span class="token punctuation">)</span><span class="token punctuation">}</span>    <span class="token punctuation">}</span>    mappings<span class="token punctuation">,</span> err <span class="token operator">:=</span> b<span class="token punctuation">.</span><span class="token function">resourceMappings</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token operator">&amp;</span>Result<span class="token punctuation">{</span>err<span class="token punctuation">:</span> err<span class="token punctuation">}</span>    <span class="token punctuation">}</span>    visitors <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>Visitor<span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> mapping <span class="token operator">:=</span> <span class="token keyword">range</span> mappings <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 生成 client</span>        client<span class="token punctuation">,</span> err <span class="token operator">:=</span> b<span class="token punctuation">.</span>mapper<span class="token punctuation">.</span><span class="token function">ClientForMapping</span><span class="token punctuation">(</span>mapping<span class="token punctuation">)</span>        <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token operator">&amp;</span>Result<span class="token punctuation">{</span>err<span class="token punctuation">:</span> err<span class="token punctuation">}</span>        <span class="token punctuation">}</span>        selectorNamespace <span class="token operator">:=</span> b<span class="token punctuation">.</span>namespace        <span class="token keyword">if</span> mapping<span class="token punctuation">.</span>Scope<span class="token punctuation">.</span><span class="token function">Name</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> meta<span class="token punctuation">.</span>RESTScopeNameNamespace <span class="token punctuation">{</span>            selectorNamespace <span class="token operator">=</span> <span class="token string">""</span>        <span class="token punctuation">}</span>        visitors <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>visitors<span class="token punctuation">,</span> <span class="token function">NewSelector</span><span class="token punctuation">(</span>client<span class="token punctuation">,</span> mapping<span class="token punctuation">,</span> selectorNamespace<span class="token punctuation">,</span> b<span class="token punctuation">.</span>selector<span class="token punctuation">,</span> b<span class="token punctuation">.</span>export<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> b<span class="token punctuation">.</span>continueOnError <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token operator">&amp;</span>Result<span class="token punctuation">{</span>visitor<span class="token punctuation">:</span> <span class="token function">EagerVisitorList</span><span class="token punctuation">(</span>visitors<span class="token punctuation">)</span><span class="token punctuation">,</span> sources<span class="token punctuation">:</span> visitors<span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token operator">&amp;</span>Result<span class="token punctuation">{</span>visitor<span class="token punctuation">:</span> <span class="token function">VisitorList</span><span class="token punctuation">(</span>visitors<span class="token punctuation">)</span><span class="token punctuation">,</span> sources<span class="token punctuation">:</span> visitors<span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="visitByResource"><a href="#visitByResource" class="headerlink" title="visitByResource()"></a>visitByResource()</h4><p>visitByResource()使用 resourceTuples 生成 Info ，Info 本身也是个 visitor，所以把 Info 打包成Result 并返回。</p><pre class=" language-go"><code class="language-go"><span class="token comment" spellcheck="true">//通过 resource 生成 info</span><span class="token keyword">func</span> <span class="token punctuation">(</span>b <span class="token operator">*</span>Builder<span class="token punctuation">)</span> <span class="token function">visitByResource</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span>Result <span class="token punctuation">{</span>    isSingular <span class="token operator">:=</span> b<span class="token punctuation">.</span>singular    <span class="token keyword">if</span> <span class="token operator">!</span>isSingular <span class="token punctuation">{</span>        isSingular <span class="token operator">=</span> <span class="token function">len</span><span class="token punctuation">(</span>b<span class="token punctuation">.</span>resourceTuples<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">1</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token function">len</span><span class="token punctuation">(</span>b<span class="token punctuation">.</span>resources<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token operator">&amp;</span>Result<span class="token punctuation">{</span>singular<span class="token punctuation">:</span> isSingular<span class="token punctuation">,</span> err<span class="token punctuation">:</span> fmt<span class="token punctuation">.</span><span class="token function">Errorf</span><span class="token punctuation">(</span><span class="token string">"you may not specify individual resources and bulk resources in the same call"</span><span class="token punctuation">)</span><span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// retrieve one client for each resource</span>    mappings<span class="token punctuation">,</span> err <span class="token operator">:=</span> b<span class="token punctuation">.</span><span class="token function">resourceTupleMappings</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token operator">&amp;</span>Result<span class="token punctuation">{</span>singular<span class="token punctuation">:</span> isSingular<span class="token punctuation">,</span> err<span class="token punctuation">:</span> err<span class="token punctuation">}</span>    <span class="token punctuation">}</span>    clients <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span>RESTClient<span class="token punctuation">)</span>    <span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> mapping <span class="token operator">:=</span> <span class="token keyword">range</span> mappings <span class="token punctuation">{</span>        s <span class="token operator">:=</span> fmt<span class="token punctuation">.</span><span class="token function">Sprintf</span><span class="token punctuation">(</span><span class="token string">"%s/%s"</span><span class="token punctuation">,</span> mapping<span class="token punctuation">.</span>GroupVersionKind<span class="token punctuation">.</span><span class="token function">GroupVersion</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">String</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> mapping<span class="token punctuation">.</span>Resource<span class="token punctuation">)</span>        <span class="token keyword">if</span> <span class="token boolean">_</span><span class="token punctuation">,</span> ok <span class="token operator">:=</span> clients<span class="token punctuation">[</span>s<span class="token punctuation">]</span><span class="token punctuation">;</span> ok <span class="token punctuation">{</span>            <span class="token keyword">continue</span>        <span class="token punctuation">}</span>        client<span class="token punctuation">,</span> err <span class="token operator">:=</span> b<span class="token punctuation">.</span>mapper<span class="token punctuation">.</span><span class="token function">ClientForMapping</span><span class="token punctuation">(</span>mapping<span class="token punctuation">)</span>        <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token operator">&amp;</span>Result<span class="token punctuation">{</span>err<span class="token punctuation">:</span> err<span class="token punctuation">}</span>        <span class="token punctuation">}</span>        clients<span class="token punctuation">[</span>s<span class="token punctuation">]</span> <span class="token operator">=</span> client    <span class="token punctuation">}</span>    items <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>Visitor<span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> tuple <span class="token operator">:=</span> <span class="token keyword">range</span> b<span class="token punctuation">.</span>resourceTuples <span class="token punctuation">{</span>        mapping<span class="token punctuation">,</span> ok <span class="token operator">:=</span> mappings<span class="token punctuation">[</span>tuple<span class="token punctuation">.</span>Resource<span class="token punctuation">]</span>        <span class="token keyword">if</span> <span class="token operator">!</span>ok <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token operator">&amp;</span>Result<span class="token punctuation">{</span>singular<span class="token punctuation">:</span> isSingular<span class="token punctuation">,</span> err<span class="token punctuation">:</span> fmt<span class="token punctuation">.</span><span class="token function">Errorf</span><span class="token punctuation">(</span><span class="token string">"resource %q is not recognized: %v"</span><span class="token punctuation">,</span> tuple<span class="token punctuation">.</span>Resource<span class="token punctuation">,</span> mappings<span class="token punctuation">)</span><span class="token punctuation">}</span>        <span class="token punctuation">}</span>        s <span class="token operator">:=</span> fmt<span class="token punctuation">.</span><span class="token function">Sprintf</span><span class="token punctuation">(</span><span class="token string">"%s/%s"</span><span class="token punctuation">,</span> mapping<span class="token punctuation">.</span>GroupVersionKind<span class="token punctuation">.</span><span class="token function">GroupVersion</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">String</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> mapping<span class="token punctuation">.</span>Resource<span class="token punctuation">)</span>        client<span class="token punctuation">,</span> ok <span class="token operator">:=</span> clients<span class="token punctuation">[</span>s<span class="token punctuation">]</span>        <span class="token keyword">if</span> <span class="token operator">!</span>ok <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token operator">&amp;</span>Result<span class="token punctuation">{</span>singular<span class="token punctuation">:</span> isSingular<span class="token punctuation">,</span> err<span class="token punctuation">:</span> fmt<span class="token punctuation">.</span><span class="token function">Errorf</span><span class="token punctuation">(</span><span class="token string">"could not find a client for resource %q"</span><span class="token punctuation">,</span> tuple<span class="token punctuation">.</span>Resource<span class="token punctuation">)</span><span class="token punctuation">}</span>        <span class="token punctuation">}</span>        selectorNamespace <span class="token operator">:=</span> b<span class="token punctuation">.</span>namespace        <span class="token keyword">if</span> mapping<span class="token punctuation">.</span>Scope<span class="token punctuation">.</span><span class="token function">Name</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> meta<span class="token punctuation">.</span>RESTScopeNameNamespace <span class="token punctuation">{</span>            selectorNamespace <span class="token operator">=</span> <span class="token string">""</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token function">len</span><span class="token punctuation">(</span>b<span class="token punctuation">.</span>namespace<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token punctuation">{</span>                errMsg <span class="token operator">:=</span> <span class="token string">"namespace may not be empty when retrieving a resource by name"</span>                <span class="token keyword">if</span> b<span class="token punctuation">.</span>allNamespace <span class="token punctuation">{</span>                    errMsg <span class="token operator">=</span> <span class="token string">"a resource cannot be retrieved by name across all namespaces"</span>                <span class="token punctuation">}</span>                <span class="token keyword">return</span> <span class="token operator">&amp;</span>Result<span class="token punctuation">{</span>singular<span class="token punctuation">:</span> isSingular<span class="token punctuation">,</span> err<span class="token punctuation">:</span> fmt<span class="token punctuation">.</span><span class="token function">Errorf</span><span class="token punctuation">(</span>errMsg<span class="token punctuation">)</span><span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//生成 Info</span>        info <span class="token operator">:=</span> <span class="token function">NewInfo</span><span class="token punctuation">(</span>client<span class="token punctuation">,</span> mapping<span class="token punctuation">,</span> selectorNamespace<span class="token punctuation">,</span> tuple<span class="token punctuation">.</span>Name<span class="token punctuation">,</span> b<span class="token punctuation">.</span>export<span class="token punctuation">)</span>        items <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>items<span class="token punctuation">,</span> info<span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token keyword">var</span> visitors Visitor    <span class="token keyword">if</span> b<span class="token punctuation">.</span>continueOnError <span class="token punctuation">{</span>        visitors <span class="token operator">=</span> <span class="token function">EagerVisitorList</span><span class="token punctuation">(</span>items<span class="token punctuation">)</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        visitors <span class="token operator">=</span> <span class="token function">VisitorList</span><span class="token punctuation">(</span>items<span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token operator">&amp;</span>Result<span class="token punctuation">{</span>singular<span class="token punctuation">:</span> isSingular<span class="token punctuation">,</span> visitor<span class="token punctuation">:</span> visitors<span class="token punctuation">,</span> sources<span class="token punctuation">:</span> items<span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="visitByName"><a href="#visitByName" class="headerlink" title="visitByName()"></a>visitByName()</h4><p>visitByName()先通过b.names来生成info，然后封装成Result返回。</p><pre class=" language-go"><code class="language-go"><span class="token comment" spellcheck="true">//通过 resource name 生成 Info</span><span class="token keyword">func</span> <span class="token punctuation">(</span>b <span class="token operator">*</span>Builder<span class="token punctuation">)</span> <span class="token function">visitByName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span>Result <span class="token punctuation">{</span>    isSingular <span class="token operator">:=</span> <span class="token function">len</span><span class="token punctuation">(</span>b<span class="token punctuation">.</span>names<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">1</span>    <span class="token keyword">if</span> <span class="token function">len</span><span class="token punctuation">(</span>b<span class="token punctuation">.</span>paths<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token operator">&amp;</span>Result<span class="token punctuation">{</span>singular<span class="token punctuation">:</span> isSingular<span class="token punctuation">,</span> err<span class="token punctuation">:</span> fmt<span class="token punctuation">.</span><span class="token function">Errorf</span><span class="token punctuation">(</span><span class="token string">"when paths, URLs, or stdin is provided as input, you may not specify a resource by arguments as well"</span><span class="token punctuation">)</span><span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token function">len</span><span class="token punctuation">(</span>b<span class="token punctuation">.</span>resources<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token operator">&amp;</span>Result<span class="token punctuation">{</span>singular<span class="token punctuation">:</span> isSingular<span class="token punctuation">,</span> err<span class="token punctuation">:</span> fmt<span class="token punctuation">.</span><span class="token function">Errorf</span><span class="token punctuation">(</span><span class="token string">"you must provide a resource and a resource name together"</span><span class="token punctuation">)</span><span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token function">len</span><span class="token punctuation">(</span>b<span class="token punctuation">.</span>resources<span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">1</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token operator">&amp;</span>Result<span class="token punctuation">{</span>singular<span class="token punctuation">:</span> isSingular<span class="token punctuation">,</span> err<span class="token punctuation">:</span> fmt<span class="token punctuation">.</span><span class="token function">Errorf</span><span class="token punctuation">(</span><span class="token string">"you must specify only one resource"</span><span class="token punctuation">)</span><span class="token punctuation">}</span>    <span class="token punctuation">}</span>    mappings<span class="token punctuation">,</span> err <span class="token operator">:=</span> b<span class="token punctuation">.</span><span class="token function">resourceMappings</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token operator">&amp;</span>Result<span class="token punctuation">{</span>singular<span class="token punctuation">:</span> isSingular<span class="token punctuation">,</span> err<span class="token punctuation">:</span> err<span class="token punctuation">}</span>    <span class="token punctuation">}</span>    mapping <span class="token operator">:=</span> mappings<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>    client<span class="token punctuation">,</span> err <span class="token operator">:=</span> b<span class="token punctuation">.</span>mapper<span class="token punctuation">.</span><span class="token function">ClientForMapping</span><span class="token punctuation">(</span>mapping<span class="token punctuation">)</span>    <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token operator">&amp;</span>Result<span class="token punctuation">{</span>err<span class="token punctuation">:</span> err<span class="token punctuation">}</span>    <span class="token punctuation">}</span>    selectorNamespace <span class="token operator">:=</span> b<span class="token punctuation">.</span>namespace    <span class="token keyword">if</span> mapping<span class="token punctuation">.</span>Scope<span class="token punctuation">.</span><span class="token function">Name</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> meta<span class="token punctuation">.</span>RESTScopeNameNamespace <span class="token punctuation">{</span>        selectorNamespace <span class="token operator">=</span> <span class="token string">""</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token function">len</span><span class="token punctuation">(</span>b<span class="token punctuation">.</span>namespace<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token punctuation">{</span>            errMsg <span class="token operator">:=</span> <span class="token string">"namespace may not be empty when retrieving a resource by name"</span>            <span class="token keyword">if</span> b<span class="token punctuation">.</span>allNamespace <span class="token punctuation">{</span>                errMsg <span class="token operator">=</span> <span class="token string">"a resource cannot be retrieved by name across all namespaces"</span>            <span class="token punctuation">}</span>            <span class="token keyword">return</span> <span class="token operator">&amp;</span>Result<span class="token punctuation">{</span>singular<span class="token punctuation">:</span> isSingular<span class="token punctuation">,</span> err<span class="token punctuation">:</span> fmt<span class="token punctuation">.</span><span class="token function">Errorf</span><span class="token punctuation">(</span>errMsg<span class="token punctuation">)</span><span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    visitors <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>Visitor<span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> name <span class="token operator">:=</span> <span class="token keyword">range</span> b<span class="token punctuation">.</span>names <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 生成 Info</span>        info <span class="token operator">:=</span> <span class="token function">NewInfo</span><span class="token punctuation">(</span>client<span class="token punctuation">,</span> mapping<span class="token punctuation">,</span> selectorNamespace<span class="token punctuation">,</span> name<span class="token punctuation">,</span> b<span class="token punctuation">.</span>export<span class="token punctuation">)</span>        visitors <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>visitors<span class="token punctuation">,</span> info<span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token operator">&amp;</span>Result<span class="token punctuation">{</span>singular<span class="token punctuation">:</span> isSingular<span class="token punctuation">,</span> visitor<span class="token punctuation">:</span> <span class="token function">VisitorList</span><span class="token punctuation">(</span>visitors<span class="token punctuation">)</span><span class="token punctuation">,</span> sources<span class="token punctuation">:</span> visitors<span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="visitByPaths"><a href="#visitByPaths" class="headerlink" title="visitByPaths()"></a>visitByPaths()</h4><p>visitByPaths() 根据 b.Paths 生成 Results。因为 b.Paths 本身就是个 Visitor 数组。</p><pre class=" language-go"><code class="language-go"><span class="token comment" spellcheck="true">//Paths 中的 Visitor 会生成 Info</span><span class="token keyword">func</span> <span class="token punctuation">(</span>b <span class="token operator">*</span>Builder<span class="token punctuation">)</span> <span class="token function">visitByPaths</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span>Result <span class="token punctuation">{</span>    singular <span class="token operator">:=</span> <span class="token operator">!</span>b<span class="token punctuation">.</span>dir <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>b<span class="token punctuation">.</span>stream <span class="token operator">&amp;&amp;</span> <span class="token function">len</span><span class="token punctuation">(</span>b<span class="token punctuation">.</span>paths<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">1</span>    <span class="token keyword">if</span> <span class="token function">len</span><span class="token punctuation">(</span>b<span class="token punctuation">.</span>resources<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token operator">&amp;</span>Result<span class="token punctuation">{</span>singular<span class="token punctuation">:</span> singular<span class="token punctuation">,</span> err<span class="token punctuation">:</span> fmt<span class="token punctuation">.</span><span class="token function">Errorf</span><span class="token punctuation">(</span><span class="token string">"when paths, URLs, or stdin is provided as input, you may not specify resource arguments as well"</span><span class="token punctuation">)</span><span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token function">len</span><span class="token punctuation">(</span>b<span class="token punctuation">.</span>names<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token operator">&amp;</span>Result<span class="token punctuation">{</span>err<span class="token punctuation">:</span> fmt<span class="token punctuation">.</span><span class="token function">Errorf</span><span class="token punctuation">(</span><span class="token string">"name cannot be provided when a path is specified"</span><span class="token punctuation">)</span><span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token function">len</span><span class="token punctuation">(</span>b<span class="token punctuation">.</span>resourceTuples<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token operator">&amp;</span>Result<span class="token punctuation">{</span>err<span class="token punctuation">:</span> fmt<span class="token punctuation">.</span><span class="token function">Errorf</span><span class="token punctuation">(</span><span class="token string">"resource/name arguments cannot be provided when a path is specified"</span><span class="token punctuation">)</span><span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">var</span> visitors Visitor    <span class="token keyword">if</span> b<span class="token punctuation">.</span>continueOnError <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//此处 path 也是 Visitor</span>        <span class="token comment" spellcheck="true">//FileVisitor, StreamVisitor 会生成 Info</span>        visitors <span class="token operator">=</span> <span class="token function">EagerVisitorList</span><span class="token punctuation">(</span>b<span class="token punctuation">.</span>paths<span class="token punctuation">)</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        visitors <span class="token operator">=</span> <span class="token function">VisitorList</span><span class="token punctuation">(</span>b<span class="token punctuation">.</span>paths<span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// only items from disk can be refetched</span>    <span class="token keyword">if</span> b<span class="token punctuation">.</span>latest <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// must flatten lists prior to fetching</span>        <span class="token keyword">if</span> b<span class="token punctuation">.</span>flatten <span class="token punctuation">{</span>            visitors <span class="token operator">=</span> <span class="token function">NewFlattenListVisitor</span><span class="token punctuation">(</span>visitors<span class="token punctuation">,</span> b<span class="token punctuation">.</span>mapper<span class="token punctuation">)</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// must set namespace prior to fetching</span>        <span class="token keyword">if</span> b<span class="token punctuation">.</span>defaultNamespace <span class="token punctuation">{</span>            visitors <span class="token operator">=</span> <span class="token function">NewDecoratedVisitor</span><span class="token punctuation">(</span>visitors<span class="token punctuation">,</span> <span class="token function">SetNamespace</span><span class="token punctuation">(</span>b<span class="token punctuation">.</span>namespace<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span>        visitors <span class="token operator">=</span> <span class="token function">NewDecoratedVisitor</span><span class="token punctuation">(</span>visitors<span class="token punctuation">,</span> RetrieveLatest<span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> b<span class="token punctuation">.</span>selector <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>        visitors <span class="token operator">=</span> <span class="token function">NewFilteredVisitor</span><span class="token punctuation">(</span>visitors<span class="token punctuation">,</span> <span class="token function">FilterBySelector</span><span class="token punctuation">(</span>b<span class="token punctuation">.</span>selector<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token operator">&amp;</span>Result<span class="token punctuation">{</span>singular<span class="token punctuation">:</span> singular<span class="token punctuation">,</span> visitor<span class="token punctuation">:</span> visitors<span class="token punctuation">,</span> sources<span class="token punctuation">:</span> b<span class="token punctuation">.</span>paths<span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p><strong>接下来是Builder 的字段设置函数</strong></p><h4 id="Schema"><a href="#Schema" class="headerlink" title="Schema()"></a>Schema()</h4><p>Schema() 设置Builder的 schema 字段。schema 可以对资源名称进行规范检查。</p><pre class=" language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token punctuation">(</span>b <span class="token operator">*</span>Builder<span class="token punctuation">)</span> <span class="token function">Schema</span><span class="token punctuation">(</span>schema validation<span class="token punctuation">.</span>Schema<span class="token punctuation">)</span> <span class="token operator">*</span>Builder <span class="token punctuation">{</span>    b<span class="token punctuation">.</span>schema <span class="token operator">=</span> schema    <span class="token keyword">return</span> b<span class="token punctuation">}</span></code></pre><h4 id="FilenameParam"><a href="#FilenameParam" class="headerlink" title="FilenameParam()"></a>FilenameParam()</h4><p>FilenameParam()可以处理不同的输入方式，并设置 Paths 字段。如<code>kubectl create -f abc.yaml</code>，则filenameOptions为&amp;{[/home/abc.yaml] false}。<br>FilenameParam()目前支持标准输入，URL方式，文件方式，对应的支持函数为Stdin(), URL(), Path()。</p><pre class=" language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token punctuation">(</span>b <span class="token operator">*</span>Builder<span class="token punctuation">)</span> <span class="token function">FilenameParam</span><span class="token punctuation">(</span>enforceNamespace <span class="token builtin">bool</span><span class="token punctuation">,</span> filenameOptions <span class="token operator">*</span>FilenameOptions<span class="token punctuation">)</span> <span class="token operator">*</span>Builder <span class="token punctuation">{</span>    recursive <span class="token operator">:=</span> filenameOptions<span class="token punctuation">.</span>Recursive    paths <span class="token operator">:=</span> filenameOptions<span class="token punctuation">.</span>Filenames    <span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> s <span class="token operator">:=</span> <span class="token keyword">range</span> paths <span class="token punctuation">{</span>        <span class="token keyword">switch</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 标准输入</span>        <span class="token keyword">case</span> s <span class="token operator">==</span> <span class="token string">"-"</span><span class="token punctuation">:</span>            b<span class="token punctuation">.</span><span class="token function">Stdin</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">// URL</span>        <span class="token keyword">case</span> strings<span class="token punctuation">.</span><span class="token function">Index</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> <span class="token string">"http://"</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">||</span> strings<span class="token punctuation">.</span><span class="token function">Index</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> <span class="token string">"https://"</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>            url<span class="token punctuation">,</span> err <span class="token operator">:=</span> url<span class="token punctuation">.</span><span class="token function">Parse</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span>            <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>                b<span class="token punctuation">.</span>errs <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>b<span class="token punctuation">.</span>errs<span class="token punctuation">,</span> fmt<span class="token punctuation">.</span><span class="token function">Errorf</span><span class="token punctuation">(</span><span class="token string">"the URL passed to filename %q is not valid: %v"</span><span class="token punctuation">,</span> s<span class="token punctuation">,</span> err<span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token keyword">continue</span>            <span class="token punctuation">}</span>            b<span class="token punctuation">.</span><span class="token function">URL</span><span class="token punctuation">(</span>defaultHttpGetAttempts<span class="token punctuation">,</span> url<span class="token punctuation">)</span>        <span class="token keyword">default</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> <span class="token operator">!</span>recursive <span class="token punctuation">{</span>                b<span class="token punctuation">.</span>singular <span class="token operator">=</span> <span class="token boolean">true</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">// 文件或目录输入</span>            b<span class="token punctuation">.</span><span class="token function">Path</span><span class="token punctuation">(</span>recursive<span class="token punctuation">,</span> s<span class="token punctuation">)</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 如果enforceNamespace为true，则调用RequireNamespace()</span>    <span class="token keyword">if</span> enforceNamespace <span class="token punctuation">{</span>        b<span class="token punctuation">.</span><span class="token function">RequireNamespace</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> b<span class="token punctuation">}</span></code></pre><h4 id="Stdin"><a href="#Stdin" class="headerlink" title="Stdin()"></a>Stdin()</h4><p><code>Stdin()</code>会调用 <code>FileVIsitorForSTDIN()</code> 生成一个 Visitor，然后把该 Visitor 加入到 paths 中。</p><pre class=" language-go"><code class="language-go"><span class="token comment" spellcheck="true">// 在 Builder 的 paths 中加入 stdin Visitor</span><span class="token keyword">func</span> <span class="token punctuation">(</span>b <span class="token operator">*</span>Builder<span class="token punctuation">)</span> <span class="token function">Stdin</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span>Builder <span class="token punctuation">{</span>    b<span class="token punctuation">.</span>stream <span class="token operator">=</span> <span class="token boolean">true</span>    b<span class="token punctuation">.</span>paths <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>b<span class="token punctuation">.</span>paths<span class="token punctuation">,</span> <span class="token function">FileVisitorForSTDIN</span><span class="token punctuation">(</span>b<span class="token punctuation">.</span>mapper<span class="token punctuation">,</span> b<span class="token punctuation">.</span>schema<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> b<span class="token punctuation">}</span></code></pre><h4 id="URL"><a href="#URL" class="headerlink" title="URL()"></a>URL()</h4><p>URL() 先生成一个 url Visitor，然后把该 visitor 加入到 paths 中。</p><pre class=" language-go"><code class="language-go"><span class="token comment" spellcheck="true">// 在 Builder 的 paths 中加入 URL Visitor</span><span class="token keyword">func</span> <span class="token punctuation">(</span>b <span class="token operator">*</span>Builder<span class="token punctuation">)</span> <span class="token function">URL</span><span class="token punctuation">(</span>httpAttemptCount <span class="token builtin">int</span><span class="token punctuation">,</span> urls <span class="token operator">...</span><span class="token operator">*</span>url<span class="token punctuation">.</span>URL<span class="token punctuation">)</span> <span class="token operator">*</span>Builder <span class="token punctuation">{</span>    <span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> u <span class="token operator">:=</span> <span class="token keyword">range</span> urls <span class="token punctuation">{</span>        b<span class="token punctuation">.</span>paths <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>b<span class="token punctuation">.</span>paths<span class="token punctuation">,</span> <span class="token operator">&amp;</span>URLVisitor<span class="token punctuation">{</span>            URL<span class="token punctuation">:</span>              u<span class="token punctuation">,</span>            StreamVisitor<span class="token punctuation">:</span>    <span class="token function">NewStreamVisitor</span><span class="token punctuation">(</span><span class="token boolean">nil</span><span class="token punctuation">,</span> b<span class="token punctuation">.</span>mapper<span class="token punctuation">,</span> u<span class="token punctuation">.</span><span class="token function">String</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> b<span class="token punctuation">.</span>schema<span class="token punctuation">)</span><span class="token punctuation">,</span>            HttpAttemptCount<span class="token punctuation">:</span> httpAttemptCount<span class="token punctuation">,</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> b<span class="token punctuation">}</span></code></pre><h4 id="Stream"><a href="#Stream" class="headerlink" title="Stream()"></a>Stream()</h4><p>Stream() 先生成一个 stream Visitor，然后把该 Visitor 加入到 paths 中。</p><pre class=" language-go"><code class="language-go"><span class="token comment" spellcheck="true">// 在 Builder 的 paths 中加入 stream Visitor </span><span class="token keyword">func</span> <span class="token punctuation">(</span>b <span class="token operator">*</span>Builder<span class="token punctuation">)</span> <span class="token function">Stream</span><span class="token punctuation">(</span>r io<span class="token punctuation">.</span>Reader<span class="token punctuation">,</span> name <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token operator">*</span>Builder <span class="token punctuation">{</span>    b<span class="token punctuation">.</span>stream <span class="token operator">=</span> <span class="token boolean">true</span>    b<span class="token punctuation">.</span>paths <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>b<span class="token punctuation">.</span>paths<span class="token punctuation">,</span> <span class="token function">NewStreamVisitor</span><span class="token punctuation">(</span>r<span class="token punctuation">,</span> b<span class="token punctuation">.</span>mapper<span class="token punctuation">,</span> name<span class="token punctuation">,</span> b<span class="token punctuation">.</span>schema<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> b<span class="token punctuation">}</span></code></pre><h4 id="Path"><a href="#Path" class="headerlink" title="Path()"></a>Path()</h4><p>Path()把路径转换成 file visitor,然后加入到 paths 中。</p><pre class=" language-go"><code class="language-go"><span class="token comment" spellcheck="true">// 把path转换成file Visitor，然后加入到paths中</span><span class="token keyword">func</span> <span class="token punctuation">(</span>b <span class="token operator">*</span>Builder<span class="token punctuation">)</span> <span class="token function">Path</span><span class="token punctuation">(</span>recursive <span class="token builtin">bool</span><span class="token punctuation">,</span> paths <span class="token operator">...</span><span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token operator">*</span>Builder <span class="token punctuation">{</span>    <span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> p <span class="token operator">:=</span> <span class="token keyword">range</span> paths <span class="token punctuation">{</span>        <span class="token boolean">_</span><span class="token punctuation">,</span> err <span class="token operator">:=</span> os<span class="token punctuation">.</span><span class="token function">Stat</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span>        <span class="token keyword">if</span> os<span class="token punctuation">.</span><span class="token function">IsNotExist</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">{</span>            b<span class="token punctuation">.</span>errs <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>b<span class="token punctuation">.</span>errs<span class="token punctuation">,</span> fmt<span class="token punctuation">.</span><span class="token function">Errorf</span><span class="token punctuation">(</span><span class="token string">"the path %q does not exist"</span><span class="token punctuation">,</span> p<span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token keyword">continue</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>            b<span class="token punctuation">.</span>errs <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>b<span class="token punctuation">.</span>errs<span class="token punctuation">,</span> fmt<span class="token punctuation">.</span><span class="token function">Errorf</span><span class="token punctuation">(</span><span class="token string">"the path %q cannot be accessed: %v"</span><span class="token punctuation">,</span> p<span class="token punctuation">,</span> err<span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token keyword">continue</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 把paths转换成file Visitors</span>        visitors<span class="token punctuation">,</span> err <span class="token operator">:=</span> <span class="token function">ExpandPathsToFileVisitors</span><span class="token punctuation">(</span>b<span class="token punctuation">.</span>mapper<span class="token punctuation">,</span> p<span class="token punctuation">,</span> recursive<span class="token punctuation">,</span> FileExtensions<span class="token punctuation">,</span> b<span class="token punctuation">.</span>schema<span class="token punctuation">)</span>        <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>            b<span class="token punctuation">.</span>errs <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>b<span class="token punctuation">.</span>errs<span class="token punctuation">,</span> fmt<span class="token punctuation">.</span><span class="token function">Errorf</span><span class="token punctuation">(</span><span class="token string">"error reading %q: %v"</span><span class="token punctuation">,</span> p<span class="token punctuation">,</span> err<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token function">len</span><span class="token punctuation">(</span>visitors<span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">1</span> <span class="token punctuation">{</span>            b<span class="token punctuation">.</span>dir <span class="token operator">=</span> <span class="token boolean">true</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 加入到paths中</span>        b<span class="token punctuation">.</span>paths <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>b<span class="token punctuation">.</span>paths<span class="token punctuation">,</span> visitors<span class="token operator">...</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> b<span class="token punctuation">}</span></code></pre><h4 id="ResourceTypes"><a href="#ResourceTypes" class="headerlink" title="ResourceTypes()"></a>ResourceTypes()</h4><p>ResourceTypes()设置Builder的resources字段，如kubectl get pods abc，则resources为pods</p><pre class=" language-go"><code class="language-go"><span class="token comment" spellcheck="true">// 设置resources/</span><span class="token comment" spellcheck="true">// builder resources中存储的是需要处理的类型</span><span class="token keyword">func</span> <span class="token punctuation">(</span>b <span class="token operator">*</span>Builder<span class="token punctuation">)</span> <span class="token function">ResourceTypes</span><span class="token punctuation">(</span>types <span class="token operator">...</span><span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token operator">*</span>Builder <span class="token punctuation">{</span>    b<span class="token punctuation">.</span>resources <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>b<span class="token punctuation">.</span>resources<span class="token punctuation">,</span> types<span class="token operator">...</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> b<span class="token punctuation">}</span></code></pre><h4 id="ResourceNames"><a href="#ResourceNames" class="headerlink" title="ResourceNames()"></a>ResourceNames()</h4><p>ResourceNames()设置resourceTuples字段，表示需要访问的对象。如果kubectl logs nginx，那么ResourceNames()会把”nginx”和Builder中的resource(logs命令中设置为pods)，组成(pods, nginx)加入到resourceTuples中。</p><pre class=" language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token punctuation">(</span>b <span class="token operator">*</span>Builder<span class="token punctuation">)</span> <span class="token function">ResourceNames</span><span class="token punctuation">(</span>resource <span class="token builtin">string</span><span class="token punctuation">,</span> names <span class="token operator">...</span><span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token operator">*</span>Builder <span class="token punctuation">{</span>    <span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> name <span class="token operator">:=</span> <span class="token keyword">range</span> names <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// See if this input string is of type/name format</span>        tuple<span class="token punctuation">,</span> ok<span class="token punctuation">,</span> err <span class="token operator">:=</span> <span class="token function">splitResourceTypeName</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span>        <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>            b<span class="token punctuation">.</span>errs <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>b<span class="token punctuation">.</span>errs<span class="token punctuation">,</span> err<span class="token punctuation">)</span>            <span class="token keyword">return</span> b        <span class="token punctuation">}</span>        <span class="token keyword">if</span> ok <span class="token punctuation">{</span>            b<span class="token punctuation">.</span>resourceTuples <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>b<span class="token punctuation">.</span>resourceTuples<span class="token punctuation">,</span> tuple<span class="token punctuation">)</span>            <span class="token keyword">continue</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token function">len</span><span class="token punctuation">(</span>resource<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token punctuation">{</span>            b<span class="token punctuation">.</span>errs <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>b<span class="token punctuation">.</span>errs<span class="token punctuation">,</span> fmt<span class="token punctuation">.</span><span class="token function">Errorf</span><span class="token punctuation">(</span><span class="token string">"the argument %q must be RESOURCE/NAME"</span><span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token keyword">continue</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// Use the given default type to create a resource tuple</span>        b<span class="token punctuation">.</span>resourceTuples <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>b<span class="token punctuation">.</span>resourceTuples<span class="token punctuation">,</span> resourceTuple<span class="token punctuation">{</span>Resource<span class="token punctuation">:</span> resource<span class="token punctuation">,</span> Name<span class="token punctuation">:</span> name<span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> b<span class="token punctuation">}</span></code></pre><h4 id="SelectorParam"><a href="#SelectorParam" class="headerlink" title="SelectorParam()"></a>SelectorParam()</h4><p>SelectorParam()的参数为string,设置Builder的selector字段。</p><pre class=" language-go"><code class="language-go"><span class="token comment" spellcheck="true">// 设置selector</span><span class="token keyword">func</span> <span class="token punctuation">(</span>b <span class="token operator">*</span>Builder<span class="token punctuation">)</span> <span class="token function">SelectorParam</span><span class="token punctuation">(</span>s <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token operator">*</span>Builder <span class="token punctuation">{</span>    selector<span class="token punctuation">,</span> err <span class="token operator">:=</span> labels<span class="token punctuation">.</span><span class="token function">Parse</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span>    <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>        b<span class="token punctuation">.</span>errs <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>b<span class="token punctuation">.</span>errs<span class="token punctuation">,</span> fmt<span class="token punctuation">.</span><span class="token function">Errorf</span><span class="token punctuation">(</span><span class="token string">"the provided selector %q is not valid: %v"</span><span class="token punctuation">,</span> s<span class="token punctuation">,</span> err<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> b    <span class="token punctuation">}</span>    <span class="token keyword">if</span> selector<span class="token punctuation">.</span><span class="token function">Empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> b    <span class="token punctuation">}</span>    <span class="token keyword">if</span> b<span class="token punctuation">.</span>selectAll <span class="token punctuation">{</span>        b<span class="token punctuation">.</span>errs <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>b<span class="token punctuation">.</span>errs<span class="token punctuation">,</span> fmt<span class="token punctuation">.</span><span class="token function">Errorf</span><span class="token punctuation">(</span><span class="token string">"found non empty selector %q with previously set 'all' parameter. "</span><span class="token punctuation">,</span> s<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> b    <span class="token punctuation">}</span>    <span class="token keyword">return</span> b<span class="token punctuation">.</span><span class="token function">Selector</span><span class="token punctuation">(</span>selector<span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><h4 id="Selector"><a href="#Selector" class="headerlink" title="Selector()"></a>Selector()</h4><p>Selector()的参数为selector，直接设置Builder的selector字段。</p><pre class=" language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token punctuation">(</span>b <span class="token operator">*</span>Builder<span class="token punctuation">)</span> <span class="token function">Selector</span><span class="token punctuation">(</span>selector labels<span class="token punctuation">.</span>Selector<span class="token punctuation">)</span> <span class="token operator">*</span>Builder <span class="token punctuation">{</span>    b<span class="token punctuation">.</span>selector <span class="token operator">=</span> selector    <span class="token keyword">return</span> b<span class="token punctuation">}</span></code></pre><h4 id="ExportParam"><a href="#ExportParam" class="headerlink" title="ExportParam()"></a>ExportParam()</h4><p>资源是否可导出</p><pre class=" language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token punctuation">(</span>b <span class="token operator">*</span>Builder<span class="token punctuation">)</span> <span class="token function">ExportParam</span><span class="token punctuation">(</span>export <span class="token builtin">bool</span><span class="token punctuation">)</span> <span class="token operator">*</span>Builder <span class="token punctuation">{</span>    b<span class="token punctuation">.</span>export <span class="token operator">=</span> export    <span class="token keyword">return</span> b<span class="token punctuation">}</span></code></pre><h4 id="NamespaceParam"><a href="#NamespaceParam" class="headerlink" title="NamespaceParam()"></a>NamespaceParam()</h4><p>NamespaceParam()可以设置Builder的namespace字段。</p><pre class=" language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token punctuation">(</span>b <span class="token operator">*</span>Builder<span class="token punctuation">)</span> <span class="token function">NamespaceParam</span><span class="token punctuation">(</span>namespace <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token operator">*</span>Builder <span class="token punctuation">{</span>    b<span class="token punctuation">.</span>namespace <span class="token operator">=</span> namespace    <span class="token keyword">return</span> b<span class="token punctuation">}</span></code></pre><h4 id="DefaultNamespace"><a href="#DefaultNamespace" class="headerlink" title="DefaultNamespace()"></a>DefaultNamespace()</h4><p>DefaultNamespace()可以设置Builder的defaultNamespace字段，表示如果namespace未指定，是否使用default namespace。</p><pre class=" language-go"><code class="language-go"><span class="token comment" spellcheck="true">// 设置DefaultNamespace</span><span class="token keyword">func</span> <span class="token punctuation">(</span>b <span class="token operator">*</span>Builder<span class="token punctuation">)</span> <span class="token function">DefaultNamespace</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span>Builder <span class="token punctuation">{</span>    b<span class="token punctuation">.</span>defaultNamespace <span class="token operator">=</span> <span class="token boolean">true</span>    <span class="token keyword">return</span> b<span class="token punctuation">}</span></code></pre><h4 id="AllNamespaces"><a href="#AllNamespaces" class="headerlink" title="AllNamespaces()"></a>AllNamespaces()</h4><p>AllNamespaces()可以设置Builder的allNamespace和namespace字段，表示访问NamespaceAll。</p><pre class=" language-go"><code class="language-go"><span class="token comment" spellcheck="true">// 把namespace设置为NamespaceAll</span><span class="token keyword">func</span> <span class="token punctuation">(</span>b <span class="token operator">*</span>Builder<span class="token punctuation">)</span> <span class="token function">AllNamespaces</span><span class="token punctuation">(</span>allNamespace <span class="token builtin">bool</span><span class="token punctuation">)</span> <span class="token operator">*</span>Builder <span class="token punctuation">{</span>    <span class="token keyword">if</span> allNamespace <span class="token punctuation">{</span>        b<span class="token punctuation">.</span>namespace <span class="token operator">=</span> api<span class="token punctuation">.</span>NamespaceAll    <span class="token punctuation">}</span>    b<span class="token punctuation">.</span>allNamespace <span class="token operator">=</span> allNamespace    <span class="token keyword">return</span> b<span class="token punctuation">}</span></code></pre><h4 id="RequireNamespace"><a href="#RequireNamespace" class="headerlink" title="RequireNamespace()"></a>RequireNamespace()</h4><p>RequireNamespace()可以设置Builder的requireNamespace字段。</p><pre><code>func (b *Builder) RequireNamespace() *Builder {    b.requireNamespace = true    return b}</code></pre><h4 id="SelectAllParam"><a href="#SelectAllParam" class="headerlink" title="SelectAllParam()"></a>SelectAllParam()</h4><p>SelectAllParam()可以设置Builder的selectAll字段。与selector字段互斥。</p><pre><code>func (b *Builder) SelectAllParam(selectAll bool) *Builder {    if selectAll &amp;&amp; b.selector != nil {        b.errs = append(b.errs, fmt.Errorf("setting 'all' parameter but found a non empty selector. "))        return b    }    b.selectAll = selectAll    return b}</code></pre><h4 id="ResourceTypeOrNameArgs"><a href="#ResourceTypeOrNameArgs" class="headerlink" title="ResourceTypeOrNameArgs()"></a>ResourceTypeOrNameArgs()</h4><p>ResourceTypeOrNameArgs()可以设置Builder的names和resource字段。如执行<code>kubectl get pods/nginx-1487191267-b4w5j rc/abc</code>，则args为<code>[pods/nginx-1487191267-b4w5j rc/abc]</code>。</p><pre class=" language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token punctuation">(</span>b <span class="token operator">*</span>Builder<span class="token punctuation">)</span> <span class="token function">ResourceTypeOrNameArgs</span><span class="token punctuation">(</span>allowEmptySelector <span class="token builtin">bool</span><span class="token punctuation">,</span> args <span class="token operator">...</span><span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token operator">*</span>Builder <span class="token punctuation">{</span>    args <span class="token operator">=</span> <span class="token function">normalizeMultipleResourcesArgs</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span>    <span class="token keyword">if</span> ok<span class="token punctuation">,</span> err <span class="token operator">:=</span> <span class="token function">hasCombinedTypeArgs</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span><span class="token punctuation">;</span> ok <span class="token punctuation">{</span>        <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>            b<span class="token punctuation">.</span>errs <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>b<span class="token punctuation">.</span>errs<span class="token punctuation">,</span> err<span class="token punctuation">)</span>            <span class="token keyword">return</span> b        <span class="token punctuation">}</span>        <span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> s <span class="token operator">:=</span> <span class="token keyword">range</span> args <span class="token punctuation">{</span>            tuple<span class="token punctuation">,</span> ok<span class="token punctuation">,</span> err <span class="token operator">:=</span> <span class="token function">splitResourceTypeName</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span>            <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>                b<span class="token punctuation">.</span>errs <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>b<span class="token punctuation">.</span>errs<span class="token punctuation">,</span> err<span class="token punctuation">)</span>                <span class="token keyword">return</span> b            <span class="token punctuation">}</span>            <span class="token keyword">if</span> ok <span class="token punctuation">{</span>                b<span class="token punctuation">.</span>resourceTuples <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>b<span class="token punctuation">.</span>resourceTuples<span class="token punctuation">,</span> tuple<span class="token punctuation">)</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> b    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token function">len</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">0</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// Try replacing aliases only in types</span>        args<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> b<span class="token punctuation">.</span><span class="token function">ReplaceAliases</span><span class="token punctuation">(</span>args<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 此处调用ResourceTypes()</span>    <span class="token keyword">switch</span> <span class="token punctuation">{</span>    <span class="token keyword">case</span> <span class="token function">len</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">2</span><span class="token punctuation">:</span>        b<span class="token punctuation">.</span>names <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>b<span class="token punctuation">.</span>names<span class="token punctuation">,</span> args<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token operator">...</span><span class="token punctuation">)</span>        b<span class="token punctuation">.</span><span class="token function">ResourceTypes</span><span class="token punctuation">(</span><span class="token function">SplitResourceArgument</span><span class="token punctuation">(</span>args<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">...</span><span class="token punctuation">)</span>    <span class="token keyword">case</span> <span class="token function">len</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">2</span><span class="token punctuation">:</span>        b<span class="token punctuation">.</span>names <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>b<span class="token punctuation">.</span>names<span class="token punctuation">,</span> args<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        b<span class="token punctuation">.</span><span class="token function">ResourceTypes</span><span class="token punctuation">(</span><span class="token function">SplitResourceArgument</span><span class="token punctuation">(</span>args<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">...</span><span class="token punctuation">)</span>    <span class="token keyword">case</span> <span class="token function">len</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">:</span>        b<span class="token punctuation">.</span><span class="token function">ResourceTypes</span><span class="token punctuation">(</span><span class="token function">SplitResourceArgument</span><span class="token punctuation">(</span>args<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">...</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> b<span class="token punctuation">.</span>selector <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token operator">&amp;&amp;</span> allowEmptySelector <span class="token punctuation">{</span>            b<span class="token punctuation">.</span>selector <span class="token operator">=</span> labels<span class="token punctuation">.</span><span class="token function">Everything</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span>    <span class="token keyword">case</span> <span class="token function">len</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>    <span class="token keyword">default</span><span class="token punctuation">:</span>        b<span class="token punctuation">.</span>errs <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>b<span class="token punctuation">.</span>errs<span class="token punctuation">,</span> fmt<span class="token punctuation">.</span><span class="token function">Errorf</span><span class="token punctuation">(</span><span class="token string">"arguments must consist of a resource or a resource and name"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> b<span class="token punctuation">}</span></code></pre><h4 id="Flatten"><a href="#Flatten" class="headerlink" title="Flatten()"></a>Flatten()</h4><p>Flatten()可以设置Builder的flatten字段。</p><pre class=" language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token punctuation">(</span>b <span class="token operator">*</span>Builder<span class="token punctuation">)</span> <span class="token function">Flatten</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span>Builder <span class="token punctuation">{</span>    b<span class="token punctuation">.</span>flatten <span class="token operator">=</span> <span class="token boolean">true</span>    <span class="token keyword">return</span> b<span class="token punctuation">}</span></code></pre><h4 id="Latest"><a href="#Latest" class="headerlink" title="Latest()"></a>Latest()</h4><p>Latest()可以设置Builder的latest字段，用来标识获取URL或Path中最新的内容。</p><pre class=" language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token punctuation">(</span>b <span class="token operator">*</span>Builder<span class="token punctuation">)</span> <span class="token function">Latest</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span>Builder <span class="token punctuation">{</span>    b<span class="token punctuation">.</span>latest <span class="token operator">=</span> <span class="token boolean">true</span>    <span class="token keyword">return</span> b<span class="token punctuation">}</span></code></pre><h4 id="RequireObject"><a href="#RequireObject" class="headerlink" title="RequireObject()"></a>RequireObject()</h4><p>RequireObject()可以设置Builder的requireObject字段。</p><pre class=" language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token punctuation">(</span>b <span class="token operator">*</span>Builder<span class="token punctuation">)</span> <span class="token function">RequireObject</span><span class="token punctuation">(</span>require <span class="token builtin">bool</span><span class="token punctuation">)</span> <span class="token operator">*</span>Builder <span class="token punctuation">{</span>    b<span class="token punctuation">.</span>requireObject <span class="token operator">=</span> require    <span class="token keyword">return</span> b<span class="token punctuation">}</span></code></pre><h4 id="ContinueOnError"><a href="#ContinueOnError" class="headerlink" title="ContinueOnError()"></a>ContinueOnError()</h4><p>ContinueOnError()可以设置Builder的continueOnError字段为true，在封装visitor时会用到该字段。</p><pre class=" language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token punctuation">(</span>b <span class="token operator">*</span>Builder<span class="token punctuation">)</span> <span class="token function">ContinueOnError</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span>Builder <span class="token punctuation">{</span>    b<span class="token punctuation">.</span>continueOnError <span class="token operator">=</span> <span class="token boolean">true</span>    <span class="token keyword">return</span> b<span class="token punctuation">}</span></code></pre><h4 id="mappingFor"><a href="#mappingFor" class="headerlink" title="mappingFor()"></a>mappingFor()</h4><p>mappingFor()使用参数resource，然后依据mapper字段，构建RESTMapping并返回。RESTMapping表示resource和GVK的对应关系。</p><pre class=" language-go"><code class="language-go"><span class="token comment" spellcheck="true">// 返回 RESTMapping</span><span class="token keyword">func</span> <span class="token punctuation">(</span>b <span class="token operator">*</span>Builder<span class="token punctuation">)</span> <span class="token function">mappingFor</span><span class="token punctuation">(</span>resourceArg <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token operator">*</span>meta<span class="token punctuation">.</span>RESTMapping<span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 把resource构造成GVR</span>    fullySpecifiedGVR<span class="token punctuation">,</span> groupResource <span class="token operator">:=</span> unversioned<span class="token punctuation">.</span><span class="token function">ParseResourceArg</span><span class="token punctuation">(</span>resourceArg<span class="token punctuation">)</span>    gvk <span class="token operator">:=</span> unversioned<span class="token punctuation">.</span>GroupVersionKind<span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token keyword">if</span> fullySpecifiedGVR <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>        gvk<span class="token punctuation">,</span> <span class="token boolean">_</span> <span class="token operator">=</span> b<span class="token punctuation">.</span>mapper<span class="token punctuation">.</span><span class="token function">KindFor</span><span class="token punctuation">(</span><span class="token operator">*</span>fullySpecifiedGVR<span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> gvk<span class="token punctuation">.</span><span class="token function">Empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">var</span> err <span class="token builtin">error</span>        gvk<span class="token punctuation">,</span> err <span class="token operator">=</span> b<span class="token punctuation">.</span>mapper<span class="token punctuation">.</span><span class="token function">KindFor</span><span class="token punctuation">(</span>groupResource<span class="token punctuation">.</span><span class="token function">WithVersion</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> err        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// RESTMapping()定义在/pkg/api/meta/restmapper.go中</span>    <span class="token keyword">return</span> b<span class="token punctuation">.</span>mapper<span class="token punctuation">.</span><span class="token function">RESTMapping</span><span class="token punctuation">(</span>gvk<span class="token punctuation">.</span><span class="token function">GroupKind</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> gvk<span class="token punctuation">.</span>Version<span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><h4 id="resourceMappings"><a href="#resourceMappings" class="headerlink" title="resourceMappings()"></a>resourceMappings()</h4><p>resourceMappings()把Builder中的resource传递给上面的mappingFor()生成RESTMapping。</p><pre class=" language-go"><code class="language-go"><span class="token comment" spellcheck="true">// 把builder中resources转换成mapping</span><span class="token keyword">func</span> <span class="token punctuation">(</span>b <span class="token operator">*</span>Builder<span class="token punctuation">)</span> <span class="token function">resourceMappings</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">*</span>meta<span class="token punctuation">.</span>RESTMapping<span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token function">len</span><span class="token punctuation">(</span>b<span class="token punctuation">.</span>resources<span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">1</span> <span class="token operator">&amp;&amp;</span> b<span class="token punctuation">.</span>singleResourceType <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> fmt<span class="token punctuation">.</span><span class="token function">Errorf</span><span class="token punctuation">(</span><span class="token string">"you may only specify a single resource type"</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    mappings <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">*</span>meta<span class="token punctuation">.</span>RESTMapping<span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> r <span class="token operator">:=</span> <span class="token keyword">range</span> b<span class="token punctuation">.</span>resources <span class="token punctuation">{</span>        mapping<span class="token punctuation">,</span> err <span class="token operator">:=</span> b<span class="token punctuation">.</span><span class="token function">mappingFor</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span>        <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> err        <span class="token punctuation">}</span>        mappings <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>mappings<span class="token punctuation">,</span> mapping<span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> mappings<span class="token punctuation">,</span> <span class="token boolean">nil</span><span class="token punctuation">}</span></code></pre><h4 id="resourceTupleMappings"><a href="#resourceTupleMappings" class="headerlink" title="resourceTupleMappings()"></a>resourceTupleMappings()</h4><p>resourceTupleMappings()把Builder中的resourceTuple转换成RESTMapping。</p><pre class=" language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token punctuation">(</span>b <span class="token operator">*</span>Builder<span class="token punctuation">)</span> <span class="token function">resourceTupleMappings</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token operator">*</span>meta<span class="token punctuation">.</span>RESTMapping<span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    mappings <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token operator">*</span>meta<span class="token punctuation">.</span>RESTMapping<span class="token punctuation">)</span>    canonical <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token keyword">struct</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> r <span class="token operator">:=</span> <span class="token keyword">range</span> b<span class="token punctuation">.</span>resourceTuples <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token boolean">_</span><span class="token punctuation">,</span> ok <span class="token operator">:=</span> mappings<span class="token punctuation">[</span>r<span class="token punctuation">.</span>Resource<span class="token punctuation">]</span><span class="token punctuation">;</span> ok <span class="token punctuation">{</span>            <span class="token keyword">continue</span>        <span class="token punctuation">}</span>        mapping<span class="token punctuation">,</span> err <span class="token operator">:=</span> b<span class="token punctuation">.</span><span class="token function">mappingFor</span><span class="token punctuation">(</span>r<span class="token punctuation">.</span>Resource<span class="token punctuation">)</span>        <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> err        <span class="token punctuation">}</span>        mappings<span class="token punctuation">[</span>mapping<span class="token punctuation">.</span>Resource<span class="token punctuation">]</span> <span class="token operator">=</span> mapping        mappings<span class="token punctuation">[</span>r<span class="token punctuation">.</span>Resource<span class="token punctuation">]</span> <span class="token operator">=</span> mapping        canonical<span class="token punctuation">[</span>mapping<span class="token punctuation">.</span>Resource<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">struct</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token function">len</span><span class="token punctuation">(</span>canonical<span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">1</span> <span class="token operator">&amp;&amp;</span> b<span class="token punctuation">.</span>singleResourceType <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> fmt<span class="token punctuation">.</span><span class="token function">Errorf</span><span class="token punctuation">(</span><span class="token string">"you may only specify a single resource type"</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> mappings<span class="token punctuation">,</span> <span class="token boolean">nil</span><span class="token punctuation">}</span></code></pre><h3 id="Visitor"><a href="#Visitor" class="headerlink" title="Visitor"></a>Visitor</h3><p>代码路径：</p><p><a href="https://github.com/kubernetes/kubernetes/blob/v1.18.0/staging/src/k8s.io/cli-runtime/pkg/resource/interfaces.go#L94" target="_blank" rel="noopener">kubernetes/staging/src/k8s.io/cli-runtime/pkg/resource/interfaces.go</a></p><p>Builder 最后调用 <code>DO()</code> 函数的作用就是构建 Visitors ,根据不同的资源构建不同的 Visitor，然后通过 <code>Visit</code> 函数访问不同的资源。</p><pre class=" language-go"><code class="language-go"><span class="token comment" spellcheck="true">// 通过访问者模式，访问资源列表</span><span class="token keyword">type</span> Visitor <span class="token keyword">interface</span> <span class="token punctuation">{</span>    <span class="token function">Visit</span><span class="token punctuation">(</span>VisitorFunc<span class="token punctuation">)</span> <span class="token builtin">error</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 访问者回调函数</span><span class="token keyword">type</span> VisitorFunc <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token operator">*</span>Info<span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token builtin">error</span></code></pre><p>可以看出，只要实现了 <code>Visit(VisitorFunc) error</code> 方法的结构体都可以称为 Visitor。</p><p>其中 VisitorFunc 的参数为 *Info 及 error，所以可以推断，VisitorFunc() 可以对 Info 及 Error 进行处理。</p><p>Visitor 最大的特性就是每个 Visitor 实现了一个特性，然后可以嵌套使用。Visitor 可以分为两类，第一类是生成Info，第二类是处理 Info。我们现在先记着 Info 是用来存储REST请求的返回结果的。</p><p>产生 Info 的 Visitor 有：FileVisitor, StreamVisitor, URLVisitor, Selector。</p><p>处理 Info 的 Visitor 有：VisitorList, EagerVisitorList, DecoratedVisitor, ContinueOnErrorVisitor, FlattenListVisitor, FlattenListVisitor 等。此处需要说明下，有些 Visitor 只处理了 Error，但我们仍把它归为处理 Info 的 Visitor。</p><p>一般来说，如果 Info 已经生成，那么 Visitor 嵌套中的 Visitor 只要 Info 处理 Visitor 即可；如果没有 Info ，则最里面的 Visitor 要在<code>fn()</code>调用之前生成 Info ，以供其他 Visitor 处理。</p><p>我们接下来详细看下对应的Visitor 。</p><p>代码路径：</p><p><a href="https://github.com/kubernetes/kubernetes/blob/v1.18.0/staging/src/k8s.io/cli-runtime/pkg/resource/visitor.go" target="_blank" rel="noopener">kubernetes/staging/src/k8s.io/cli-runtime/pkg/resource/visitor.go</a></p><h4 id="VisitorList"><a href="#VisitorList" class="headerlink" title="VisitorList"></a>VisitorList</h4><p>VisitorList 也属于 Visitor 类型。</p><pre><code>type VisitorList []Visitor// 遍历 Visitor，执行 Visit 函数func (l VisitorList) Visit(fn VisitorFunc) error {    for i := range l {        if err := l[i].Visit(fn); err != nil {            return err        }    }    return nil}</code></pre><h4 id="EagerVisitorList"><a href="#EagerVisitorList" class="headerlink" title="EagerVisitorList"></a>EagerVisitorList</h4><p>EagerVisitorList 在迭代包含的 Visitor 时，遇到错误会断续迭代，最后一起返回所有错误。</p><p>所有匿名函数中的 err 都会被收集到 EagerVisitorList 的 Visit() 方法中的 errs 中。</p><pre class=" language-go"><code class="language-go"><span class="token keyword">type</span> EagerVisitorList <span class="token punctuation">[</span><span class="token punctuation">]</span>Visitor<span class="token keyword">func</span> <span class="token punctuation">(</span>l EagerVisitorList<span class="token punctuation">)</span> <span class="token function">Visit</span><span class="token punctuation">(</span>fn VisitorFunc<span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">{</span>    errs <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token boolean">nil</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token keyword">range</span> l <span class="token punctuation">{</span>        <span class="token keyword">if</span> err <span class="token operator">:=</span> l<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">Visit</span><span class="token punctuation">(</span><span class="token keyword">func</span><span class="token punctuation">(</span>info <span class="token operator">*</span>Info<span class="token punctuation">,</span> err <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>                errs <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>errs<span class="token punctuation">,</span> err<span class="token punctuation">)</span>                <span class="token keyword">return</span> <span class="token boolean">nil</span>            <span class="token punctuation">}</span>            <span class="token keyword">if</span> err <span class="token operator">:=</span> <span class="token function">fn</span><span class="token punctuation">(</span>info<span class="token punctuation">,</span> <span class="token boolean">nil</span><span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>                errs <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>errs<span class="token punctuation">,</span> err<span class="token punctuation">)</span>            <span class="token punctuation">}</span>            <span class="token keyword">return</span> <span class="token boolean">nil</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>            errs <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>errs<span class="token punctuation">,</span> err<span class="token punctuation">)</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> utilerrors<span class="token punctuation">.</span><span class="token function">NewAggregate</span><span class="token punctuation">(</span>errs<span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><h4 id="Info"><a href="#Info" class="headerlink" title="Info"></a>Info</h4><p>其他 Visitor 最终会转换为 Info ，Info 负责向 API server 发起 http 请求，或者返回 http 请求响应的结果。</p><pre class=" language-GO"><code class="language-GO">type Info struct {    Client RESTClient    Mapping *meta.RESTMapping    Namespace string    Name      string    Source string    Object runtime.Object    ResourceVersion string    Export bool}func (i *Info) Visit(fn VisitorFunc) error {    return fn(i, nil)}// Get()调用 Helper 依据Info中的信息获取 obj，并更新到 Info 的Object字段。func (i *Info) Get() (err error) {    obj, err := NewHelper(i.Client, i.Mapping).Get(i.Namespace, i.Name, i.Export)    if err != nil {        ...            err2 := i.Client.Get().AbsPath("api", "v1", "namespaces", i.Namespace).Do(context.TODO()).Error()        ...        return err    }    // 更新i.Object和i.ResourceVersion    i.Object = obj    i.ResourceVersion, _ = metadataAccessor.ResourceVersion(obj)    return nil}// 把一个 object 更新到 Info 中func (i *Info) Refresh(obj runtime.Object, ignoreError bool) error {    name, err := i.Mapping.MetadataAccessor.Name(obj)    if err != nil {        if !ignoreError {            return err        }    } else {        i.Name = name    }    namespace, err := i.Mapping.MetadataAccessor.Namespace(obj)    if err != nil {        if !ignoreError {            return err        }    } else {        i.Namespace = namespace    }    version, err := i.Mapping.MetadataAccessor.ResourceVersion(obj)    if err != nil {        if !ignoreError {            return err        }    } else {        i.ResourceVersion = version    }    i.Object = obj    return nil}</code></pre><h4 id="InfoListVisitor"><a href="#InfoListVisitor" class="headerlink" title="InfoListVisitor"></a>InfoListVisitor</h4><p>InfoListVisitor  也属于 Visitor 类型。</p><pre class=" language-go"><code class="language-go"><span class="token keyword">type</span> InfoListVisitor <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">*</span>Info<span class="token keyword">func</span> <span class="token punctuation">(</span>infos InfoListVisitor<span class="token punctuation">)</span> <span class="token function">Visit</span><span class="token punctuation">(</span>fn VisitorFunc<span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> err <span class="token builtin">error</span>    <span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> i <span class="token operator">:=</span> <span class="token keyword">range</span> infos <span class="token punctuation">{</span>        err <span class="token operator">=</span> <span class="token function">fn</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> err<span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> err<span class="token punctuation">}</span></code></pre><h4 id="URLVisitor"><a href="#URLVisitor" class="headerlink" title="URLVisitor"></a>URLVisitor</h4><p>URLVisitor 通过 URL 发起 http 请求下载资源，然后构建为 Info。</p><pre class=" language-go"><code class="language-go"><span class="token keyword">type</span> URLVisitor <span class="token keyword">struct</span> <span class="token punctuation">{</span>    URL <span class="token operator">*</span>url<span class="token punctuation">.</span>URL    <span class="token operator">*</span>StreamVisitor    HttpAttemptCount <span class="token builtin">int</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token punctuation">(</span>v <span class="token operator">*</span>URLVisitor<span class="token punctuation">)</span> <span class="token function">Visit</span><span class="token punctuation">(</span>fn VisitorFunc<span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">{</span>    body<span class="token punctuation">,</span> err <span class="token operator">:=</span> <span class="token function">readHttpWithRetries</span><span class="token punctuation">(</span>httpgetImpl<span class="token punctuation">,</span> time<span class="token punctuation">.</span>Second<span class="token punctuation">,</span> v<span class="token punctuation">.</span>URL<span class="token punctuation">.</span><span class="token function">String</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> v<span class="token punctuation">.</span>HttpAttemptCount<span class="token punctuation">)</span>    <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> err    <span class="token punctuation">}</span>    <span class="token keyword">defer</span> body<span class="token punctuation">.</span><span class="token function">Close</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    v<span class="token punctuation">.</span>StreamVisitor<span class="token punctuation">.</span>Reader <span class="token operator">=</span> body    <span class="token keyword">return</span> v<span class="token punctuation">.</span>StreamVisitor<span class="token punctuation">.</span><span class="token function">Visit</span><span class="token punctuation">(</span>fn<span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><h4 id="DecoratedVisitor"><a href="#DecoratedVisitor" class="headerlink" title="DecoratedVisitor"></a>DecoratedVisitor</h4><p>DecoratedVisitor 在调用 Visitor 的 Visit 函数之前先调用装饰器。</p><pre class=" language-go"><code class="language-go"><span class="token keyword">type</span> DecoratedVisitor <span class="token keyword">struct</span> <span class="token punctuation">{</span>    visitor    Visitor    decorators <span class="token punctuation">[</span><span class="token punctuation">]</span>VisitorFunc<span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token punctuation">(</span>v DecoratedVisitor<span class="token punctuation">)</span> <span class="token function">Visit</span><span class="token punctuation">(</span>fn VisitorFunc<span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> v<span class="token punctuation">.</span>visitor<span class="token punctuation">.</span><span class="token function">Visit</span><span class="token punctuation">(</span><span class="token keyword">func</span><span class="token punctuation">(</span>info <span class="token operator">*</span>Info<span class="token punctuation">,</span> err <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> err        <span class="token punctuation">}</span>        <span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token keyword">range</span> v<span class="token punctuation">.</span>decorators <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 调用装饰器</span>            <span class="token keyword">if</span> err <span class="token operator">:=</span> v<span class="token punctuation">.</span>decorators<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">(</span>info<span class="token punctuation">,</span> <span class="token boolean">nil</span><span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> err            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token function">fn</span><span class="token punctuation">(</span>info<span class="token punctuation">,</span> <span class="token boolean">nil</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><h4 id="StreamVisitor"><a href="#StreamVisitor" class="headerlink" title="StreamVisitor"></a>StreamVisitor</h4><p>StreamVisitor 从 <code>io.Reader</code> 流中读取数据转换为 JSON 格式，然后通过 <code>runtime.Codec</code> 解码，进行schema检查，构建为 Info 对象。</p><pre class=" language-go"><code class="language-go"><span class="token keyword">type</span> StreamVisitor <span class="token keyword">struct</span> <span class="token punctuation">{</span>    io<span class="token punctuation">.</span>Reader    <span class="token operator">*</span>mapper    Source <span class="token builtin">string</span>    Schema ContentValidator<span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token punctuation">(</span>v <span class="token operator">*</span>StreamVisitor<span class="token punctuation">)</span> <span class="token function">Visit</span><span class="token punctuation">(</span>fn VisitorFunc<span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">{</span>    d <span class="token operator">:=</span> yaml<span class="token punctuation">.</span><span class="token function">NewYAMLOrJSONDecoder</span><span class="token punctuation">(</span>v<span class="token punctuation">.</span>Reader<span class="token punctuation">,</span> <span class="token number">4096</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> <span class="token punctuation">{</span>        ext <span class="token operator">:=</span> runtime<span class="token punctuation">.</span>RawExtension<span class="token punctuation">{</span><span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 解码</span>        <span class="token keyword">if</span> err <span class="token operator">:=</span> d<span class="token punctuation">.</span><span class="token function">Decode</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>ext<span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>            <span class="token operator">...</span>        <span class="token punctuation">}</span>            <span class="token operator">...</span>        <span class="token comment" spellcheck="true">// 构建为 Info</span>        info<span class="token punctuation">,</span> err <span class="token operator">:=</span> v<span class="token punctuation">.</span><span class="token function">infoForData</span><span class="token punctuation">(</span>ext<span class="token punctuation">.</span>Raw<span class="token punctuation">,</span> v<span class="token punctuation">.</span>Source<span class="token punctuation">)</span>        <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> fnErr <span class="token operator">:=</span> <span class="token function">fn</span><span class="token punctuation">(</span>info<span class="token punctuation">,</span> err<span class="token punctuation">)</span><span class="token punctuation">;</span> fnErr <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> fnErr            <span class="token punctuation">}</span>            <span class="token keyword">continue</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> err <span class="token operator">:=</span> <span class="token function">fn</span><span class="token punctuation">(</span>info<span class="token punctuation">,</span> <span class="token boolean">nil</span><span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> err        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="FileVisitor"><a href="#FileVisitor" class="headerlink" title="FileVisitor"></a>FileVisitor</h4><p>FileVisitor 是对 StreamVisitor 的封装。 </p><pre class=" language-go"><code class="language-go"><span class="token keyword">type</span> FileVisitor <span class="token keyword">struct</span> <span class="token punctuation">{</span>    Path <span class="token builtin">string</span>    <span class="token operator">*</span>StreamVisitor<span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token punctuation">(</span>v <span class="token operator">*</span>FileVisitor<span class="token punctuation">)</span> <span class="token function">Visit</span><span class="token punctuation">(</span>fn VisitorFunc<span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> f <span class="token operator">*</span>os<span class="token punctuation">.</span>File    <span class="token keyword">if</span> v<span class="token punctuation">.</span>Path <span class="token operator">==</span> constSTDINstr <span class="token punctuation">{</span>        f <span class="token operator">=</span> os<span class="token punctuation">.</span>Stdin    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token keyword">var</span> err <span class="token builtin">error</span>        f<span class="token punctuation">,</span> err <span class="token operator">=</span> os<span class="token punctuation">.</span><span class="token function">Open</span><span class="token punctuation">(</span>v<span class="token punctuation">.</span>Path<span class="token punctuation">)</span>        <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> err        <span class="token punctuation">}</span>        <span class="token keyword">defer</span> f<span class="token punctuation">.</span><span class="token function">Close</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    utf16bom <span class="token operator">:=</span> unicode<span class="token punctuation">.</span><span class="token function">BOMOverride</span><span class="token punctuation">(</span>unicode<span class="token punctuation">.</span>UTF8<span class="token punctuation">.</span><span class="token function">NewDecoder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    v<span class="token punctuation">.</span>StreamVisitor<span class="token punctuation">.</span>Reader <span class="token operator">=</span> transform<span class="token punctuation">.</span><span class="token function">NewReader</span><span class="token punctuation">(</span>f<span class="token punctuation">,</span> utf16bom<span class="token punctuation">)</span>    <span class="token keyword">return</span> v<span class="token punctuation">.</span>StreamVisitor<span class="token punctuation">.</span><span class="token function">Visit</span><span class="token punctuation">(</span>fn<span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><h4 id="FlattenListVisitor"><a href="#FlattenListVisitor" class="headerlink" title="FlattenListVisitor"></a>FlattenListVisitor</h4><p>FlattenListVisitor 可以对列表中的每个元素进行处理。如果有错误发生，则返回。</p><pre class=" language-go"><code class="language-go"><span class="token keyword">type</span> FlattenListVisitor <span class="token keyword">struct</span> <span class="token punctuation">{</span>    visitor Visitor    typer   runtime<span class="token punctuation">.</span>ObjectTyper    mapper  <span class="token operator">*</span>mapper<span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token punctuation">(</span>v FlattenListVisitor<span class="token punctuation">)</span> <span class="token function">Visit</span><span class="token punctuation">(</span>fn VisitorFunc<span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> v<span class="token punctuation">.</span>visitor<span class="token punctuation">.</span><span class="token function">Visit</span><span class="token punctuation">(</span><span class="token keyword">func</span><span class="token punctuation">(</span>info <span class="token operator">*</span>Info<span class="token punctuation">,</span> err <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> err        <span class="token punctuation">}</span>        <span class="token keyword">if</span> info<span class="token punctuation">.</span>Object <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token function">fn</span><span class="token punctuation">(</span>info<span class="token punctuation">,</span> <span class="token boolean">nil</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token operator">!</span>meta<span class="token punctuation">.</span><span class="token function">IsListType</span><span class="token punctuation">(</span>info<span class="token punctuation">.</span>Object<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token function">fn</span><span class="token punctuation">(</span>info<span class="token punctuation">,</span> <span class="token boolean">nil</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span>        items <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>runtime<span class="token punctuation">.</span>Object<span class="token punctuation">{</span><span class="token punctuation">}</span>        itemsToProcess <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>runtime<span class="token punctuation">.</span>Object<span class="token punctuation">{</span>info<span class="token punctuation">.</span>Object<span class="token punctuation">}</span>        <span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token function">len</span><span class="token punctuation">(</span>itemsToProcess<span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">{</span>            currObj <span class="token operator">:=</span> itemsToProcess<span class="token punctuation">[</span>i<span class="token punctuation">]</span>            <span class="token keyword">if</span> <span class="token operator">!</span>meta<span class="token punctuation">.</span><span class="token function">IsListType</span><span class="token punctuation">(</span>currObj<span class="token punctuation">)</span> <span class="token punctuation">{</span>                items <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>items<span class="token punctuation">,</span> currObj<span class="token punctuation">)</span>                <span class="token keyword">continue</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">// 提取列表</span>            currItems<span class="token punctuation">,</span> err <span class="token operator">:=</span> meta<span class="token punctuation">.</span><span class="token function">ExtractList</span><span class="token punctuation">(</span>currObj<span class="token punctuation">)</span>            <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> err            <span class="token punctuation">}</span>            <span class="token keyword">if</span> errs <span class="token operator">:=</span> runtime<span class="token punctuation">.</span><span class="token function">DecodeList</span><span class="token punctuation">(</span>currItems<span class="token punctuation">,</span> v<span class="token punctuation">.</span>mapper<span class="token punctuation">.</span>decoder<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">len</span><span class="token punctuation">(</span>errs<span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">0</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> utilerrors<span class="token punctuation">.</span><span class="token function">NewAggregate</span><span class="token punctuation">(</span>errs<span class="token punctuation">)</span>            <span class="token punctuation">}</span>            itemsToProcess <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>itemsToProcess<span class="token punctuation">,</span> currItems<span class="token operator">...</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span>        <span class="token keyword">var</span> preferredGVKs <span class="token punctuation">[</span><span class="token punctuation">]</span>schema<span class="token punctuation">.</span>GroupVersionKind        <span class="token keyword">if</span> info<span class="token punctuation">.</span>Mapping <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>info<span class="token punctuation">.</span>Mapping<span class="token punctuation">.</span>GroupVersionKind<span class="token punctuation">.</span><span class="token function">Empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            preferredGVKs <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>preferredGVKs<span class="token punctuation">,</span> info<span class="token punctuation">.</span>Mapping<span class="token punctuation">.</span>GroupVersionKind<span class="token punctuation">)</span>        <span class="token punctuation">}</span>        errs <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">error</span><span class="token punctuation">{</span><span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 对列表中每一个元素进行下一步处理</span>        <span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token keyword">range</span> items <span class="token punctuation">{</span>            item<span class="token punctuation">,</span> err <span class="token operator">:=</span> v<span class="token punctuation">.</span>mapper<span class="token punctuation">.</span><span class="token function">infoForObject</span><span class="token punctuation">(</span>items<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> v<span class="token punctuation">.</span>typer<span class="token punctuation">,</span> preferredGVKs<span class="token punctuation">)</span>            <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>                errs <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>errs<span class="token punctuation">,</span> err<span class="token punctuation">)</span>                <span class="token keyword">continue</span>            <span class="token punctuation">}</span>            <span class="token keyword">if</span> <span class="token function">len</span><span class="token punctuation">(</span>info<span class="token punctuation">.</span>ResourceVersion<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span> <span class="token punctuation">{</span>                item<span class="token punctuation">.</span>ResourceVersion <span class="token operator">=</span> info<span class="token punctuation">.</span>ResourceVersion            <span class="token punctuation">}</span>            <span class="token keyword">if</span> err <span class="token operator">:=</span> <span class="token function">fn</span><span class="token punctuation">(</span>item<span class="token punctuation">,</span> <span class="token boolean">nil</span><span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>                errs <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>errs<span class="token punctuation">,</span> err<span class="token punctuation">)</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> utilerrors<span class="token punctuation">.</span><span class="token function">NewAggregate</span><span class="token punctuation">(</span>errs<span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><h4 id="FilteredVisitor"><a href="#FilteredVisitor" class="headerlink" title="FilteredVisitor"></a>FilteredVisitor</h4><p>FilteredVisitor 可以检查 Info 是否满足某些条件。如果满足条件，则往下执行，否则返回 err。</p><pre class=" language-go"><code class="language-go"><span class="token keyword">type</span> FilteredVisitor <span class="token keyword">struct</span> <span class="token punctuation">{</span>    visitor Visitor    filters <span class="token punctuation">[</span><span class="token punctuation">]</span>FilterFunc<span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">NewFilteredVisitor</span><span class="token punctuation">(</span>v Visitor<span class="token punctuation">,</span> fn <span class="token operator">...</span>FilterFunc<span class="token punctuation">)</span> Visitor <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token function">len</span><span class="token punctuation">(</span>fn<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> v    <span class="token punctuation">}</span>    <span class="token keyword">return</span> FilteredVisitor<span class="token punctuation">{</span>v<span class="token punctuation">,</span> fn<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token punctuation">(</span>v FilteredVisitor<span class="token punctuation">)</span> <span class="token function">Visit</span><span class="token punctuation">(</span>fn VisitorFunc<span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> v<span class="token punctuation">.</span>visitor<span class="token punctuation">.</span><span class="token function">Visit</span><span class="token punctuation">(</span><span class="token keyword">func</span><span class="token punctuation">(</span>info <span class="token operator">*</span>Info<span class="token punctuation">,</span> err <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> err        <span class="token punctuation">}</span>        <span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> filter <span class="token operator">:=</span> <span class="token keyword">range</span> v<span class="token punctuation">.</span>filters <span class="token punctuation">{</span>            ok<span class="token punctuation">,</span> err <span class="token operator">:=</span> <span class="token function">filter</span><span class="token punctuation">(</span>info<span class="token punctuation">,</span> <span class="token boolean">nil</span><span class="token punctuation">)</span>            <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> err            <span class="token punctuation">}</span>            <span class="token keyword">if</span> <span class="token operator">!</span>ok <span class="token punctuation">{</span>                <span class="token keyword">return</span> <span class="token boolean">nil</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token function">fn</span><span class="token punctuation">(</span>info<span class="token punctuation">,</span> <span class="token boolean">nil</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><h4 id="ContinueOnErrorVisitor"><a href="#ContinueOnErrorVisitor" class="headerlink" title="ContinueOnErrorVisitor"></a>ContinueOnErrorVisitor</h4><p>ContinueOnErrorVisitor会收集子 Visitor 产生的错误，并返回。</p><pre class=" language-go"><code class="language-go"><span class="token keyword">type</span> ContinueOnErrorVisitor <span class="token keyword">struct</span> <span class="token punctuation">{</span>    Visitor<span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token punctuation">(</span>v ContinueOnErrorVisitor<span class="token punctuation">)</span> <span class="token function">Visit</span><span class="token punctuation">(</span>fn VisitorFunc<span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">{</span>    errs <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">error</span><span class="token punctuation">{</span><span class="token punctuation">}</span>    err <span class="token operator">:=</span> v<span class="token punctuation">.</span>Visitor<span class="token punctuation">.</span><span class="token function">Visit</span><span class="token punctuation">(</span><span class="token keyword">func</span><span class="token punctuation">(</span>info <span class="token operator">*</span>Info<span class="token punctuation">,</span> err <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>            errs <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>errs<span class="token punctuation">,</span> err<span class="token punctuation">)</span>            <span class="token keyword">return</span> <span class="token boolean">nil</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 此处传入fn的错误是nil</span>        <span class="token keyword">if</span> err <span class="token operator">:=</span> <span class="token function">fn</span><span class="token punctuation">(</span>info<span class="token punctuation">,</span> <span class="token boolean">nil</span><span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>            errs <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>errs<span class="token punctuation">,</span> err<span class="token punctuation">)</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token boolean">nil</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>        errs <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>errs<span class="token punctuation">,</span> err<span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token function">len</span><span class="token punctuation">(</span>errs<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">1</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> errs<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> utilerrors<span class="token punctuation">.</span><span class="token function">NewAggregate</span><span class="token punctuation">(</span>errs<span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><h4 id="Selector-1"><a href="#Selector-1" class="headerlink" title="Selector"></a>Selector</h4><p>代码路径：</p><p><a href="https://github.com/kubernetes/kubernetes/blob/v1.18.0/staging/src/k8s.io/cli-runtime/pkg/resource/selector.go" target="_blank" rel="noopener">kubernetes/staging/src/k8s.io/cli-runtime/pkg/resource/selector.go</a></p><p>Selector 也属于 Visitor 类型，用于 label 选择。</p><pre class=" language-go"><code class="language-go"><span class="token comment" spellcheck="true">// Selector is a Visitor for resources that match a label selector.</span><span class="token keyword">type</span> Selector <span class="token keyword">struct</span> <span class="token punctuation">{</span>    Client        RESTClient    Mapping       <span class="token operator">*</span>meta<span class="token punctuation">.</span>RESTMapping    Namespace     <span class="token builtin">string</span>    LabelSelector <span class="token builtin">string</span>    FieldSelector <span class="token builtin">string</span>    Export        <span class="token builtin">bool</span>    LimitChunks   <span class="token builtin">int64</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// Visit implements Visitor and uses request chunking by default.</span><span class="token keyword">func</span> <span class="token punctuation">(</span>r <span class="token operator">*</span>Selector<span class="token punctuation">)</span> <span class="token function">Visit</span><span class="token punctuation">(</span>fn VisitorFunc<span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> continueToken <span class="token builtin">string</span>    <span class="token keyword">for</span> <span class="token punctuation">{</span>        list<span class="token punctuation">,</span> err <span class="token operator">:=</span> <span class="token function">NewHelper</span><span class="token punctuation">(</span>r<span class="token punctuation">.</span>Client<span class="token punctuation">,</span> r<span class="token punctuation">.</span>Mapping<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">List</span><span class="token punctuation">(</span>            r<span class="token punctuation">.</span>Namespace<span class="token punctuation">,</span>            r<span class="token punctuation">.</span><span class="token function">ResourceMapping</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>GroupVersionKind<span class="token punctuation">.</span><span class="token function">GroupVersion</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">String</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            r<span class="token punctuation">.</span>Export<span class="token punctuation">,</span>            <span class="token operator">&amp;</span>metav1<span class="token punctuation">.</span>ListOptions<span class="token punctuation">{</span>                LabelSelector<span class="token punctuation">:</span> r<span class="token punctuation">.</span>LabelSelector<span class="token punctuation">,</span>                FieldSelector<span class="token punctuation">:</span> r<span class="token punctuation">.</span>FieldSelector<span class="token punctuation">,</span>                Limit<span class="token punctuation">:</span>         r<span class="token punctuation">.</span>LimitChunks<span class="token punctuation">,</span>                Continue<span class="token punctuation">:</span>      continueToken<span class="token punctuation">,</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token punctuation">)</span>        <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> errors<span class="token punctuation">.</span><span class="token function">IsResourceExpired</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> err            <span class="token punctuation">}</span>            <span class="token keyword">if</span> errors<span class="token punctuation">.</span><span class="token function">IsBadRequest</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token operator">||</span> errors<span class="token punctuation">.</span><span class="token function">IsNotFound</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> se<span class="token punctuation">,</span> ok <span class="token operator">:=</span> err<span class="token punctuation">.</span><span class="token punctuation">(</span><span class="token operator">*</span>errors<span class="token punctuation">.</span>StatusError<span class="token punctuation">)</span><span class="token punctuation">;</span> ok <span class="token punctuation">{</span>                    <span class="token comment" spellcheck="true">// modify the message without hiding this is an API error</span>                    <span class="token keyword">if</span> <span class="token function">len</span><span class="token punctuation">(</span>r<span class="token punctuation">.</span>LabelSelector<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> <span class="token function">len</span><span class="token punctuation">(</span>r<span class="token punctuation">.</span>FieldSelector<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token punctuation">{</span>                        se<span class="token punctuation">.</span>ErrStatus<span class="token punctuation">.</span>Message <span class="token operator">=</span> fmt<span class="token punctuation">.</span><span class="token function">Sprintf</span><span class="token punctuation">(</span><span class="token string">"Unable to list %q: %v"</span><span class="token punctuation">,</span> r<span class="token punctuation">.</span>Mapping<span class="token punctuation">.</span>Resource<span class="token punctuation">,</span> se<span class="token punctuation">.</span>ErrStatus<span class="token punctuation">.</span>Message<span class="token punctuation">)</span>                    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                        se<span class="token punctuation">.</span>ErrStatus<span class="token punctuation">.</span>Message <span class="token operator">=</span> fmt<span class="token punctuation">.</span><span class="token function">Sprintf</span><span class="token punctuation">(</span><span class="token string">"Unable to find %q that match label selector %q, field selector %q: %v"</span><span class="token punctuation">,</span> r<span class="token punctuation">.</span>Mapping<span class="token punctuation">.</span>Resource<span class="token punctuation">,</span> r<span class="token punctuation">.</span>LabelSelector<span class="token punctuation">,</span> r<span class="token punctuation">.</span>FieldSelector<span class="token punctuation">,</span> se<span class="token punctuation">.</span>ErrStatus<span class="token punctuation">.</span>Message<span class="token punctuation">)</span>                    <span class="token punctuation">}</span>                    <span class="token keyword">return</span> se                <span class="token punctuation">}</span>                <span class="token keyword">if</span> <span class="token function">len</span><span class="token punctuation">(</span>r<span class="token punctuation">.</span>LabelSelector<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> <span class="token function">len</span><span class="token punctuation">(</span>r<span class="token punctuation">.</span>FieldSelector<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token punctuation">{</span>                    <span class="token keyword">return</span> fmt<span class="token punctuation">.</span><span class="token function">Errorf</span><span class="token punctuation">(</span><span class="token string">"Unable to list %q: %v"</span><span class="token punctuation">,</span> r<span class="token punctuation">.</span>Mapping<span class="token punctuation">.</span>Resource<span class="token punctuation">,</span> err<span class="token punctuation">)</span>                <span class="token punctuation">}</span>                <span class="token keyword">return</span> fmt<span class="token punctuation">.</span><span class="token function">Errorf</span><span class="token punctuation">(</span><span class="token string">"Unable to find %q that match label selector %q, field selector %q: %v"</span><span class="token punctuation">,</span> r<span class="token punctuation">.</span>Mapping<span class="token punctuation">.</span>Resource<span class="token punctuation">,</span> r<span class="token punctuation">.</span>LabelSelector<span class="token punctuation">,</span> r<span class="token punctuation">.</span>FieldSelector<span class="token punctuation">,</span> err<span class="token punctuation">)</span>            <span class="token punctuation">}</span>            <span class="token keyword">return</span> err        <span class="token punctuation">}</span>        resourceVersion<span class="token punctuation">,</span> <span class="token boolean">_</span> <span class="token operator">:=</span> metadataAccessor<span class="token punctuation">.</span><span class="token function">ResourceVersion</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span>        nextContinueToken<span class="token punctuation">,</span> <span class="token boolean">_</span> <span class="token operator">:=</span> metadataAccessor<span class="token punctuation">.</span><span class="token function">Continue</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span>        info <span class="token operator">:=</span> <span class="token operator">&amp;</span>Info<span class="token punctuation">{</span>            Client<span class="token punctuation">:</span>  r<span class="token punctuation">.</span>Client<span class="token punctuation">,</span>            Mapping<span class="token punctuation">:</span> r<span class="token punctuation">.</span>Mapping<span class="token punctuation">,</span>            Namespace<span class="token punctuation">:</span>       r<span class="token punctuation">.</span>Namespace<span class="token punctuation">,</span>            ResourceVersion<span class="token punctuation">:</span> resourceVersion<span class="token punctuation">,</span>            Object<span class="token punctuation">:</span> list<span class="token punctuation">,</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> err <span class="token operator">:=</span> <span class="token function">fn</span><span class="token punctuation">(</span>info<span class="token punctuation">,</span> <span class="token boolean">nil</span><span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> err        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token function">len</span><span class="token punctuation">(</span>nextContinueToken<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token boolean">nil</span>        <span class="token punctuation">}</span>        continueToken <span class="token operator">=</span> nextContinueToken    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="Result"><a href="#Result" class="headerlink" title="Result"></a>Result</h3><p>Builder 的 <code>Do()</code> 可以返回 Result。现在让我们来看看Result的定义。</p><p>代码路径：</p><p><a href="https://github.com/kubernetes/kubernetes/blob/master/staging/src/k8s.io/cli-runtime/pkg/resource/result.go#L37" target="_blank" rel="noopener">kubernetes/staging/src/k8s.io/cli-runtime/pkg/resource/result.go </a></p><pre class=" language-go"><code class="language-go"><span class="token comment" spellcheck="true">// Result contains helper methods for dealing with the outcome of a Builder.</span><span class="token keyword">type</span> Result <span class="token keyword">struct</span> <span class="token punctuation">{</span>    err     <span class="token builtin">error</span>    visitor Visitor    sources            <span class="token punctuation">[</span><span class="token punctuation">]</span>Visitor    singleItemImplied  <span class="token builtin">bool</span>    targetsSingleItems <span class="token builtin">bool</span>    mapper       <span class="token operator">*</span>mapper    ignoreErrors <span class="token punctuation">[</span><span class="token punctuation">]</span>utilerrors<span class="token punctuation">.</span>Matcher    <span class="token comment" spellcheck="true">// populated by a call to Infos</span>    info <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">*</span>Info<span class="token punctuation">}</span></code></pre><p>可以看到，Result 也包含一个 Visitor，及一个 info 表示[]*Info，所以 Result 提供了 Infos() 方法来获取Visitor的结果 Info 数组及 Object() 方法来获取Visitor的结果Obj(可能为List)。</p><h4 id="Infos"><a href="#Infos" class="headerlink" title="Infos()"></a>Infos()</h4><p>Info() 调用层层封装的 Visitor，然后收集所有 Info 并返回。</p><pre class=" language-go"><code class="language-go"><span class="token comment" spellcheck="true">// Infos returns an array of all of the resource infos retrieved via traversal.</span><span class="token comment" spellcheck="true">// Will attempt to traverse the entire set of visitors only once, and will return</span><span class="token comment" spellcheck="true">// a cached list on subsequent calls.</span><span class="token keyword">func</span> <span class="token punctuation">(</span>r <span class="token operator">*</span>Result<span class="token punctuation">)</span> <span class="token function">Infos</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">*</span>Info<span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> r<span class="token punctuation">.</span>err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> r<span class="token punctuation">.</span>err    <span class="token punctuation">}</span>    <span class="token keyword">if</span> r<span class="token punctuation">.</span>info <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> r<span class="token punctuation">.</span>info<span class="token punctuation">,</span> <span class="token boolean">nil</span>    <span class="token punctuation">}</span>    infos <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">*</span>Info<span class="token punctuation">{</span><span class="token punctuation">}</span>    err <span class="token operator">:=</span> r<span class="token punctuation">.</span>visitor<span class="token punctuation">.</span><span class="token function">Visit</span><span class="token punctuation">(</span><span class="token keyword">func</span><span class="token punctuation">(</span>info <span class="token operator">*</span>Info<span class="token punctuation">,</span> err <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> err        <span class="token punctuation">}</span>        infos <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>infos<span class="token punctuation">,</span> info<span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token boolean">nil</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>    err <span class="token operator">=</span> utilerrors<span class="token punctuation">.</span><span class="token function">FilterOut</span><span class="token punctuation">(</span>err<span class="token punctuation">,</span> r<span class="token punctuation">.</span>ignoreErrors<span class="token operator">...</span><span class="token punctuation">)</span>    r<span class="token punctuation">.</span>info<span class="token punctuation">,</span> r<span class="token punctuation">.</span>err <span class="token operator">=</span> infos<span class="token punctuation">,</span> err    <span class="token keyword">return</span> infos<span class="token punctuation">,</span> err<span class="token punctuation">}</span></code></pre><h4 id="Object"><a href="#Object" class="headerlink" title="Object()"></a>Object()</h4><p>Object()先调用 Infos() 来获取 infos，然后从每个info中提取出Object组成ObjectList返回。</p><pre class=" language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token punctuation">(</span>r <span class="token operator">*</span>Result<span class="token punctuation">)</span> <span class="token function">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>runtime<span class="token punctuation">.</span>Object<span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    infos<span class="token punctuation">,</span> err <span class="token operator">:=</span> r<span class="token punctuation">.</span><span class="token function">Infos</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> err    <span class="token punctuation">}</span>    versions <span class="token operator">:=</span> sets<span class="token punctuation">.</span>String<span class="token punctuation">{</span><span class="token punctuation">}</span>    objects <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>runtime<span class="token punctuation">.</span>Object<span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> info <span class="token operator">:=</span> <span class="token keyword">range</span> infos <span class="token punctuation">{</span>        <span class="token keyword">if</span> info<span class="token punctuation">.</span>Object <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>            objects <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>objects<span class="token punctuation">,</span> info<span class="token punctuation">.</span>Object<span class="token punctuation">)</span>            versions<span class="token punctuation">.</span><span class="token function">Insert</span><span class="token punctuation">(</span>info<span class="token punctuation">.</span>ResourceVersion<span class="token punctuation">)</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token function">len</span><span class="token punctuation">(</span>objects<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">1</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> r<span class="token punctuation">.</span>singular <span class="token punctuation">{</span>            <span class="token keyword">return</span> objects<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token boolean">nil</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// if the item is a list already, don't create another list</span>        <span class="token keyword">if</span> meta<span class="token punctuation">.</span><span class="token function">IsListType</span><span class="token punctuation">(</span>objects<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> objects<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token boolean">nil</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    version <span class="token operator">:=</span> <span class="token string">""</span>    <span class="token keyword">if</span> <span class="token function">len</span><span class="token punctuation">(</span>versions<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">1</span> <span class="token punctuation">{</span>        version <span class="token operator">=</span> versions<span class="token punctuation">.</span><span class="token function">List</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token operator">&amp;</span>api<span class="token punctuation">.</span>List<span class="token punctuation">{</span>        ListMeta<span class="token punctuation">:</span> unversioned<span class="token punctuation">.</span>ListMeta<span class="token punctuation">{</span>            ResourceVersion<span class="token punctuation">:</span> version<span class="token punctuation">,</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        Items<span class="token punctuation">:</span> objects<span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span> err<span class="token punctuation">}</span></code></pre><h3 id="Helper"><a href="#Helper" class="headerlink" title="Helper"></a>Helper</h3><p>在 Kubernetes中，Helper 一般都提供类似驱动的功能。Kubectl 的 helper 就是用来访问Client的驱动。一般来说，某个visitFunc 函数中会调用Helper的相关成员函数来完成具体请求。</p><p>代码路径：</p><p><a href="https://github.com/kubernetes/kubernetes/blob/master/staging/src/k8s.io/cli-runtime/pkg/resource/helper.go#L35" target="_blank" rel="noopener">kubernetes/staging/src/k8s.io/cli-runtime/pkg/resource/helper.go </a></p><pre class=" language-go"><code class="language-go"><span class="token comment" spellcheck="true">// Helper provides methods for retrieving or mutating a RESTful</span><span class="token comment" spellcheck="true">// resource.</span><span class="token keyword">type</span> Helper <span class="token keyword">struct</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// The name of this resource as the server would recognize it</span>    Resource <span class="token builtin">string</span>    <span class="token comment" spellcheck="true">// A RESTClient capable of mutating this resource.</span>    RESTClient RESTClient    <span class="token comment" spellcheck="true">// An interface for reading or writing the resource version of this</span>    <span class="token comment" spellcheck="true">// type.</span>    Versioner runtime<span class="token punctuation">.</span>ResourceVersioner    <span class="token comment" spellcheck="true">// True if the resource type is scoped to namespaces</span>    NamespaceScoped <span class="token builtin">bool</span><span class="token punctuation">}</span></code></pre><p>Helper 实现了Get(), List(), Watch(), WatchSingle(), Delete(), Create(), Patch(), Replace()等方法，这些方法是对RESTClient的封装。</p><h3 id="Mapper"><a href="#Mapper" class="headerlink" title="Mapper"></a>Mapper</h3><p>这里的Mapper是指kubectl中的Mapper，是对ObjectTyper, RESTMapper, ClientMapper和Decoder的封装。</p><p>代码路径：</p><p><a href="https://github.com/kubernetes/kubernetes/blob/master/staging/src/k8s.io/cli-runtime/pkg/resource/mapper.go#L29" target="_blank" rel="noopener">kubernetes/staging/src/k8s.io/cli-runtime/pkg/resource/mapper.go </a></p><pre class=" language-go"><code class="language-go"><span class="token keyword">type</span> Mapper <span class="token keyword">struct</span> <span class="token punctuation">{</span>    runtime<span class="token punctuation">.</span>ObjectTyper    meta<span class="token punctuation">.</span>RESTMapper    <span class="token comment" spellcheck="true">// 定义在/pkg/kubectl/resource/interfaces.go中</span>    <span class="token comment" spellcheck="true">// ClientMapper可以根据config和mapping通过调用ClientForMapping()生成RESTClient</span>    ClientMapper    runtime<span class="token punctuation">.</span>Decoder<span class="token punctuation">}</span></code></pre><h4 id="Build-Mapper"><a href="#Build-Mapper" class="headerlink" title="Build Mapper"></a>Build Mapper</h4><p>从<code>/pkg/kubectl/cmd/util/factory.go的NewBuilder()</code>函数说起</p><pre class=" language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token punctuation">(</span>f <span class="token operator">*</span>factory<span class="token punctuation">)</span> <span class="token function">NewBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span>resource<span class="token punctuation">.</span>Builder <span class="token punctuation">{</span>    mapper<span class="token punctuation">,</span> typer <span class="token operator">:=</span> f<span class="token punctuation">.</span><span class="token function">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// 此处有kubectl mapper的各项参数的定义</span>    <span class="token operator">/</span>  其中Decoder为f<span class="token punctuation">.</span><span class="token function">Decoder</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> resource<span class="token punctuation">.</span><span class="token function">NewBuilder</span><span class="token punctuation">(</span>mapper<span class="token punctuation">,</span> typer<span class="token punctuation">,</span> resource<span class="token punctuation">.</span><span class="token function">ClientMapperFunc</span><span class="token punctuation">(</span>f<span class="token punctuation">.</span>ClientForMapping<span class="token punctuation">)</span><span class="token punctuation">,</span> f<span class="token punctuation">.</span><span class="token function">Decoder</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><p>再来看<code>/pkg/kubectl/ressourcce/builder.go</code>中的<code>NewBuilder()</code>:</p><pre class=" language-go"><code class="language-go"><span class="token comment" spellcheck="true">// NewBuilder creates a builder that operates on generic objects.</span><span class="token keyword">func</span> <span class="token function">NewBuilder</span><span class="token punctuation">(</span>mapper meta<span class="token punctuation">.</span>RESTMapper<span class="token punctuation">,</span> typer runtime<span class="token punctuation">.</span>ObjectTyper<span class="token punctuation">,</span> clientMapper ClientMapper<span class="token punctuation">,</span> decoder runtime<span class="token punctuation">.</span>Decoder<span class="token punctuation">)</span> <span class="token operator">*</span>Builder <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token operator">&amp;</span>Builder<span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 把RESTMapper, ObjectTyper, ClientMapper, Decoder封装成kubectl的 Mapper</span>        mapper<span class="token punctuation">:</span>        <span class="token operator">&amp;</span>Mapper<span class="token punctuation">{</span>typer<span class="token punctuation">,</span> mapper<span class="token punctuation">,</span> clientMapper<span class="token punctuation">,</span> decoder<span class="token punctuation">}</span><span class="token punctuation">,</span>        requireObject<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>可以看出，Mapper的创建在 builder.go 中，但真正准备创建Mapper的其他结构体的地方还是在 factory.go 中。</p><ul><li>runtime.ObjectTyper: 由f.Object()生成；</li><li>meta.RESTMapper: 由f.Object()生成；</li><li>ClientMapper: resource.ClientMapperFunc(f.ClientForMapping)</li><li>runtime.Decoder: f.Decoder(true)</li></ul><h4 id="f-Object"><a href="#f-Object" class="headerlink" title="f.Object()"></a>f.Object()</h4><p>Object() 返回一个RESTMapper及 api.Scheme。这里api.Scheme将传递给Typer。关于RESTMapper，现在只需知道存储了GVK和GVR的关系，可以通过RESTMapping()返回一个mapping表示GVK和Resource的关系。可以用mapping生成一个config，再生成Client。</p><pre><code>func (f *factory) Object() (meta.RESTMapper, runtime.ObjectTyper) {    // registered.RESTMapper()定义在/pkg/apimachinery/registerd/registered.go中    mapper := registered.RESTMapper()    // 生成discoveryClient    discoveryClient, err := f.DiscoveryClient()    if err == nil {        // discoveryClient生成成功的情况下，mapper为一个FistHitRESTMapper        mapper = meta.FirstHitRESTMapper{            MultiRESTMapper: meta.MultiRESTMapper{                discovery.NewDeferredDiscoveryRESTMapper(discoveryClient, registered.InterfacesFor),                registered.RESTMapper(), // hardcoded fall back            },        }    }    // wrap with shortcuts    mapper = NewShortcutExpander(mapper, discoveryClient)    // wrap with output preferences    cfg, err := f.clients.ClientConfigForVersion(nil)    checkErrWithPrefix("failed to get client config: ", err)    cmdApiVersion := unversioned.GroupVersion{}    if cfg.GroupVersion != nil {        cmdApiVersion = *cfg.GroupVersion    }    mapper = kubectl.OutputVersionMapper{RESTMapper: mapper, OutputVersions: []unversioned.GroupVersion{cmdApiVersion}}    return mapper, api.Scheme}</code></pre><h4 id="f-ClientForMapping"><a href="#f-ClientForMapping" class="headerlink" title="f.ClientForMapping()"></a>f.ClientForMapping()</h4><p>CLientForMapping()可以依据mapping中的信息生成一个config，然后再生成RESTClient。</p><pre class=" language-go"><code class="language-go"><span class="token comment" spellcheck="true">// 依据mapping生成RESTClient</span><span class="token keyword">func</span> <span class="token punctuation">(</span>f <span class="token operator">*</span>factory<span class="token punctuation">)</span> <span class="token function">ClientForMapping</span><span class="token punctuation">(</span>mapping <span class="token operator">*</span>meta<span class="token punctuation">.</span>RESTMapping<span class="token punctuation">)</span> <span class="token punctuation">(</span>resource<span class="token punctuation">.</span>RESTClient<span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    cfg<span class="token punctuation">,</span> err <span class="token operator">:=</span> f<span class="token punctuation">.</span>clientConfig<span class="token punctuation">.</span><span class="token function">ClientConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> err    <span class="token punctuation">}</span>    <span class="token keyword">if</span> err <span class="token operator">:=</span> client<span class="token punctuation">.</span><span class="token function">SetKubernetesDefaults</span><span class="token punctuation">(</span>cfg<span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> err    <span class="token punctuation">}</span>    gvk <span class="token operator">:=</span> mapping<span class="token punctuation">.</span>GroupVersionKind    <span class="token keyword">switch</span> gvk<span class="token punctuation">.</span>Group <span class="token punctuation">{</span>    <span class="token keyword">case</span> federation<span class="token punctuation">.</span>GroupName<span class="token punctuation">:</span>        mappingVersion <span class="token operator">:=</span> mapping<span class="token punctuation">.</span>GroupVersionKind<span class="token punctuation">.</span><span class="token function">GroupVersion</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> f<span class="token punctuation">.</span>clients<span class="token punctuation">.</span><span class="token function">FederationClientForVersion</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>mappingVersion<span class="token punctuation">)</span>    <span class="token keyword">case</span> api<span class="token punctuation">.</span>GroupName<span class="token punctuation">:</span>        cfg<span class="token punctuation">.</span>APIPath <span class="token operator">=</span> <span class="token string">"/api"</span>    <span class="token keyword">default</span><span class="token punctuation">:</span>        cfg<span class="token punctuation">.</span>APIPath <span class="token operator">=</span> <span class="token string">"/apis"</span>    <span class="token punctuation">}</span>    gv <span class="token operator">:=</span> gvk<span class="token punctuation">.</span><span class="token function">GroupVersion</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    cfg<span class="token punctuation">.</span>GroupVersion <span class="token operator">=</span> <span class="token operator">&amp;</span>gv    <span class="token keyword">if</span> registered<span class="token punctuation">.</span><span class="token function">IsThirdPartyAPIGroupVersion</span><span class="token punctuation">(</span>gvk<span class="token punctuation">.</span><span class="token function">GroupVersion</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        cfg<span class="token punctuation">.</span>NegotiatedSerializer <span class="token operator">=</span> thirdpartyresourcedata<span class="token punctuation">.</span><span class="token function">NewNegotiatedSerializer</span><span class="token punctuation">(</span>api<span class="token punctuation">.</span>Codecs<span class="token punctuation">,</span> gvk<span class="token punctuation">.</span>Kind<span class="token punctuation">,</span> gv<span class="token punctuation">,</span> gv<span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 定义在/pkg/client/restclient/config.go</span>    <span class="token keyword">return</span> restclient<span class="token punctuation">.</span><span class="token function">RESTClientFor</span><span class="token punctuation">(</span>cfg<span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><p>而 resource.ClientMapperFunc 定义在<code>/pkg/kubectl/resource/interfaces.go</code>中：</p><pre><code>type ClientMapperFunc func(mapping *meta.RESTMapping) (RESTClient, error)// ClientForMapping implements ClientMapperfunc (f ClientMapperFunc) ClientForMapping(mapping *meta.RESTMapping) (RESTClient, error) {    return f(mapping)}</code></pre><p>所以，调用ClientMapper的ClientForMapping()方法就相关于调用factory的ClientForMapping()方法。</p><h4 id="f-Decoder"><a href="#f-Decoder" class="headerlink" title="f.Decoder()"></a>f.Decoder()</h4><p>Decoder()定义在<code>/pkg/kubectl/cmd/util/factory.go</code>中：</p><pre class=" language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token punctuation">(</span>f <span class="token operator">*</span>factory<span class="token punctuation">)</span> <span class="token function">Decoder</span><span class="token punctuation">(</span>toInternal <span class="token builtin">bool</span><span class="token punctuation">)</span> runtime<span class="token punctuation">.</span>Decoder <span class="token punctuation">{</span>    <span class="token keyword">var</span> decoder runtime<span class="token punctuation">.</span>Decoder    <span class="token keyword">if</span> toInternal <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// api.Codecs定义在pkg/api/register.go中/</span>        decoder <span class="token operator">=</span> api<span class="token punctuation">.</span>Codecs<span class="token punctuation">.</span><span class="token function">UniversalDecoder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        decoder <span class="token operator">=</span> api<span class="token punctuation">.</span>Codecs<span class="token punctuation">.</span><span class="token function">UniversalDeserializer</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> thirdpartyresourcedata<span class="token punctuation">.</span><span class="token function">NewDecoder</span><span class="token punctuation">(</span>decoder<span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><p>因为传入的toInternal为true，所以Decoder为api.Codecs.UniversalDecoder()。这里不再向下分析，只需知道该Decoder可以把相关版本的对象转换成内部版本的对象。</p><h4 id="RESTMapping"><a href="#RESTMapping" class="headerlink" title="RESTMapping()"></a>RESTMapping()</h4><p>调用的RESTMapper的RESTMapping()</p><h4 id="ClientForMapping"><a href="#ClientForMapping" class="headerlink" title="ClientForMapping()"></a>ClientForMapping()</h4><p>调用的就是f.ClientForMapping()</p><h3 id="Printer"><a href="#Printer" class="headerlink" title="Printer"></a>Printer</h3><p>Printer可以对Kubernetes中的资源按一定格式进行打印输出，Printer主要供Kubectl get命令使用。目前Kubectl主要实现了JsonPrinter, YAMLPrinter, NamePrinter, TemplatePrinter, JSONPathPrinter, CustomColumnsPrinter, VersionedPrinter, HumanReadablePrinter。</p><p>代码路径：</p><p><a href="https://github.com/kubernetes/kubernetes/blob/v1.18.0/staging/src/k8s.io/cli-runtime/pkg/printers/interface.go#L35" target="_blank" rel="noopener">kubernetes/staging/src/k8s.io/cli-runtime/pkg/printers/interface.go </a></p><pre class=" language-go"><code class="language-go"><span class="token comment" spellcheck="true">// ResourcePrinterFunc is a function that can print objects</span><span class="token keyword">type</span> ResourcePrinterFunc <span class="token keyword">func</span><span class="token punctuation">(</span>runtime<span class="token punctuation">.</span>Object<span class="token punctuation">,</span> io<span class="token punctuation">.</span>Writer<span class="token punctuation">)</span> <span class="token builtin">error</span><span class="token comment" spellcheck="true">// PrintObj implements ResourcePrinter</span><span class="token keyword">func</span> <span class="token punctuation">(</span>fn ResourcePrinterFunc<span class="token punctuation">)</span> <span class="token function">PrintObj</span><span class="token punctuation">(</span>obj runtime<span class="token punctuation">.</span>Object<span class="token punctuation">,</span> w io<span class="token punctuation">.</span>Writer<span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token function">fn</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> w<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// ResourcePrinter is an interface that knows how to print runtime objects.</span><span class="token keyword">type</span> ResourcePrinter <span class="token keyword">interface</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// Print receives a runtime object, formats it and prints it to a writer.</span>    <span class="token function">PrintObj</span><span class="token punctuation">(</span>runtime<span class="token punctuation">.</span>Object<span class="token punctuation">,</span> io<span class="token punctuation">.</span>Writer<span class="token punctuation">)</span> <span class="token builtin">error</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// PrintOptions struct defines a struct for various print options</span><span class="token keyword">type</span> PrintOptions <span class="token keyword">struct</span> <span class="token punctuation">{</span>    NoHeaders     <span class="token builtin">bool</span>    WithNamespace <span class="token builtin">bool</span>    WithKind      <span class="token builtin">bool</span>    Wide          <span class="token builtin">bool</span>    ShowLabels    <span class="token builtin">bool</span>    Kind          schema<span class="token punctuation">.</span>GroupKind    ColumnLabels  <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span>    SortBy <span class="token builtin">string</span>    <span class="token comment" spellcheck="true">// indicates if it is OK to ignore missing keys for rendering an output template.</span>    AllowMissingKeys <span class="token builtin">bool</span><span class="token punctuation">}</span></code></pre><h4 id="JSONPrinter"><a href="#JSONPrinter" class="headerlink" title="JSONPrinter"></a>JSONPrinter</h4><p>JSONPrinter 可以以JSON的格式打印Object。JSONPrinter调用了json.MarshalIndent()来对Obj进行JSON格式化打印。json.MarshalIndent()函数的功能和Marshal一致，只是把Object格式化成人性化阅读的JSON，有点类似”| python -mjson.tool”的功能。</p><pre class=" language-go"><code class="language-go"><span class="token comment" spellcheck="true">// JSONPrinter is an implementation of ResourcePrinter which outputs an object as JSON.</span><span class="token keyword">type</span> JSONPrinter <span class="token keyword">struct</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token punctuation">(</span>p <span class="token operator">*</span>JSONPrinter<span class="token punctuation">)</span> <span class="token function">AfterPrint</span><span class="token punctuation">(</span>w io<span class="token punctuation">.</span>Writer<span class="token punctuation">,</span> res <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// PrintObj is an implementation of ResourcePrinter.PrintObj which simply writes the object to the Writer.</span><span class="token keyword">func</span> <span class="token punctuation">(</span>p <span class="token operator">*</span>JSONPrinter<span class="token punctuation">)</span> <span class="token function">PrintObj</span><span class="token punctuation">(</span>obj runtime<span class="token punctuation">.</span>Object<span class="token punctuation">,</span> w io<span class="token punctuation">.</span>Writer<span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">{</span>    <span class="token keyword">switch</span> obj <span class="token operator">:=</span> obj<span class="token punctuation">.</span><span class="token punctuation">(</span><span class="token keyword">type</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">case</span> <span class="token operator">*</span>runtime<span class="token punctuation">.</span>Unknown<span class="token punctuation">:</span>        <span class="token keyword">var</span> buf bytes<span class="token punctuation">.</span>Buffer        err <span class="token operator">:=</span> json<span class="token punctuation">.</span><span class="token function">Indent</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>buf<span class="token punctuation">,</span> obj<span class="token punctuation">.</span>Raw<span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">,</span> <span class="token string">"    "</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> err        <span class="token punctuation">}</span>        buf<span class="token punctuation">.</span><span class="token function">WriteRune</span><span class="token punctuation">(</span><span class="token string">'\n'</span><span class="token punctuation">)</span>        <span class="token boolean">_</span><span class="token punctuation">,</span> err <span class="token operator">=</span> buf<span class="token punctuation">.</span><span class="token function">WriteTo</span><span class="token punctuation">(</span>w<span class="token punctuation">)</span>        <span class="token keyword">return</span> err    <span class="token punctuation">}</span>    data<span class="token punctuation">,</span> err <span class="token operator">:=</span> json<span class="token punctuation">.</span><span class="token function">MarshalIndent</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">,</span> <span class="token string">"    "</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> err    <span class="token punctuation">}</span>    data <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span> <span class="token string">'\n'</span><span class="token punctuation">)</span>    <span class="token boolean">_</span><span class="token punctuation">,</span> err <span class="token operator">=</span> w<span class="token punctuation">.</span><span class="token function">Write</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span>    <span class="token keyword">return</span> err<span class="token punctuation">}</span><span class="token comment" spellcheck="true">// TODO: implement HandledResources()</span><span class="token keyword">func</span> <span class="token punctuation">(</span>p <span class="token operator">*</span>JSONPrinter<span class="token punctuation">)</span> <span class="token function">HandledResources</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>调用例子：</p><pre><code>kubectl get pods -o json</code></pre><h4 id="YAMLPrinter"><a href="#YAMLPrinter" class="headerlink" title="YAMLPrinter"></a>YAMLPrinter</h4><p>YAMLPrinter可以以YAML的格式打印Object。YAMLPrinter通过调用yaml.Marshal()把Object转换成YAML格式并进行打印。</p><pre class=" language-go"><code class="language-go"><span class="token comment" spellcheck="true">// YAMLPrinter is an implementation of ResourcePrinter which outputs an object as YAML.</span><span class="token comment" spellcheck="true">// The input object is assumed to be in the internal version of an API and is converted</span><span class="token comment" spellcheck="true">// to the given version first.</span><span class="token keyword">type</span> YAMLPrinter <span class="token keyword">struct</span> <span class="token punctuation">{</span>    version   <span class="token builtin">string</span>    converter runtime<span class="token punctuation">.</span>ObjectConvertor<span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token punctuation">(</span>p <span class="token operator">*</span>YAMLPrinter<span class="token punctuation">)</span> <span class="token function">AfterPrint</span><span class="token punctuation">(</span>w io<span class="token punctuation">.</span>Writer<span class="token punctuation">,</span> res <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// PrintObj prints the data as YAML.</span><span class="token keyword">func</span> <span class="token punctuation">(</span>p <span class="token operator">*</span>YAMLPrinter<span class="token punctuation">)</span> <span class="token function">PrintObj</span><span class="token punctuation">(</span>obj runtime<span class="token punctuation">.</span>Object<span class="token punctuation">,</span> w io<span class="token punctuation">.</span>Writer<span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">{</span>    <span class="token keyword">switch</span> obj <span class="token operator">:=</span> obj<span class="token punctuation">.</span><span class="token punctuation">(</span><span class="token keyword">type</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">case</span> <span class="token operator">*</span>runtime<span class="token punctuation">.</span>Unknown<span class="token punctuation">:</span>        data<span class="token punctuation">,</span> err <span class="token operator">:=</span> yaml<span class="token punctuation">.</span><span class="token function">JSONToYAML</span><span class="token punctuation">(</span>obj<span class="token punctuation">.</span>Raw<span class="token punctuation">)</span>        <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> err        <span class="token punctuation">}</span>        <span class="token boolean">_</span><span class="token punctuation">,</span> err <span class="token operator">=</span> w<span class="token punctuation">.</span><span class="token function">Write</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span>        <span class="token keyword">return</span> err    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 把obj转成yaml格式</span>    output<span class="token punctuation">,</span> err <span class="token operator">:=</span> yaml<span class="token punctuation">.</span><span class="token function">Marshal</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span>    <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> err    <span class="token punctuation">}</span>    <span class="token boolean">_</span><span class="token punctuation">,</span> err <span class="token operator">=</span> fmt<span class="token punctuation">.</span><span class="token function">Fprint</span><span class="token punctuation">(</span>w<span class="token punctuation">,</span> <span class="token function">string</span><span class="token punctuation">(</span>output<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> err<span class="token punctuation">}</span></code></pre><p>调用例子：</p><pre><code>kubectl get pods -o yaml</code></pre><h4 id="NamePrinter"><a href="#NamePrinter" class="headerlink" title="NamePrinter"></a>NamePrinter</h4><p>NamePrinter可以打印资源类型和名称：如pod/ubuntu-ssh-589933015-2lhgb。NamePrinter先获判断Object是否为列表，如果是列表，则递归调用PrintObj；否则先获取Object的name，然后获取Object的Kind，并转换成单数形式的GVR，然后返回。</p><pre class=" language-go"><code class="language-go"><span class="token comment" spellcheck="true">// NamePrinter is an implementation of ResourcePrinter which outputs "resource/name" pair of an object.</span><span class="token keyword">type</span> NamePrinter <span class="token keyword">struct</span> <span class="token punctuation">{</span>    Decoder runtime<span class="token punctuation">.</span>Decoder    Typer   runtime<span class="token punctuation">.</span>ObjectTyper<span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token punctuation">(</span>p <span class="token operator">*</span>NamePrinter<span class="token punctuation">)</span> <span class="token function">AfterPrint</span><span class="token punctuation">(</span>w io<span class="token punctuation">.</span>Writer<span class="token punctuation">,</span> res <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// PrintObj is an implementation of ResourcePrinter.PrintObj which decodes the object</span><span class="token comment" spellcheck="true">// and print "resource/name" pair. If the object is a List, print all items in it.</span><span class="token keyword">func</span> <span class="token punctuation">(</span>p <span class="token operator">*</span>NamePrinter<span class="token punctuation">)</span> <span class="token function">PrintObj</span><span class="token punctuation">(</span>obj runtime<span class="token punctuation">.</span>Object<span class="token punctuation">,</span> w io<span class="token punctuation">.</span>Writer<span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> meta<span class="token punctuation">.</span><span class="token function">IsListType</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span> <span class="token punctuation">{</span>        items<span class="token punctuation">,</span> err <span class="token operator">:=</span> meta<span class="token punctuation">.</span><span class="token function">ExtractList</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span>        <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> err        <span class="token punctuation">}</span>        <span class="token keyword">if</span> errs <span class="token operator">:=</span> runtime<span class="token punctuation">.</span><span class="token function">DecodeList</span><span class="token punctuation">(</span>items<span class="token punctuation">,</span> p<span class="token punctuation">.</span>Decoder<span class="token punctuation">,</span> runtime<span class="token punctuation">.</span>UnstructuredJSONScheme<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">len</span><span class="token punctuation">(</span>errs<span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">0</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> utilerrors<span class="token punctuation">.</span><span class="token function">NewAggregate</span><span class="token punctuation">(</span>errs<span class="token punctuation">)</span>        <span class="token punctuation">}</span>        <span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> obj <span class="token operator">:=</span> <span class="token keyword">range</span> items <span class="token punctuation">{</span>            <span class="token keyword">if</span> err <span class="token operator">:=</span> p<span class="token punctuation">.</span><span class="token function">PrintObj</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> w<span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> err            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token boolean">nil</span>    <span class="token punctuation">}</span>    name <span class="token operator">:=</span> <span class="token string">"&lt;unknown>"</span>    <span class="token comment" spellcheck="true">// 获取name</span>    <span class="token keyword">if</span> acc<span class="token punctuation">,</span> err <span class="token operator">:=</span> meta<span class="token punctuation">.</span><span class="token function">Accessor</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> n <span class="token operator">:=</span> acc<span class="token punctuation">.</span><span class="token function">GetName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">len</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">0</span> <span class="token punctuation">{</span>            name <span class="token operator">=</span> n        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> kind <span class="token operator">:=</span> obj<span class="token punctuation">.</span><span class="token function">GetObjectKind</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">GroupVersionKind</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">len</span><span class="token punctuation">(</span>kind<span class="token punctuation">.</span>Kind<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// this is the old code.  It's unnecessary on decoded external objects, but on internal objects</span>        <span class="token comment" spellcheck="true">// you may have to do it.  Tests are definitely calling it with internals and I'm not sure who else</span>        <span class="token comment" spellcheck="true">// is</span>        <span class="token keyword">if</span> gvks<span class="token punctuation">,</span> <span class="token boolean">_</span><span class="token punctuation">,</span> err <span class="token operator">:=</span> p<span class="token punctuation">.</span>Typer<span class="token punctuation">.</span><span class="token function">ObjectKinds</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// TODO: this is wrong, it assumes that meta knows about all Kinds - should take a RESTMapper</span>            <span class="token boolean">_</span><span class="token punctuation">,</span> resource <span class="token operator">:=</span> meta<span class="token punctuation">.</span><span class="token function">KindToResource</span><span class="token punctuation">(</span>gvks<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>            fmt<span class="token punctuation">.</span><span class="token function">Fprintf</span><span class="token punctuation">(</span>w<span class="token punctuation">,</span> <span class="token string">"%s/%s\n"</span><span class="token punctuation">,</span> resource<span class="token punctuation">.</span>Resource<span class="token punctuation">,</span> name<span class="token punctuation">)</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            fmt<span class="token punctuation">.</span><span class="token function">Fprintf</span><span class="token punctuation">(</span>w<span class="token punctuation">,</span> <span class="token string">"&lt;unknown>/%s\n"</span><span class="token punctuation">,</span> name<span class="token punctuation">)</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// TODO: this is wrong, it assumes that meta knows about all Kinds - should take a RESTMapper</span>        <span class="token comment" spellcheck="true">// 直接调用KindToResource()把GVK转换成GVR，并选用单数形式</span>        <span class="token boolean">_</span><span class="token punctuation">,</span> resource <span class="token operator">:=</span> meta<span class="token punctuation">.</span><span class="token function">KindToResource</span><span class="token punctuation">(</span>kind<span class="token punctuation">)</span>        fmt<span class="token punctuation">.</span><span class="token function">Fprintf</span><span class="token punctuation">(</span>w<span class="token punctuation">,</span> <span class="token string">"%s/%s\n"</span><span class="token punctuation">,</span> resource<span class="token punctuation">.</span>Resource<span class="token punctuation">,</span> name<span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">}</span></code></pre><p>调用例子：</p><pre><code># kubectl get pods -o namepod/nginx-1487191267-0t8x3pod/ubuntu-ssh-589933015-2lhgb</code></pre><h4 id="TemplatePrinter"><a href="#TemplatePrinter" class="headerlink" title="TemplatePrinter"></a>TemplatePrinter</h4><p>TemplatePrinter基于txt/template包实现。txt/template一般的用法为：<br>定义模板：</p><pre class=" language-go"><code class="language-go">tmpl<span class="token punctuation">,</span> err <span class="token operator">:=</span> template<span class="token punctuation">.</span><span class="token function">New</span><span class="token punctuation">(</span><span class="token string">"test"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Parse</span><span class="token punctuation">(</span><span class="token string">"hello, {{.}}"</span><span class="token punctuation">)</span></code></pre><p>执行：</p><pre><code>err = tmpl.Execute(os.Stdout, name)</code></pre><p>TemplatePrinter定义如下：</p><pre class=" language-go"><code class="language-go"><span class="token comment" spellcheck="true">// TemplatePrinter is an implementation of ResourcePrinter which formats data with a Go Template.</span><span class="token comment" spellcheck="true">// 调用text/template包</span><span class="token keyword">type</span> TemplatePrinter <span class="token keyword">struct</span> <span class="token punctuation">{</span>    rawTemplate <span class="token builtin">string</span>    template    <span class="token operator">*</span>template<span class="token punctuation">.</span>Template<span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">NewTemplatePrinter</span><span class="token punctuation">(</span>tmpl <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token operator">*</span>TemplatePrinter<span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    t<span class="token punctuation">,</span> err <span class="token operator">:=</span> template<span class="token punctuation">.</span><span class="token function">New</span><span class="token punctuation">(</span><span class="token string">"output"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>        <span class="token function">Funcs</span><span class="token punctuation">(</span>template<span class="token punctuation">.</span>FuncMap<span class="token punctuation">{</span><span class="token string">"exists"</span><span class="token punctuation">:</span> exists<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span>        <span class="token function">Parse</span><span class="token punctuation">(</span><span class="token function">string</span><span class="token punctuation">(</span>tmpl<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> err    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token operator">&amp;</span>TemplatePrinter<span class="token punctuation">{</span>        rawTemplate<span class="token punctuation">:</span> <span class="token function">string</span><span class="token punctuation">(</span>tmpl<span class="token punctuation">)</span><span class="token punctuation">,</span>        template<span class="token punctuation">:</span>    t<span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token boolean">nil</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token punctuation">(</span>p <span class="token operator">*</span>TemplatePrinter<span class="token punctuation">)</span> <span class="token function">AfterPrint</span><span class="token punctuation">(</span>w io<span class="token punctuation">.</span>Writer<span class="token punctuation">,</span> res <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// PrintObj formats the obj with the Go Template.</span><span class="token keyword">func</span> <span class="token punctuation">(</span>p <span class="token operator">*</span>TemplatePrinter<span class="token punctuation">)</span> <span class="token function">PrintObj</span><span class="token punctuation">(</span>obj runtime<span class="token punctuation">.</span>Object<span class="token punctuation">,</span> w io<span class="token punctuation">.</span>Writer<span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> data <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span>    <span class="token keyword">var</span> err <span class="token builtin">error</span>    <span class="token keyword">if</span> unstructured<span class="token punctuation">,</span> ok <span class="token operator">:=</span> obj<span class="token punctuation">.</span><span class="token punctuation">(</span><span class="token operator">*</span>runtime<span class="token punctuation">.</span>Unstructured<span class="token punctuation">)</span><span class="token punctuation">;</span> ok <span class="token punctuation">{</span>        data<span class="token punctuation">,</span> err <span class="token operator">=</span> json<span class="token punctuation">.</span><span class="token function">Marshal</span><span class="token punctuation">(</span>unstructured<span class="token punctuation">.</span>Object<span class="token punctuation">)</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        data<span class="token punctuation">,</span> err <span class="token operator">=</span> json<span class="token punctuation">.</span><span class="token function">Marshal</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> err    <span class="token punctuation">}</span>    out <span class="token operator">:=</span> <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token keyword">if</span> err <span class="token operator">:=</span> json<span class="token punctuation">.</span><span class="token function">Unmarshal</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span> <span class="token operator">&amp;</span>out<span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> err    <span class="token punctuation">}</span>    <span class="token keyword">if</span> err <span class="token operator">=</span> p<span class="token punctuation">.</span><span class="token function">safeExecute</span><span class="token punctuation">(</span>w<span class="token punctuation">,</span> out<span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// It is way easier to debug this stuff when it shows up in</span>        <span class="token comment" spellcheck="true">// stdout instead of just stdin. So in addition to returning</span>        <span class="token comment" spellcheck="true">// a nice error, also print useful stuff with the writer.</span>        fmt<span class="token punctuation">.</span><span class="token function">Fprintf</span><span class="token punctuation">(</span>w<span class="token punctuation">,</span> <span class="token string">"Error executing template: %v. Printing more information for debugging the template:\n"</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span>        fmt<span class="token punctuation">.</span><span class="token function">Fprintf</span><span class="token punctuation">(</span>w<span class="token punctuation">,</span> <span class="token string">"\ttemplate was:\n\t\t%v\n"</span><span class="token punctuation">,</span> p<span class="token punctuation">.</span>rawTemplate<span class="token punctuation">)</span>        fmt<span class="token punctuation">.</span><span class="token function">Fprintf</span><span class="token punctuation">(</span>w<span class="token punctuation">,</span> <span class="token string">"\traw data was:\n\t\t%v\n"</span><span class="token punctuation">,</span> <span class="token function">string</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span>        fmt<span class="token punctuation">.</span><span class="token function">Fprintf</span><span class="token punctuation">(</span>w<span class="token punctuation">,</span> <span class="token string">"\tobject given to template engine was:\n\t\t%+v\n\n"</span><span class="token punctuation">,</span> out<span class="token punctuation">)</span>        <span class="token keyword">return</span> fmt<span class="token punctuation">.</span><span class="token function">Errorf</span><span class="token punctuation">(</span><span class="token string">"error executing template %q: %v"</span><span class="token punctuation">,</span> p<span class="token punctuation">.</span>rawTemplate<span class="token punctuation">,</span> err<span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// TODO: implement HandledResources()</span><span class="token keyword">func</span> <span class="token punctuation">(</span>p <span class="token operator">*</span>TemplatePrinter<span class="token punctuation">)</span> <span class="token function">HandledResources</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>调用例子：</p><pre><code># kubectl get pods nginx-1487191267-0t8x3 -o go-template="The name is {{.metadata.name}}"The name is nginx-1487191267-0t8x3</code></pre><p>或者</p><pre><code># kubectl get pods nginx-1487191267-0t8x3 -o go-template-file=template The name is nginx-1487191267-0t8x3</code></pre><p>其中<code>go-template-file=template</code>的template为文件，内容为:</p><pre><code>The name is {{.metadata.name}}</code></pre><h4 id="JSONPathPrinter"><a href="#JSONPathPrinter" class="headerlink" title="JSONPathPrinter"></a>JSONPathPrinter</h4><p>JSONPathPrinter实现了一套匹配规则，详见<a href="https://kubernetes.io/docs/user-guide/jsonpath/。" target="_blank" rel="noopener">https://kubernetes.io/docs/user-guide/jsonpath/。</a><br>jsonpath具体在<code>/pkg/util/jsonpath/jsonpath.go</code>中实现，具体分析此处略。</p><pre class=" language-go"><code class="language-go"><span class="token comment" spellcheck="true">// JSONPathPrinter is an implementation of ResourcePrinter which formats data with jsonpath expression.</span><span class="token keyword">type</span> JSONPathPrinter <span class="token keyword">struct</span> <span class="token punctuation">{</span>    rawTemplate <span class="token builtin">string</span>    <span class="token operator">*</span>jsonpath<span class="token punctuation">.</span>JSONPath<span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">NewJSONPathPrinter</span><span class="token punctuation">(</span>tmpl <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token operator">*</span>JSONPathPrinter<span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    j <span class="token operator">:=</span> jsonpath<span class="token punctuation">.</span><span class="token function">New</span><span class="token punctuation">(</span><span class="token string">"out"</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> err <span class="token operator">:=</span> j<span class="token punctuation">.</span><span class="token function">Parse</span><span class="token punctuation">(</span>tmpl<span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> err    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token operator">&amp;</span>JSONPathPrinter<span class="token punctuation">{</span>tmpl<span class="token punctuation">,</span> j<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token boolean">nil</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token punctuation">(</span>j <span class="token operator">*</span>JSONPathPrinter<span class="token punctuation">)</span> <span class="token function">AfterPrint</span><span class="token punctuation">(</span>w io<span class="token punctuation">.</span>Writer<span class="token punctuation">,</span> res <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// PrintObj formats the obj with the JSONPath Template.</span><span class="token keyword">func</span> <span class="token punctuation">(</span>j <span class="token operator">*</span>JSONPathPrinter<span class="token punctuation">)</span> <span class="token function">PrintObj</span><span class="token punctuation">(</span>obj runtime<span class="token punctuation">.</span>Object<span class="token punctuation">,</span> w io<span class="token punctuation">.</span>Writer<span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> queryObj <span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token operator">=</span> obj    <span class="token keyword">if</span> meta<span class="token punctuation">.</span><span class="token function">IsListType</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span> <span class="token punctuation">{</span>        data<span class="token punctuation">,</span> err <span class="token operator">:=</span> json<span class="token punctuation">.</span><span class="token function">Marshal</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span>        <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> err        <span class="token punctuation">}</span>        queryObj <span class="token operator">=</span> <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">{</span><span class="token punctuation">}</span>        <span class="token keyword">if</span> err <span class="token operator">:=</span> json<span class="token punctuation">.</span><span class="token function">Unmarshal</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span> <span class="token operator">&amp;</span>queryObj<span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> err        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> unknown<span class="token punctuation">,</span> ok <span class="token operator">:=</span> obj<span class="token punctuation">.</span><span class="token punctuation">(</span><span class="token operator">*</span>runtime<span class="token punctuation">.</span>Unknown<span class="token punctuation">)</span><span class="token punctuation">;</span> ok <span class="token punctuation">{</span>        data<span class="token punctuation">,</span> err <span class="token operator">:=</span> json<span class="token punctuation">.</span><span class="token function">Marshal</span><span class="token punctuation">(</span>unknown<span class="token punctuation">)</span>        <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> err        <span class="token punctuation">}</span>        queryObj <span class="token operator">=</span> <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">{</span><span class="token punctuation">}</span>        <span class="token keyword">if</span> err <span class="token operator">:=</span> json<span class="token punctuation">.</span><span class="token function">Unmarshal</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span> <span class="token operator">&amp;</span>queryObj<span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> err        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> unstructured<span class="token punctuation">,</span> ok <span class="token operator">:=</span> obj<span class="token punctuation">.</span><span class="token punctuation">(</span><span class="token operator">*</span>runtime<span class="token punctuation">.</span>Unstructured<span class="token punctuation">)</span><span class="token punctuation">;</span> ok <span class="token punctuation">{</span>        queryObj <span class="token operator">=</span> unstructured<span class="token punctuation">.</span>Object    <span class="token punctuation">}</span>    <span class="token keyword">if</span> err <span class="token operator">:=</span> j<span class="token punctuation">.</span>JSONPath<span class="token punctuation">.</span><span class="token function">Execute</span><span class="token punctuation">(</span>w<span class="token punctuation">,</span> queryObj<span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>        fmt<span class="token punctuation">.</span><span class="token function">Fprintf</span><span class="token punctuation">(</span>w<span class="token punctuation">,</span> <span class="token string">"Error executing template: %v. Printing more information for debugging the template:\n"</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span>        fmt<span class="token punctuation">.</span><span class="token function">Fprintf</span><span class="token punctuation">(</span>w<span class="token punctuation">,</span> <span class="token string">"\ttemplate was:\n\t\t%v\n"</span><span class="token punctuation">,</span> j<span class="token punctuation">.</span>rawTemplate<span class="token punctuation">)</span>        fmt<span class="token punctuation">.</span><span class="token function">Fprintf</span><span class="token punctuation">(</span>w<span class="token punctuation">,</span> <span class="token string">"\tobject given to jsonpath engine was:\n\t\t%#v\n\n"</span><span class="token punctuation">,</span> queryObj<span class="token punctuation">)</span>        <span class="token keyword">return</span> fmt<span class="token punctuation">.</span><span class="token function">Errorf</span><span class="token punctuation">(</span><span class="token string">"error executing jsonpath %q: %v\n"</span><span class="token punctuation">,</span> j<span class="token punctuation">.</span>rawTemplate<span class="token punctuation">,</span> err<span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// TODO: implement HandledResources()</span><span class="token keyword">func</span> <span class="token punctuation">(</span>p <span class="token operator">*</span>JSONPathPrinter<span class="token punctuation">)</span> <span class="token function">HandledResources</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>调用例子：</p><pre><code># kubectl get pods -o jsonpath={.items[*].metadata.name}nginx-1487191267-0t8x3 ubuntu-ssh-589933015-2lhgb</code></pre><p>或者</p><pre><code># kubectl get pods -o jsonpath-file=templatenginx-1487191267-0t8x3 ubuntu-ssh-589933015-2lhgb</code></pre><p>其中<code>jsonpath-file=template</code>的template为文件，内容为:</p><pre><code>{.items[*].metadata.name}</code></pre><h4 id="CustomColumnsPrinter"><a href="#CustomColumnsPrinter" class="headerlink" title="CustomColumnsPrinter"></a>CustomColumnsPrinter</h4><p>CustomColumnsPrinter允许用户定义列名，是JSONPath的加强版。支持从命令行直接输入模板和从文件读取模板两种方式。</p><p>读取命令行模板的CustomColumnsPrinter生成函数如下：</p><pre class=" language-go"><code class="language-go"><span class="token operator">/</span><span class="token comment" spellcheck="true">/***kubectl get pods -o custom-columns=Type:{.kind},Name:{.metadata.name}***/</span><span class="token operator">/</span><span class="token keyword">func</span> <span class="token function">NewCustomColumnsPrinterFromSpec</span><span class="token punctuation">(</span>spec <span class="token builtin">string</span><span class="token punctuation">,</span> decoder runtime<span class="token punctuation">.</span>Decoder<span class="token punctuation">,</span> noHeaders <span class="token builtin">bool</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token operator">*</span>CustomColumnsPrinter<span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token function">len</span><span class="token punctuation">(</span>spec<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> fmt<span class="token punctuation">.</span><span class="token function">Errorf</span><span class="token punctuation">(</span><span class="token string">"custom-columns format specified but no custom columns given"</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// parts: [Type:{.kind} Name:{.metadata.name}]</span>    parts <span class="token operator">:=</span> strings<span class="token punctuation">.</span><span class="token function">Split</span><span class="token punctuation">(</span>spec<span class="token punctuation">,</span> <span class="token string">","</span><span class="token punctuation">)</span>    columns <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span>Column<span class="token punctuation">,</span> <span class="token function">len</span><span class="token punctuation">(</span>parts<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> ix <span class="token operator">:=</span> <span class="token keyword">range</span> parts <span class="token punctuation">{</span>        colSpec <span class="token operator">:=</span> strings<span class="token punctuation">.</span><span class="token function">Split</span><span class="token punctuation">(</span>parts<span class="token punctuation">[</span>ix<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">":"</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> <span class="token function">len</span><span class="token punctuation">(</span>colSpec<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">2</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> fmt<span class="token punctuation">.</span><span class="token function">Errorf</span><span class="token punctuation">(</span><span class="token string">"unexpected custom-columns spec: %s, expected &lt;header>:&lt;json-path-expr>"</span><span class="token punctuation">,</span> parts<span class="token punctuation">[</span>ix<span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span>        spec<span class="token punctuation">,</span> err <span class="token operator">:=</span> <span class="token function">massageJSONPath</span><span class="token punctuation">(</span>colSpec<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> err        <span class="token punctuation">}</span>        columns<span class="token punctuation">[</span>ix<span class="token punctuation">]</span> <span class="token operator">=</span> Column<span class="token punctuation">{</span>Header<span class="token punctuation">:</span> colSpec<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> FieldSpec<span class="token punctuation">:</span> spec<span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token operator">&amp;</span>CustomColumnsPrinter<span class="token punctuation">{</span>Columns<span class="token punctuation">:</span> columns<span class="token punctuation">,</span> Decoder<span class="token punctuation">:</span> decoder<span class="token punctuation">,</span> NoHeaders<span class="token punctuation">:</span> noHeaders<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token boolean">nil</span><span class="token punctuation">}</span></code></pre><p>读取文件模板的CustomColumnsPrinter生成函数如下：</p><pre class=" language-go"><code class="language-go"><span class="token comment" spellcheck="true">// kubectl get pods -o custom-columns-file=/home/fankang/template</span><span class="token keyword">func</span> <span class="token function">NewCustomColumnsPrinterFromTemplate</span><span class="token punctuation">(</span>templateReader io<span class="token punctuation">.</span>Reader<span class="token punctuation">,</span> decoder runtime<span class="token punctuation">.</span>Decoder<span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token operator">*</span>CustomColumnsPrinter<span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    scanner <span class="token operator">:=</span> bufio<span class="token punctuation">.</span><span class="token function">NewScanner</span><span class="token punctuation">(</span>templateReader<span class="token punctuation">)</span>    <span class="token keyword">if</span> <span class="token operator">!</span>scanner<span class="token punctuation">.</span><span class="token function">Scan</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> fmt<span class="token punctuation">.</span><span class="token function">Errorf</span><span class="token punctuation">(</span><span class="token string">"invalid template, missing header line. Expected format is one line of space separated headers, one line of space separated column specs."</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// headers: [Type Name]</span>    headers <span class="token operator">:=</span> <span class="token function">splitOnWhitespace</span><span class="token punctuation">(</span>scanner<span class="token punctuation">.</span><span class="token function">Text</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> <span class="token operator">!</span>scanner<span class="token punctuation">.</span><span class="token function">Scan</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> fmt<span class="token punctuation">.</span><span class="token function">Errorf</span><span class="token punctuation">(</span><span class="token string">"invalid template, missing spec line. Expected format is one line of space separated headers, one line of space separated column specs."</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// specs: [{.kind} {.metadata.name}]</span>    specs <span class="token operator">:=</span> <span class="token function">splitOnWhitespace</span><span class="token punctuation">(</span>scanner<span class="token punctuation">.</span><span class="token function">Text</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// 如果headers和specs长度不一致，则直接返回</span>    <span class="token keyword">if</span> <span class="token function">len</span><span class="token punctuation">(</span>headers<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token function">len</span><span class="token punctuation">(</span>specs<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> fmt<span class="token punctuation">.</span><span class="token function">Errorf</span><span class="token punctuation">(</span><span class="token string">"number of headers (%d) and field specifications (%d) don't match"</span><span class="token punctuation">,</span> <span class="token function">len</span><span class="token punctuation">(</span>headers<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">len</span><span class="token punctuation">(</span>specs<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    columns <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span>Column<span class="token punctuation">,</span> <span class="token function">len</span><span class="token punctuation">(</span>headers<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> ix <span class="token operator">:=</span> <span class="token keyword">range</span> headers <span class="token punctuation">{</span>        spec<span class="token punctuation">,</span> err <span class="token operator">:=</span> <span class="token function">massageJSONPath</span><span class="token punctuation">(</span>specs<span class="token punctuation">[</span>ix<span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> err        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 组装成Column</span>        columns<span class="token punctuation">[</span>ix<span class="token punctuation">]</span> <span class="token operator">=</span> Column<span class="token punctuation">{</span>            Header<span class="token punctuation">:</span>    headers<span class="token punctuation">[</span>ix<span class="token punctuation">]</span><span class="token punctuation">,</span>            FieldSpec<span class="token punctuation">:</span> spec<span class="token punctuation">,</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 返回CustomColumnsPrinter</span>    <span class="token keyword">return</span> <span class="token operator">&amp;</span>CustomColumnsPrinter<span class="token punctuation">{</span>Columns<span class="token punctuation">:</span> columns<span class="token punctuation">,</span> Decoder<span class="token punctuation">:</span> decoder<span class="token punctuation">,</span> NoHeaders<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token boolean">nil</span><span class="token punctuation">}</span></code></pre><p>CustomColumnsPrinter的PrintObj()方法如下，可以看出，调用了jsonpath.New()来解析模板。</p><pre><code>func (s *CustomColumnsPrinter) PrintObj(obj runtime.Object, out io.Writer) error {    w := tabwriter.NewWriter(out, columnwidth, tabwidth, padding, padding_character, flags)    if !s.NoHeaders {        headers := make([]string, len(s.Columns))        for ix := range s.Columns {            headers[ix] = s.Columns[ix].Header        }        fmt.Fprintln(w, strings.Join(headers, "\t"))    }    parsers := make([]*jsonpath.JSONPath, len(s.Columns))    for ix := range s.Columns {        parsers[ix] = jsonpath.New(fmt.Sprintf("column%d", ix))        if err := parsers[ix].Parse(s.Columns[ix].FieldSpec); err != nil {            return err        }    }    if meta.IsListType(obj) {        objs, err := meta.ExtractList(obj)        if err != nil {            return err        }        for ix := range objs {            if err := s.printOneObject(objs[ix], parsers, w); err != nil {                return err            }        }    } else {        if err := s.printOneObject(obj, parsers, w); err != nil {            return err        }    }    return w.Flush()}</code></pre><p>调用例子：</p><pre><code># kubectl get pods -o custom-columns=Type:{.kind},Name:{.metadata.name}Type      NamePod       nginx-1487191267-0t8x3Pod       ubuntu-ssh-589933015-2lhgb</code></pre><p>或者</p><pre><code># kubectl get pods -o custom-columns-file=templateType      NamePod       nginx-1487191267-0t8x3Pod       ubuntu-ssh-589933015-2lhgb</code></pre><p>其中<code>custom-columns-file=template</code>的template为文件，内容为:</p><pre><code>Type              Name{.kind}           {.metadata.name}</code></pre><h4 id="VersionedPrinter"><a href="#VersionedPrinter" class="headerlink" title="VersionedPrinter"></a>VersionedPrinter</h4><p>VersionedPrinter是对其他Printer的封装，先把Object转换成对应版本的Object，然后再封装的Printer进行打印。</p><pre><code>// VersionedPrinter takes runtime objects and ensures they are converted to a given API version// prior to being passed to a nested printer.type VersionedPrinter struct {    printer   ResourcePrinter    converter runtime.ObjectConvertor    versions  []unversioned.GroupVersion}// NewVersionedPrinter wraps a printer to convert objects to a known API version prior to printing.func NewVersionedPrinter(printer ResourcePrinter, converter runtime.ObjectConvertor, versions ...unversioned.GroupVersion) ResourcePrinter {    return &amp;VersionedPrinter{        printer:   printer,        converter: converter,        versions:  versions,    }}func (p *VersionedPrinter) AfterPrint(w io.Writer, res string) error {    return nil}// PrintObj implements ResourcePrinterfunc (p *VersionedPrinter) PrintObj(obj runtime.Object, w io.Writer) error {    if len(p.versions) == 0 {        return fmt.Errorf("no version specified, object cannot be converted")    }    converted, err := p.converter.ConvertToVersion(obj, unversioned.GroupVersions(p.versions))    if err != nil {        return err    }    return p.printer.PrintObj(converted, w)}</code></pre><p>version由<code>kubectl get pods --output-version='v1' -o yaml -w</code>的–output-version指定，但没什么作用，而且kubectl get代码中只有Watch会使用VersionedPrinter，所以还待更深入的研究。</p><h4 id="HumanReadablePrinter"><a href="#HumanReadablePrinter" class="headerlink" title="HumanReadablePrinter"></a>HumanReadablePrinter</h4><p>HumanReadablePrinter可以”人性化”地输出内容。HumanReadablePrinter中有handlerMap，handlerMap记录了待打印的对象到处理函数的映射关系。系统中每种资源都有对应的打印函数。</p><p>其中<code>kubectl -o wide</code>调用的也是HumanReadablePrinter。</p><pre class=" language-go"><code class="language-go"><span class="token keyword">type</span> HumanReadablePrinter <span class="token keyword">struct</span> <span class="token punctuation">{</span>    handlerMap   <span class="token keyword">map</span><span class="token punctuation">[</span>reflect<span class="token punctuation">.</span>Type<span class="token punctuation">]</span><span class="token operator">*</span>handlerEntry    options      PrintOptions    lastType     reflect<span class="token punctuation">.</span>Type    hiddenObjNum <span class="token builtin">int</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// NewHumanReadablePrinter creates a HumanReadablePrinter.</span><span class="token comment" spellcheck="true">// 创建HumanReadablePrinter</span><span class="token keyword">func</span> <span class="token function">NewHumanReadablePrinter</span><span class="token punctuation">(</span>options PrintOptions<span class="token punctuation">)</span> <span class="token operator">*</span>HumanReadablePrinter <span class="token punctuation">{</span>    printer <span class="token operator">:=</span> <span class="token operator">&amp;</span>HumanReadablePrinter<span class="token punctuation">{</span>        handlerMap<span class="token punctuation">:</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">map</span><span class="token punctuation">[</span>reflect<span class="token punctuation">.</span>Type<span class="token punctuation">]</span><span class="token operator">*</span>handlerEntry<span class="token punctuation">)</span><span class="token punctuation">,</span>        options<span class="token punctuation">:</span>    options<span class="token punctuation">,</span>    <span class="token punctuation">}</span>    printer<span class="token punctuation">.</span><span class="token function">addDefaultHandlers</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> printer<span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 打印第一行标题</span><span class="token keyword">func</span> <span class="token punctuation">(</span>h <span class="token operator">*</span>HumanReadablePrinter<span class="token punctuation">)</span> <span class="token function">printHeader</span><span class="token punctuation">(</span>columnNames <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">,</span> w io<span class="token punctuation">.</span>Writer<span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token boolean">_</span><span class="token punctuation">,</span> err <span class="token operator">:=</span> fmt<span class="token punctuation">.</span><span class="token function">Fprintf</span><span class="token punctuation">(</span>w<span class="token punctuation">,</span> <span class="token string">"%s\n"</span><span class="token punctuation">,</span> strings<span class="token punctuation">.</span><span class="token function">Join</span><span class="token punctuation">(</span>columnNames<span class="token punctuation">,</span> <span class="token string">"\t"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> err    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 打印Pod</span><span class="token keyword">func</span> <span class="token punctuation">(</span>h <span class="token operator">*</span>HumanReadablePrinter<span class="token punctuation">)</span> <span class="token function">printPod</span><span class="token punctuation">(</span>pod <span class="token operator">*</span>api<span class="token punctuation">.</span>Pod<span class="token punctuation">,</span> w io<span class="token punctuation">.</span>Writer<span class="token punctuation">,</span> options PrintOptions<span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> err <span class="token operator">:=</span> <span class="token function">printPodBase</span><span class="token punctuation">(</span>pod<span class="token punctuation">,</span> w<span class="token punctuation">,</span> options<span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> err    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">printPodBase</span><span class="token punctuation">(</span>pod <span class="token operator">*</span>api<span class="token punctuation">.</span>Pod<span class="token punctuation">,</span> w io<span class="token punctuation">.</span>Writer<span class="token punctuation">,</span> options PrintOptions<span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">{</span>    name <span class="token operator">:=</span> <span class="token function">formatResourceName</span><span class="token punctuation">(</span>options<span class="token punctuation">.</span>Kind<span class="token punctuation">,</span> pod<span class="token punctuation">.</span>Name<span class="token punctuation">,</span> options<span class="token punctuation">.</span>WithKind<span class="token punctuation">)</span>    namespace <span class="token operator">:=</span> pod<span class="token punctuation">.</span>Namespace    restarts <span class="token operator">:=</span> <span class="token number">0</span>    totalContainers <span class="token operator">:=</span> <span class="token function">len</span><span class="token punctuation">(</span>pod<span class="token punctuation">.</span>Spec<span class="token punctuation">.</span>Containers<span class="token punctuation">)</span>    readyContainers <span class="token operator">:=</span> <span class="token number">0</span>    reason <span class="token operator">:=</span> <span class="token function">string</span><span class="token punctuation">(</span>pod<span class="token punctuation">.</span>Status<span class="token punctuation">.</span>Phase<span class="token punctuation">)</span>    <span class="token keyword">if</span> pod<span class="token punctuation">.</span>Status<span class="token punctuation">.</span>Reason <span class="token operator">!=</span> <span class="token string">""</span> <span class="token punctuation">{</span>        reason <span class="token operator">=</span> pod<span class="token punctuation">.</span>Status<span class="token punctuation">.</span>Reason    <span class="token punctuation">}</span>    initializing <span class="token operator">:=</span> <span class="token boolean">false</span>    <span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token keyword">range</span> pod<span class="token punctuation">.</span>Status<span class="token punctuation">.</span>InitContainerStatuses <span class="token punctuation">{</span>        container <span class="token operator">:=</span> pod<span class="token punctuation">.</span>Status<span class="token punctuation">.</span>InitContainerStatuses<span class="token punctuation">[</span>i<span class="token punctuation">]</span>        restarts <span class="token operator">+=</span> <span class="token function">int</span><span class="token punctuation">(</span>container<span class="token punctuation">.</span>RestartCount<span class="token punctuation">)</span>        <span class="token keyword">switch</span> <span class="token punctuation">{</span>        <span class="token keyword">case</span> container<span class="token punctuation">.</span>State<span class="token punctuation">.</span>Terminated <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token operator">&amp;&amp;</span> container<span class="token punctuation">.</span>State<span class="token punctuation">.</span>Terminated<span class="token punctuation">.</span>ExitCode <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>            <span class="token keyword">continue</span>        <span class="token keyword">case</span> container<span class="token punctuation">.</span>State<span class="token punctuation">.</span>Terminated <span class="token operator">!=</span> <span class="token boolean">nil</span><span class="token punctuation">:</span>            <span class="token comment" spellcheck="true">// initialization is failed</span>            <span class="token keyword">if</span> <span class="token function">len</span><span class="token punctuation">(</span>container<span class="token punctuation">.</span>State<span class="token punctuation">.</span>Terminated<span class="token punctuation">.</span>Reason<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> container<span class="token punctuation">.</span>State<span class="token punctuation">.</span>Terminated<span class="token punctuation">.</span>Signal <span class="token operator">!=</span> <span class="token number">0</span> <span class="token punctuation">{</span>                    reason <span class="token operator">=</span> fmt<span class="token punctuation">.</span><span class="token function">Sprintf</span><span class="token punctuation">(</span><span class="token string">"Init:Signal:%d"</span><span class="token punctuation">,</span> container<span class="token punctuation">.</span>State<span class="token punctuation">.</span>Terminated<span class="token punctuation">.</span>Signal<span class="token punctuation">)</span>                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                    reason <span class="token operator">=</span> fmt<span class="token punctuation">.</span><span class="token function">Sprintf</span><span class="token punctuation">(</span><span class="token string">"Init:ExitCode:%d"</span><span class="token punctuation">,</span> container<span class="token punctuation">.</span>State<span class="token punctuation">.</span>Terminated<span class="token punctuation">.</span>ExitCode<span class="token punctuation">)</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                reason <span class="token operator">=</span> <span class="token string">"Init:"</span> <span class="token operator">+</span> container<span class="token punctuation">.</span>State<span class="token punctuation">.</span>Terminated<span class="token punctuation">.</span>Reason            <span class="token punctuation">}</span>            initializing <span class="token operator">=</span> <span class="token boolean">true</span>        <span class="token keyword">case</span> container<span class="token punctuation">.</span>State<span class="token punctuation">.</span>Waiting <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token operator">&amp;&amp;</span> <span class="token function">len</span><span class="token punctuation">(</span>container<span class="token punctuation">.</span>State<span class="token punctuation">.</span>Waiting<span class="token punctuation">.</span>Reason<span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> container<span class="token punctuation">.</span>State<span class="token punctuation">.</span>Waiting<span class="token punctuation">.</span>Reason <span class="token operator">!=</span> <span class="token string">"PodInitializing"</span><span class="token punctuation">:</span>            reason <span class="token operator">=</span> <span class="token string">"Init:"</span> <span class="token operator">+</span> container<span class="token punctuation">.</span>State<span class="token punctuation">.</span>Waiting<span class="token punctuation">.</span>Reason            initializing <span class="token operator">=</span> <span class="token boolean">true</span>        <span class="token keyword">default</span><span class="token punctuation">:</span>            reason <span class="token operator">=</span> fmt<span class="token punctuation">.</span><span class="token function">Sprintf</span><span class="token punctuation">(</span><span class="token string">"Init:%d/%d"</span><span class="token punctuation">,</span> i<span class="token punctuation">,</span> <span class="token function">len</span><span class="token punctuation">(</span>pod<span class="token punctuation">.</span>Spec<span class="token punctuation">.</span>InitContainers<span class="token punctuation">)</span><span class="token punctuation">)</span>            initializing <span class="token operator">=</span> <span class="token boolean">true</span>        <span class="token punctuation">}</span>        <span class="token keyword">break</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token operator">!</span>initializing <span class="token punctuation">{</span>        restarts <span class="token operator">=</span> <span class="token number">0</span>        <span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token function">len</span><span class="token punctuation">(</span>pod<span class="token punctuation">.</span>Status<span class="token punctuation">.</span>ContainerStatuses<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">--</span> <span class="token punctuation">{</span>            container <span class="token operator">:=</span> pod<span class="token punctuation">.</span>Status<span class="token punctuation">.</span>ContainerStatuses<span class="token punctuation">[</span>i<span class="token punctuation">]</span>            restarts <span class="token operator">+=</span> <span class="token function">int</span><span class="token punctuation">(</span>container<span class="token punctuation">.</span>RestartCount<span class="token punctuation">)</span>            <span class="token keyword">if</span> container<span class="token punctuation">.</span>State<span class="token punctuation">.</span>Waiting <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token operator">&amp;&amp;</span> container<span class="token punctuation">.</span>State<span class="token punctuation">.</span>Waiting<span class="token punctuation">.</span>Reason <span class="token operator">!=</span> <span class="token string">""</span> <span class="token punctuation">{</span>                reason <span class="token operator">=</span> container<span class="token punctuation">.</span>State<span class="token punctuation">.</span>Waiting<span class="token punctuation">.</span>Reason            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> container<span class="token punctuation">.</span>State<span class="token punctuation">.</span>Terminated <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token operator">&amp;&amp;</span> container<span class="token punctuation">.</span>State<span class="token punctuation">.</span>Terminated<span class="token punctuation">.</span>Reason <span class="token operator">!=</span> <span class="token string">""</span> <span class="token punctuation">{</span>                reason <span class="token operator">=</span> container<span class="token punctuation">.</span>State<span class="token punctuation">.</span>Terminated<span class="token punctuation">.</span>Reason            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> container<span class="token punctuation">.</span>State<span class="token punctuation">.</span>Terminated <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token operator">&amp;&amp;</span> container<span class="token punctuation">.</span>State<span class="token punctuation">.</span>Terminated<span class="token punctuation">.</span>Reason <span class="token operator">==</span> <span class="token string">""</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> container<span class="token punctuation">.</span>State<span class="token punctuation">.</span>Terminated<span class="token punctuation">.</span>Signal <span class="token operator">!=</span> <span class="token number">0</span> <span class="token punctuation">{</span>                    reason <span class="token operator">=</span> fmt<span class="token punctuation">.</span><span class="token function">Sprintf</span><span class="token punctuation">(</span><span class="token string">"Signal:%d"</span><span class="token punctuation">,</span> container<span class="token punctuation">.</span>State<span class="token punctuation">.</span>Terminated<span class="token punctuation">.</span>Signal<span class="token punctuation">)</span>                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                    reason <span class="token operator">=</span> fmt<span class="token punctuation">.</span><span class="token function">Sprintf</span><span class="token punctuation">(</span><span class="token string">"ExitCode:%d"</span><span class="token punctuation">,</span> container<span class="token punctuation">.</span>State<span class="token punctuation">.</span>Terminated<span class="token punctuation">.</span>ExitCode<span class="token punctuation">)</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> container<span class="token punctuation">.</span>Ready <span class="token operator">&amp;&amp;</span> container<span class="token punctuation">.</span>State<span class="token punctuation">.</span>Running <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>                readyContainers<span class="token operator">++</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> pod<span class="token punctuation">.</span>DeletionTimestamp <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token operator">&amp;&amp;</span> pod<span class="token punctuation">.</span>Status<span class="token punctuation">.</span>Reason <span class="token operator">==</span> node<span class="token punctuation">.</span>NodeUnreachablePodReason <span class="token punctuation">{</span>        reason <span class="token operator">=</span> <span class="token string">"Unknown"</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> pod<span class="token punctuation">.</span>DeletionTimestamp <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>        reason <span class="token operator">=</span> <span class="token string">"Terminating"</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> options<span class="token punctuation">.</span>WithNamespace <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token boolean">_</span><span class="token punctuation">,</span> err <span class="token operator">:=</span> fmt<span class="token punctuation">.</span><span class="token function">Fprintf</span><span class="token punctuation">(</span>w<span class="token punctuation">,</span> <span class="token string">"%s\t"</span><span class="token punctuation">,</span> namespace<span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> err        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token boolean">_</span><span class="token punctuation">,</span> err <span class="token operator">:=</span> fmt<span class="token punctuation">.</span><span class="token function">Fprintf</span><span class="token punctuation">(</span>w<span class="token punctuation">,</span> <span class="token string">"%s\t%d/%d\t%s\t%d\t%s"</span><span class="token punctuation">,</span>        name<span class="token punctuation">,</span>        readyContainers<span class="token punctuation">,</span>        totalContainers<span class="token punctuation">,</span>        reason<span class="token punctuation">,</span>        restarts<span class="token punctuation">,</span>        <span class="token function">translateTimestamp</span><span class="token punctuation">(</span>pod<span class="token punctuation">.</span>CreationTimestamp<span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> err    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// -o wide则写入IP和NODE</span>    <span class="token keyword">if</span> options<span class="token punctuation">.</span>Wide <span class="token punctuation">{</span>        nodeName <span class="token operator">:=</span> pod<span class="token punctuation">.</span>Spec<span class="token punctuation">.</span>NodeName        podIP <span class="token operator">:=</span> pod<span class="token punctuation">.</span>Status<span class="token punctuation">.</span>PodIP        <span class="token keyword">if</span> podIP <span class="token operator">==</span> <span class="token string">""</span> <span class="token punctuation">{</span>            podIP <span class="token operator">=</span> <span class="token string">"&lt;none>"</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token boolean">_</span><span class="token punctuation">,</span> err <span class="token operator">:=</span> fmt<span class="token punctuation">.</span><span class="token function">Fprintf</span><span class="token punctuation">(</span>w<span class="token punctuation">,</span> <span class="token string">"\t%s\t%s"</span><span class="token punctuation">,</span>            podIP<span class="token punctuation">,</span>            nodeName<span class="token punctuation">,</span>        <span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> err        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token boolean">_</span><span class="token punctuation">,</span> err <span class="token operator">:=</span> fmt<span class="token punctuation">.</span><span class="token function">Fprint</span><span class="token punctuation">(</span>w<span class="token punctuation">,</span> <span class="token function">AppendLabels</span><span class="token punctuation">(</span>pod<span class="token punctuation">.</span>Labels<span class="token punctuation">,</span> options<span class="token punctuation">.</span>ColumnLabels<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> err    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token boolean">_</span><span class="token punctuation">,</span> err <span class="token operator">:=</span> fmt<span class="token punctuation">.</span><span class="token function">Fprint</span><span class="token punctuation">(</span>w<span class="token punctuation">,</span> <span class="token function">AppendAllLabels</span><span class="token punctuation">(</span>options<span class="token punctuation">.</span>ShowLabels<span class="token punctuation">,</span> pod<span class="token punctuation">.</span>Labels<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> err    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">}</span></code></pre><p>调用例子：</p><pre><code># kubectl get podsNAME                                READY   STATUS    RESTARTS   AGEnginx-deployment-7c96855774-c5xbp   1/1     Running   0          28snginx-deployment-7c96855774-lqzr4   1/1     Running   0          28snginx-deployment-7c96855774-txw7c   1/1     Running   0          28snginx-deployment-7c96855774-vjm6p   1/1     Running   0          28s</code></pre><p>或者</p><pre><code># kubectl get pods -o wideNAME                                READY   STATUS    RESTARTS   AGE   IP               NODE    NOMINATED NODE   READINESS GATESnginx-deployment-7c96855774-c5xbp   1/1     Running   0          5s    10.100.166.154   node1   &lt;none&gt;           &lt;none&gt;nginx-deployment-7c96855774-lqzr4   1/1     Running   0          5s    10.100.166.153   node1   &lt;none&gt;           &lt;none&gt;nginx-deployment-7c96855774-txw7c   1/1     Running   0          5s    10.100.104.33    node2   &lt;none&gt;           &lt;none&gt;nginx-deployment-7c96855774-vjm6p   1/1     Running   0          5s    10.100.104.34    node2   &lt;none&gt;           &lt;none&gt;[root@master work]#</code></pre><h3 id="Describer"><a href="#Describer" class="headerlink" title="Describer"></a>Describer</h3><p>Describer 是 Kubectl 上用来描述对象具体信息的，和<code>kubectl describe</code>配合使用。</p><p>代码路径：</p><p><a href="https://github.com/kubernetes/kubernetes/blob/v1.18.0/staging/src/k8s.io/kubectl/pkg/describe/interface.go#L43" target="_blank" rel="noopener">kubernetes/staging/src/k8s.io/kubectl/pkg/describe/interface.go</a></p><p>Describer( )函数，可以依据 mapping 生成合适的 Describer。</p><pre class=" language-go"><code class="language-go"><span class="token keyword">type</span> ResourceDescriber <span class="token keyword">interface</span> <span class="token punctuation">{</span>    <span class="token function">Describe</span><span class="token punctuation">(</span>namespace<span class="token punctuation">,</span> name <span class="token builtin">string</span><span class="token punctuation">,</span> describerSettings DescriberSettings<span class="token punctuation">)</span> <span class="token punctuation">(</span>output <span class="token builtin">string</span><span class="token punctuation">,</span> err <span class="token builtin">error</span><span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><p>可以看到，只要实现了Describe()的结构体都可以称为Describer。</p><p>所以，在<code>/pkg/kubectl/describer.go</code>中，实现了 PodDescriber, ReplicationControllerDescriber, SecretDescriber, ServiceDescriber, ServiceAccountDescriber, NodeDescriber, LimitRangeDescriber, ResourceQuotaDescriber, PersistentVolumeDescriber, PersistentVolumeClaimDescriber, NamespaceDescriber, EndpointsDescriber, ConfigMapDescriber, ReplicaSetDescriber, HorizontalPodAutoscalerDescriber, NetworkPolicyDescriber, HorizontalPodAutoscalerDescriber, DaemonSetDescriber, DeploymentDescriber, JobDescriber, IngressDescriber, JobDescriber, CronJobDescriber, StatefulSetDescriber, CertificateSigningRequestDescriber, StorageClassDescriber, PodDisruptionBudgetDescriber。</p><p>在实现Describer的结构体中，通常会嵌入一个clientset，用来在Describe()中获取具体的Object。比如说下面的ReplicationControllerDescriber。</p><pre class=" language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token punctuation">(</span>d <span class="token operator">*</span>ReplicationControllerDescriber<span class="token punctuation">)</span> <span class="token function">Describe</span><span class="token punctuation">(</span>namespace<span class="token punctuation">,</span> name <span class="token builtin">string</span><span class="token punctuation">,</span> describerSettings DescriberSettings<span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token builtin">string</span><span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    rc <span class="token operator">:=</span> d<span class="token punctuation">.</span><span class="token function">CoreV1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ReplicationControllers</span><span class="token punctuation">(</span>namespace<span class="token punctuation">)</span>    pc <span class="token operator">:=</span> d<span class="token punctuation">.</span><span class="token function">CoreV1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Pods</span><span class="token punctuation">(</span>namespace<span class="token punctuation">)</span>    controller<span class="token punctuation">,</span> err <span class="token operator">:=</span> rc<span class="token punctuation">.</span><span class="token function">Get</span><span class="token punctuation">(</span>context<span class="token punctuation">.</span><span class="token function">TODO</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> name<span class="token punctuation">,</span> metav1<span class="token punctuation">.</span>GetOptions<span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">""</span><span class="token punctuation">,</span> err    <span class="token punctuation">}</span>    running<span class="token punctuation">,</span> waiting<span class="token punctuation">,</span> succeeded<span class="token punctuation">,</span> failed<span class="token punctuation">,</span> err <span class="token operator">:=</span> <span class="token function">getPodStatusForController</span><span class="token punctuation">(</span>pc<span class="token punctuation">,</span> labels<span class="token punctuation">.</span><span class="token function">SelectorFromSet</span><span class="token punctuation">(</span>controller<span class="token punctuation">.</span>Spec<span class="token punctuation">.</span>Selector<span class="token punctuation">)</span><span class="token punctuation">,</span> controller<span class="token punctuation">.</span>UID<span class="token punctuation">)</span>    <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">""</span><span class="token punctuation">,</span> err    <span class="token punctuation">}</span>    <span class="token keyword">var</span> events <span class="token operator">*</span>corev1<span class="token punctuation">.</span>EventList    <span class="token keyword">if</span> describerSettings<span class="token punctuation">.</span>ShowEvents <span class="token punctuation">{</span>        events<span class="token punctuation">,</span> <span class="token boolean">_</span> <span class="token operator">=</span> d<span class="token punctuation">.</span><span class="token function">CoreV1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Events</span><span class="token punctuation">(</span>namespace<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Search</span><span class="token punctuation">(</span>scheme<span class="token punctuation">.</span>Scheme<span class="token punctuation">,</span> controller<span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token function">describeReplicationController</span><span class="token punctuation">(</span>controller<span class="token punctuation">,</span> events<span class="token punctuation">,</span> running<span class="token punctuation">,</span> waiting<span class="token punctuation">,</span> succeeded<span class="token punctuation">,</span> failed<span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><h4 id="DescriberMap"><a href="#DescriberMap" class="headerlink" title="DescriberMap"></a>DescriberMap</h4><p>DescriberMap中记录了GK和Describer的关系。这里使用GK作为Key，因为GK足以标记一个类型。目前还不支持同名Kind出现在不同的Group(internal除外)中(否则resource无法找到合适的GVK)，所以感觉完全可以仅使用Kind作为Key。</p><pre class=" language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">describerMap</span><span class="token punctuation">(</span>clientConfig <span class="token operator">*</span>rest<span class="token punctuation">.</span>Config<span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token keyword">map</span><span class="token punctuation">[</span>schema<span class="token punctuation">.</span>GroupKind<span class="token punctuation">]</span>ResourceDescriber<span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    c<span class="token punctuation">,</span> err <span class="token operator">:=</span> clientset<span class="token punctuation">.</span><span class="token function">NewForConfig</span><span class="token punctuation">(</span>clientConfig<span class="token punctuation">)</span>    <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> err    <span class="token punctuation">}</span>    m <span class="token operator">:=</span> <span class="token keyword">map</span><span class="token punctuation">[</span>schema<span class="token punctuation">.</span>GroupKind<span class="token punctuation">]</span>ResourceDescriber<span class="token punctuation">{</span>        <span class="token punctuation">{</span>Group<span class="token punctuation">:</span> corev1<span class="token punctuation">.</span>GroupName<span class="token punctuation">,</span> Kind<span class="token punctuation">:</span> <span class="token string">"Pod"</span><span class="token punctuation">}</span><span class="token punctuation">:</span>                                    <span class="token operator">&amp;</span>PodDescriber<span class="token punctuation">{</span>c<span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token punctuation">{</span>Group<span class="token punctuation">:</span> corev1<span class="token punctuation">.</span>GroupName<span class="token punctuation">,</span> Kind<span class="token punctuation">:</span> <span class="token string">"ReplicationController"</span><span class="token punctuation">}</span><span class="token punctuation">:</span>                  <span class="token operator">&amp;</span>ReplicationControllerDescriber<span class="token punctuation">{</span>c<span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token punctuation">{</span>Group<span class="token punctuation">:</span> corev1<span class="token punctuation">.</span>GroupName<span class="token punctuation">,</span> Kind<span class="token punctuation">:</span> <span class="token string">"Secret"</span><span class="token punctuation">}</span><span class="token punctuation">:</span>                                 <span class="token operator">&amp;</span>SecretDescriber<span class="token punctuation">{</span>c<span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token punctuation">{</span>Group<span class="token punctuation">:</span> corev1<span class="token punctuation">.</span>GroupName<span class="token punctuation">,</span> Kind<span class="token punctuation">:</span> <span class="token string">"Service"</span><span class="token punctuation">}</span><span class="token punctuation">:</span>                                <span class="token operator">&amp;</span>ServiceDescriber<span class="token punctuation">{</span>c<span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token punctuation">{</span>Group<span class="token punctuation">:</span> corev1<span class="token punctuation">.</span>GroupName<span class="token punctuation">,</span> Kind<span class="token punctuation">:</span> <span class="token string">"ServiceAccount"</span><span class="token punctuation">}</span><span class="token punctuation">:</span>                         <span class="token operator">&amp;</span>ServiceAccountDescriber<span class="token punctuation">{</span>c<span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token punctuation">{</span>Group<span class="token punctuation">:</span> corev1<span class="token punctuation">.</span>GroupName<span class="token punctuation">,</span> Kind<span class="token punctuation">:</span> <span class="token string">"Node"</span><span class="token punctuation">}</span><span class="token punctuation">:</span>                                   <span class="token operator">&amp;</span>NodeDescriber<span class="token punctuation">{</span>c<span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token punctuation">{</span>Group<span class="token punctuation">:</span> corev1<span class="token punctuation">.</span>GroupName<span class="token punctuation">,</span> Kind<span class="token punctuation">:</span> <span class="token string">"LimitRange"</span><span class="token punctuation">}</span><span class="token punctuation">:</span>                             <span class="token operator">&amp;</span>LimitRangeDescriber<span class="token punctuation">{</span>c<span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token punctuation">{</span>Group<span class="token punctuation">:</span> corev1<span class="token punctuation">.</span>GroupName<span class="token punctuation">,</span> Kind<span class="token punctuation">:</span> <span class="token string">"ResourceQuota"</span><span class="token punctuation">}</span><span class="token punctuation">:</span>                          <span class="token operator">&amp;</span>ResourceQuotaDescriber<span class="token punctuation">{</span>c<span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token punctuation">{</span>Group<span class="token punctuation">:</span> corev1<span class="token punctuation">.</span>GroupName<span class="token punctuation">,</span> Kind<span class="token punctuation">:</span> <span class="token string">"PersistentVolume"</span><span class="token punctuation">}</span><span class="token punctuation">:</span>                       <span class="token operator">&amp;</span>PersistentVolumeDescriber<span class="token punctuation">{</span>c<span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token punctuation">{</span>Group<span class="token punctuation">:</span> corev1<span class="token punctuation">.</span>GroupName<span class="token punctuation">,</span> Kind<span class="token punctuation">:</span> <span class="token string">"PersistentVolumeClaim"</span><span class="token punctuation">}</span><span class="token punctuation">:</span>                  <span class="token operator">&amp;</span>PersistentVolumeClaimDescriber<span class="token punctuation">{</span>c<span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token punctuation">{</span>Group<span class="token punctuation">:</span> corev1<span class="token punctuation">.</span>GroupName<span class="token punctuation">,</span> Kind<span class="token punctuation">:</span> <span class="token string">"Namespace"</span><span class="token punctuation">}</span><span class="token punctuation">:</span>                              <span class="token operator">&amp;</span>NamespaceDescriber<span class="token punctuation">{</span>c<span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token punctuation">{</span>Group<span class="token punctuation">:</span> corev1<span class="token punctuation">.</span>GroupName<span class="token punctuation">,</span> Kind<span class="token punctuation">:</span> <span class="token string">"Endpoints"</span><span class="token punctuation">}</span><span class="token punctuation">:</span>                              <span class="token operator">&amp;</span>EndpointsDescriber<span class="token punctuation">{</span>c<span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token punctuation">{</span>Group<span class="token punctuation">:</span> corev1<span class="token punctuation">.</span>GroupName<span class="token punctuation">,</span> Kind<span class="token punctuation">:</span> <span class="token string">"ConfigMap"</span><span class="token punctuation">}</span><span class="token punctuation">:</span>                              <span class="token operator">&amp;</span>ConfigMapDescriber<span class="token punctuation">{</span>c<span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token punctuation">{</span>Group<span class="token punctuation">:</span> corev1<span class="token punctuation">.</span>GroupName<span class="token punctuation">,</span> Kind<span class="token punctuation">:</span> <span class="token string">"PriorityClass"</span><span class="token punctuation">}</span><span class="token punctuation">:</span>                          <span class="token operator">&amp;</span>PriorityClassDescriber<span class="token punctuation">{</span>c<span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token punctuation">{</span>Group<span class="token punctuation">:</span> discoveryv1beta1<span class="token punctuation">.</span>GroupName<span class="token punctuation">,</span> Kind<span class="token punctuation">:</span> <span class="token string">"EndpointSlice"</span><span class="token punctuation">}</span><span class="token punctuation">:</span>                <span class="token operator">&amp;</span>EndpointSliceDescriber<span class="token punctuation">{</span>c<span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token punctuation">{</span>Group<span class="token punctuation">:</span> extensionsv1beta1<span class="token punctuation">.</span>GroupName<span class="token punctuation">,</span> Kind<span class="token punctuation">:</span> <span class="token string">"ReplicaSet"</span><span class="token punctuation">}</span><span class="token punctuation">:</span>                  <span class="token operator">&amp;</span>ReplicaSetDescriber<span class="token punctuation">{</span>c<span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token punctuation">{</span>Group<span class="token punctuation">:</span> extensionsv1beta1<span class="token punctuation">.</span>GroupName<span class="token punctuation">,</span> Kind<span class="token punctuation">:</span> <span class="token string">"NetworkPolicy"</span><span class="token punctuation">}</span><span class="token punctuation">:</span>               <span class="token operator">&amp;</span>NetworkPolicyDescriber<span class="token punctuation">{</span>c<span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token punctuation">{</span>Group<span class="token punctuation">:</span> extensionsv1beta1<span class="token punctuation">.</span>GroupName<span class="token punctuation">,</span> Kind<span class="token punctuation">:</span> <span class="token string">"PodSecurityPolicy"</span><span class="token punctuation">}</span><span class="token punctuation">:</span>           <span class="token operator">&amp;</span>PodSecurityPolicyDescriber<span class="token punctuation">{</span>c<span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token punctuation">{</span>Group<span class="token punctuation">:</span> autoscalingv2beta2<span class="token punctuation">.</span>GroupName<span class="token punctuation">,</span> Kind<span class="token punctuation">:</span> <span class="token string">"HorizontalPodAutoscaler"</span><span class="token punctuation">}</span><span class="token punctuation">:</span>    <span class="token operator">&amp;</span>HorizontalPodAutoscalerDescriber<span class="token punctuation">{</span>c<span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token punctuation">{</span>Group<span class="token punctuation">:</span> extensionsv1beta1<span class="token punctuation">.</span>GroupName<span class="token punctuation">,</span> Kind<span class="token punctuation">:</span> <span class="token string">"DaemonSet"</span><span class="token punctuation">}</span><span class="token punctuation">:</span>                   <span class="token operator">&amp;</span>DaemonSetDescriber<span class="token punctuation">{</span>c<span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token punctuation">{</span>Group<span class="token punctuation">:</span> extensionsv1beta1<span class="token punctuation">.</span>GroupName<span class="token punctuation">,</span> Kind<span class="token punctuation">:</span> <span class="token string">"Deployment"</span><span class="token punctuation">}</span><span class="token punctuation">:</span>                  <span class="token operator">&amp;</span>DeploymentDescriber<span class="token punctuation">{</span>c<span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token punctuation">{</span>Group<span class="token punctuation">:</span> extensionsv1beta1<span class="token punctuation">.</span>GroupName<span class="token punctuation">,</span> Kind<span class="token punctuation">:</span> <span class="token string">"Ingress"</span><span class="token punctuation">}</span><span class="token punctuation">:</span>                     <span class="token operator">&amp;</span>IngressDescriber<span class="token punctuation">{</span>c<span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token punctuation">{</span>Group<span class="token punctuation">:</span> networkingv1beta1<span class="token punctuation">.</span>GroupName<span class="token punctuation">,</span> Kind<span class="token punctuation">:</span> <span class="token string">"Ingress"</span><span class="token punctuation">}</span><span class="token punctuation">:</span>                     <span class="token operator">&amp;</span>IngressDescriber<span class="token punctuation">{</span>c<span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token punctuation">{</span>Group<span class="token punctuation">:</span> networkingv1beta1<span class="token punctuation">.</span>GroupName<span class="token punctuation">,</span> Kind<span class="token punctuation">:</span> <span class="token string">"IngressClass"</span><span class="token punctuation">}</span><span class="token punctuation">:</span>                <span class="token operator">&amp;</span>IngressClassDescriber<span class="token punctuation">{</span>c<span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token punctuation">{</span>Group<span class="token punctuation">:</span> batchv1<span class="token punctuation">.</span>GroupName<span class="token punctuation">,</span> Kind<span class="token punctuation">:</span> <span class="token string">"Job"</span><span class="token punctuation">}</span><span class="token punctuation">:</span>                                   <span class="token operator">&amp;</span>JobDescriber<span class="token punctuation">{</span>c<span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token punctuation">{</span>Group<span class="token punctuation">:</span> batchv1<span class="token punctuation">.</span>GroupName<span class="token punctuation">,</span> Kind<span class="token punctuation">:</span> <span class="token string">"CronJob"</span><span class="token punctuation">}</span><span class="token punctuation">:</span>                               <span class="token operator">&amp;</span>CronJobDescriber<span class="token punctuation">{</span>c<span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token punctuation">{</span>Group<span class="token punctuation">:</span> appsv1<span class="token punctuation">.</span>GroupName<span class="token punctuation">,</span> Kind<span class="token punctuation">:</span> <span class="token string">"StatefulSet"</span><span class="token punctuation">}</span><span class="token punctuation">:</span>                            <span class="token operator">&amp;</span>StatefulSetDescriber<span class="token punctuation">{</span>c<span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token punctuation">{</span>Group<span class="token punctuation">:</span> appsv1<span class="token punctuation">.</span>GroupName<span class="token punctuation">,</span> Kind<span class="token punctuation">:</span> <span class="token string">"Deployment"</span><span class="token punctuation">}</span><span class="token punctuation">:</span>                             <span class="token operator">&amp;</span>DeploymentDescriber<span class="token punctuation">{</span>c<span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token punctuation">{</span>Group<span class="token punctuation">:</span> appsv1<span class="token punctuation">.</span>GroupName<span class="token punctuation">,</span> Kind<span class="token punctuation">:</span> <span class="token string">"DaemonSet"</span><span class="token punctuation">}</span><span class="token punctuation">:</span>                              <span class="token operator">&amp;</span>DaemonSetDescriber<span class="token punctuation">{</span>c<span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token punctuation">{</span>Group<span class="token punctuation">:</span> appsv1<span class="token punctuation">.</span>GroupName<span class="token punctuation">,</span> Kind<span class="token punctuation">:</span> <span class="token string">"ReplicaSet"</span><span class="token punctuation">}</span><span class="token punctuation">:</span>                             <span class="token operator">&amp;</span>ReplicaSetDescriber<span class="token punctuation">{</span>c<span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token punctuation">{</span>Group<span class="token punctuation">:</span> certificatesv1beta1<span class="token punctuation">.</span>GroupName<span class="token punctuation">,</span> Kind<span class="token punctuation">:</span> <span class="token string">"CertificateSigningRequest"</span><span class="token punctuation">}</span><span class="token punctuation">:</span> <span class="token operator">&amp;</span>CertificateSigningRequestDescriber<span class="token punctuation">{</span>c<span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token punctuation">{</span>Group<span class="token punctuation">:</span> storagev1<span class="token punctuation">.</span>GroupName<span class="token punctuation">,</span> Kind<span class="token punctuation">:</span> <span class="token string">"StorageClass"</span><span class="token punctuation">}</span><span class="token punctuation">:</span>                        <span class="token operator">&amp;</span>StorageClassDescriber<span class="token punctuation">{</span>c<span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token punctuation">{</span>Group<span class="token punctuation">:</span> storagev1<span class="token punctuation">.</span>GroupName<span class="token punctuation">,</span> Kind<span class="token punctuation">:</span> <span class="token string">"CSINode"</span><span class="token punctuation">}</span><span class="token punctuation">:</span>                             <span class="token operator">&amp;</span>CSINodeDescriber<span class="token punctuation">{</span>c<span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token punctuation">{</span>Group<span class="token punctuation">:</span> policyv1beta1<span class="token punctuation">.</span>GroupName<span class="token punctuation">,</span> Kind<span class="token punctuation">:</span> <span class="token string">"PodDisruptionBudget"</span><span class="token punctuation">}</span><span class="token punctuation">:</span>             <span class="token operator">&amp;</span>PodDisruptionBudgetDescriber<span class="token punctuation">{</span>c<span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token punctuation">{</span>Group<span class="token punctuation">:</span> rbacv1<span class="token punctuation">.</span>GroupName<span class="token punctuation">,</span> Kind<span class="token punctuation">:</span> <span class="token string">"Role"</span><span class="token punctuation">}</span><span class="token punctuation">:</span>                                   <span class="token operator">&amp;</span>RoleDescriber<span class="token punctuation">{</span>c<span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token punctuation">{</span>Group<span class="token punctuation">:</span> rbacv1<span class="token punctuation">.</span>GroupName<span class="token punctuation">,</span> Kind<span class="token punctuation">:</span> <span class="token string">"ClusterRole"</span><span class="token punctuation">}</span><span class="token punctuation">:</span>                            <span class="token operator">&amp;</span>ClusterRoleDescriber<span class="token punctuation">{</span>c<span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token punctuation">{</span>Group<span class="token punctuation">:</span> rbacv1<span class="token punctuation">.</span>GroupName<span class="token punctuation">,</span> Kind<span class="token punctuation">:</span> <span class="token string">"RoleBinding"</span><span class="token punctuation">}</span><span class="token punctuation">:</span>                            <span class="token operator">&amp;</span>RoleBindingDescriber<span class="token punctuation">{</span>c<span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token punctuation">{</span>Group<span class="token punctuation">:</span> rbacv1<span class="token punctuation">.</span>GroupName<span class="token punctuation">,</span> Kind<span class="token punctuation">:</span> <span class="token string">"ClusterRoleBinding"</span><span class="token punctuation">}</span><span class="token punctuation">:</span>                     <span class="token operator">&amp;</span>ClusterRoleBindingDescriber<span class="token punctuation">{</span>c<span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token punctuation">{</span>Group<span class="token punctuation">:</span> networkingv1<span class="token punctuation">.</span>GroupName<span class="token punctuation">,</span> Kind<span class="token punctuation">:</span> <span class="token string">"NetworkPolicy"</span><span class="token punctuation">}</span><span class="token punctuation">:</span>                    <span class="token operator">&amp;</span>NetworkPolicyDescriber<span class="token punctuation">{</span>c<span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token punctuation">{</span>Group<span class="token punctuation">:</span> schedulingv1<span class="token punctuation">.</span>GroupName<span class="token punctuation">,</span> Kind<span class="token punctuation">:</span> <span class="token string">"PriorityClass"</span><span class="token punctuation">}</span><span class="token punctuation">:</span>                    <span class="token operator">&amp;</span>PriorityClassDescriber<span class="token punctuation">{</span>c<span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> m<span class="token punctuation">,</span> <span class="token boolean">nil</span><span class="token punctuation">}</span></code></pre><p>所以来看来<code>/pkg/kubectl/describe.go</code>中的DescriberFor()函数：</p><pre><code>// 返回合适的describerfunc DescriberFor(kind schema.GroupKind, clientConfig *rest.Config) (ResourceDescriber, bool) {    describers, err := describerMap(clientConfig)    if err != nil {        klog.V(1).Info(err)        return nil, false    }    f, ok := describers[kind]    return f, ok}</code></pre><p>函数的实现很简单，先调用describerMap()生成DescriberMap，然后找到对应kind的Describer。</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Kubernetes </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Kubernetes </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>深入理解 Kubernetes 概述</title>
      <link href="/2020/05/21/k8s01/"/>
      <url>/2020/05/21/k8s01/</url>
      
        <content type="html"><![CDATA[<h1 id="Kubernetes-架构设计"><a href="#Kubernetes-架构设计" class="headerlink" title="Kubernetes 架构设计"></a>Kubernetes 架构设计</h1><p><img src="/images/2020/Kubernetes-architecture.png" alt=""></p><h2 id="Kubernetes-流程"><a href="#Kubernetes-流程" class="headerlink" title="Kubernetes 流程"></a>Kubernetes 流程</h2><p><img src="/images/2020/what-happens-when-k8s.png" alt=""></p><h2 id="Kubernetes-核心组件"><a href="#Kubernetes-核心组件" class="headerlink" title="Kubernetes 核心组件"></a>Kubernetes 核心组件</h2><h3 id="Kubectl"><a href="#Kubectl" class="headerlink" title="Kubectl"></a>Kubectl</h3><p>kubectl 是用户与 Kubernetes 交互的命令行工具。用户使用 kubectl 工具调用 Apiserver 的接口来与 Kubernetes服务进行交互。</p><p>更多 kubectl 信息请参考：<a href="k8s2.md">深入理解 Kubernetes 之 Kubectl</a></p><h3 id="Kube-API-server"><a href="#Kube-API-server" class="headerlink" title="Kube API server"></a>Kube API server</h3><p>Kubernetes API server 为 api 对象验证并配置数据，包括 pods、 services、 replicationcontrollers 和其它 api 对象。API Server 提供 REST 操作和到集群共享状态的前端，所有其他组件通过它进行交互，是整个系统的数据总线和数据中心。</p><p>Kubernetes 中的其它组件都不会和 etcd 进行交互，只有 API Server 可以和 etcd 进行交互,API Server  具有如下功能：</p><ul><li>整个集群管理的 API 接口：所有对集群进行的查询和管理都是通过 API 进行</li><li>集群内部各个模块之间通信的枢纽：所有模块之间并不会互相调用，而是通过和 API Serve r打交道完成这部分的工作</li><li>集群的安全控制: API Server 提供的验证和授权和访问控制保证了整个集群的安全</li></ul><p>更多 Kube API server 信息请参考：<a href="k8s3.md">深入理解 Kubernetes 之 Kube API server</a></p><h3 id="Controller-manager"><a href="#Controller-manager" class="headerlink" title="Controller manager"></a>Controller manager</h3><p>Controller Manager 就是集群内部的管理控制中心，由负责不同资源的多个 Controller 构成，共同负责集群内的 Node、Pod 等所有资源的管理，比如当通过 Deployment 创建的某个 Pod 发生异常退出时，RS Controller 便会接受并处理该退出事件，并创建新的 Pod 来维持预期副本数。</p><p>几乎每种特定资源都有特定的 Controller 维护管理以保持预期状态，而 Controller Manager 的职责便是把所有的 Controller 聚合起来：</p><ol><li>提供基础设施降低 Controller 的实现复杂度</li><li>启动和维持 Controller 的正常运行</li></ol><p>可以这么说，Controller 保证集群内的资源保持预期状态，而 Controller Manager 保证了 Controller 保持在预期状态。</p><p>更多 Controller manager 信息请参考：<a href="k8s4.md">深入理解 Kubernetes 之 Controller manager</a></p><h3 id="Scheduler"><a href="#Scheduler" class="headerlink" title="Scheduler"></a>Scheduler</h3><p>调度是 Kubernetes 集群中进行容器编排工作最重要的一环，在 Kubernetes中，Controller manager 负责创建Pod，Kubelet 负责执行 Pod，而 Scheduler 就是负责安排 Pod 到具体的 Node，它通过 API Server 提供的接口监听 Pod 任务列表，获取待调度 pod，然后根据一系列的预选策略和优选策略给各个 Node 节点打分，然后将Pod 发送到得分最高的 Node 节点上，由 kubelet 负责执行具体的任务内容。</p><p>更多 Scheduler  信息请参考：<a href="k8s5.md">深入理解 Kubernetes 之 Scheduler </a></p><h3 id="Kubelet"><a href="#Kubelet" class="headerlink" title="Kubelet"></a>Kubelet</h3><p>每个Node都会启动一个kubelet，主要作用有：</p><ul><li><p>Node管理</p><ul><li><p>注册节点信息；</p></li><li><p>通过 cAdvisor 监控容器和节点的资源；</p></li><li><p>定期向 API server 汇报本节点资源消耗情况</p></li></ul></li><li><p>Pod管理</p></li><li><p>所有非通过 API server 方式创建的 Pod 叫 Static Pod，这里我们讨论的都是通过 API server 创建的普通Pod。kubelet 通过 API server 监听 etcd，所有针对 Pod 的操作都会被监听到，如果其中有涉及到本节点的 Pod，则按照要求进行创建、修改、删除等操作。</p></li><li><p>容器健康检查</p><p>kubelet通过两类探针检查容器的状态：</p><ul><li><p>LivenessProbe：判断一个容器是否健康，如果不健康则会删除这个容器，并按照 restartPolicy 看是否重启这个容器。实现的方式有 ExecAction（在容器内部执行一个命令）、TCPSocketAction（如果端口可以被访问，则健康）、HttpGetAction（如果返回200则健康）。</p></li><li><p>ReadinessProbe：用于判断容器是否启动完全。如果返回的是失败，则 Endpoint Controller 会将这个Pod 的 Endpoint从Service 的 Endpoint 列表中删除。也就是，不会有请求转发给它。</p></li></ul></li></ul><p>更多 Kubelet信息请参考：<a href="k8s6.md">深入理解 Kubernetes 之 Kubelet</a></p><h3 id="Kube-proxy"><a href="#Kube-proxy" class="headerlink" title="Kube proxy"></a>Kube proxy</h3><p>每个 Node 上都运行着一个 kube-proxy 进程，它在本地建立一个 SocketServer 接收和转发请求，可以看作是Service 的透明代理和负载均衡器，负载均衡策略模式是 Round Robin。也可以设置会话保持，策略使用的是 ClientIP，将同一个 ClientIP 的请求转发同一个 Endpoint 上。</p><p>Service 的 Cluster IP 和 NodePort 等概念都是 kube-proxy 服务通过 iptables 的 NAT 转换实现，iptables 机制针对的是 kube-proxy 监听的端口，所以每个 Node 上都要有 kube-proxy。</p><p>更多 Kube proxy 信息请参考：<a href="k8s7.md">深入理解 Kubernetes 之 Kube proxy</a></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Kubernetes </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Kubernetes </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>深入理解 Libra</title>
      <link href="/2020/05/20/libra/"/>
      <url>/2020/05/20/libra/</url>
      
        <content type="html"><![CDATA[<h3 id="1-共识"><a href="#1-共识" class="headerlink" title="1. 共识"></a>1. 共识</h3><p>区块链技术中，共识算法是其中核心的一个组成部分。它包含两层含义：</p><ol><li>多个节点对某个数据达成一致共识。</li><li>多个节点对多个数据的顺序达成一致共识。</li></ol><p>共识算法主要用在以下三种场景：</p><ul><li>私链<ul><li>私链的共识算法即传统分布式系统里的共识算法，比如 zookeeper 的 zab 协议，就是类 paxos 算法的一种。私链一般不考虑集群中存在作恶节点，只考虑因为系统或者网络原因导致的故障节点。</li></ul></li><li>联盟链<ul><li>联盟链代表项目是 Fabric，它使用的就是 PBFT(实用拜占庭) 算法。联盟链除了需要考虑集群中存在故障节点，还需要考虑集群中存在作恶节点。对于联盟链，每个新加入的节点都是需要验证和审核。</li></ul></li><li>公链<ul><li>公链不仅需要考虑网络中存在故障节点，还需要考虑作恶节点，这一点和联盟链是类似的。和联盟链最大的区别就是，公链中的节点可以很自由的加入或者退出，不需要严格的验证和审核。</li></ul></li></ul><h3 id="2-通讯模型"><a href="#2-通讯模型" class="headerlink" title="2. 通讯模型"></a>2. 通讯模型</h3><p>分布式系统首先要明确其前置的<code>通讯模型</code>（也称为<code>时间模型</code>）的约定。比较常见的有<strong>同步网络模型</strong>、<strong>异步网络模型</strong>和<strong>部分同步网络模型</strong>。</p><h4 id="2-1-同步网络模型"><a href="#2-1-同步网络模型" class="headerlink" title="2.1 同步网络模型"></a><strong>2.1 同步网络模型</strong></h4><p>节点所发出的消息，在一个确定的时间内，肯定会到达目标节点。</p><p>在同步网络模型中：</p><ol><li>进程间的消息通讯、传输延时有界。认为通讯耗时是有确定范围的；</li><li>每个进程的处理速度是确定的。我们可以确切知道进程中每步算法的耗时。</li></ol><p>我们可以推导出：</p><ul><li>每个进程间的时钟是同步的，因为前面的定义<strong>1</strong>、<strong>2</strong>，所以我们可以使用通讯来同步各个机器上的时钟，使得各个机器的时钟误差在 ΔT 内。</li><li>如果一个请求的应答超过 RTT+ ΔT 请求处理耗时，则可以判定对端异常。</li></ul><p><code>同步网络模型</code>使用起来最简单，是理想的网络模型，在实际环境中并不存在。</p><h4 id="2-2-异步网络模型"><a href="#2-2-异步网络模型" class="headerlink" title="2.2 异步网络模型"></a><strong>2.2 异步网络模型</strong></h4><p>节点所发出的消息，不能确定一定会到达目标节点。</p><p>在<code>异步网络模型</code>中，我们引用 <strong>FLP 不可能性</strong>[^6]中的定义：</p><ol><li>进程间的消息通讯、传输延时没有上界；</li><li>每个进程的处理速度是不确定的；</li><li>每个机器上没有同步时钟（即不存在原子钟这种东西），时间流逝速度可能也不同。</li></ol><p>因此我们可以推导出：</p><ul><li>各个机器上的时钟没有可参考性，因为根据上面 3 每个机器不能自发保持时间的一致性，并且因为1、2，机器时间也无法同步时钟在一个有界的误差之内。所以依赖超时机制的算法并不可用。</li><li>因为1、2，当一个请求在本地时钟上超时后，我们无法判断这个请求是否是因为对端异常造成的。这是一个经典的<strong>两军问题</strong><a href="https://en.wikipedia.org/wiki/Two_Generals%27_Problem](https://en.wikipedia.org/wiki/Two_Generals' target=" _blank"="" rel="noopener" _problem"="">^1</a>场景，故，我们无法对其他实例进行故障探测。</li></ul><p>从定义中 3，我们引出两个概念，但是这两个概念原本是集成电路[^7][^8]中的概念，但是我们在分布式系统中重新扩展一下：</p><ul><li><code>clock drift(时钟漂移)</code>：相关节点上的时钟以不同的速率运行。在 P1 节点上经过 ΔT1 的同时，P2 节点经过了ΔT2，但是 ΔT1≠ΔT2。</li><li><code>clock skew(时钟偏移)</code>：相关节点都引用了同一个时间源（比如通过 NTP 服务），但是由于这个时间源将授时信号同步不同节点时的耗时不同（比如网络传输耗时），造成同一时刻不同节点间产生了时间差。这是一个比<code>clock drift(时钟漂移)</code>更加严格的要求，因为如果一个系统内部的 TSkew 存在上界TShewMax ，那一定能通过不断的校时、保持时钟同步，使得 TDrift 保持在 TShewMax 以内。</li></ul><p>异步网络模型是一个最理想的<strong>最差</strong>网络模型，但是其复杂度又远超我们实际情形。</p><h4 id="2-3-部分同步网络模型"><a href="#2-3-部分同步网络模型" class="headerlink" title="2.3 部分同步网络模型"></a><strong>2.3 部分同步网络模型</strong></h4><p>节点发出的消息，虽然会有延迟，但是最终会到达目标节点。</p><p>我们现实中遇见的网络模型通常介于同步网络模型和异步网络模型两者之间。因为在我们所知的大部分系统，在大部分时间内：</p><ul><li>进程间的消息通讯、传输延时是有上界的；只有在网络过载、网络分区故障时，才没有上界；</li><li>每个进程的处理速度是确定的；只有在发生 GC 、磁盘 IO 阻塞等异常情况时，每个进程的处理速度才不可确定。</li><li>每个机器上的时钟我们可以认为是基本同步的，比如我们可以使用 NTP[^9]来同步机器时间，而且多数机器上有独立的时钟芯片[^10]，我们也可以粗略认为各个机器上时间流逝的速度是相同的。但是严格要求时序的系统除外。</li></ul><h3 id="3-Raft-算法"><a href="#3-Raft-算法" class="headerlink" title="3. Raft 算法"></a>3. Raft 算法</h3><p>raft 中节点有三种状态：</p><ul><li>Follower （跟随者）  被动的只是响应来自领导者和候选人的请求 </li><li>Candidate （候选人）被选出一个新的Leader </li><li>Leader（领导者）  处理所有来自客户端的请求</li></ul><p>集群中的一个节点在某一时刻只能是这三种状态的其中一种，这三种状态是可以随着时间和条件的变化而互相转换的。</p><p>raft 算法主要有两个过程：</p><ul><li>领导者选举</li><li>日志复制<ul><li>记录日志</li><li>提交数据 </li></ul></li></ul><p>raft 算法支持最大的容错故障节点 (n-1)/2，其中 n 为集群中总的节点数量。</p><blockquote><p>raft 算法只支持容错故障节点，假设集群总节点数为 n，故障节点为 f，根据小数服从多数的原则，集群里正常节点只需要比 f 个节点再多一个节点，即 f+1个节点，正确节点的数量就会比故障节点数量多，那么集群就能达成共识。因此 raft 算法支持的最大容错节点数量是 (n-1)/2。</p></blockquote><p>可参考<a href="http://thesecretlivesofdata.com/raft/" target="_blank" rel="noopener">动画</a>理解</p><h4 id="3-1-算法复杂度"><a href="#3-1-算法复杂度" class="headerlink" title="3.1 算法复杂度"></a>3.1 算法复杂度</h4><p>Raft 算法核心是日志复制这个过程，这个过程分两个阶段：一个是日志记录，一个是提交数据。两个过程都只需要领导者发送消息给跟随者节点，跟随者节点返回消息给领导者节点即可完成，跟随者节点之间是无需沟通的。所以如果集群总节点数为 n，对于日志记录阶段，通信次数为 n-1，对于提交数据阶段，通信次数也为 n-1，总通信次数为 2n-2，因此 raft 算法复杂度为O(n)。</p><h3 id="4-两军问题"><a href="#4-两军问题" class="headerlink" title="4. 两军问题"></a>4. 两军问题</h3><p>两军问题<a href="https://en.wikipedia.org/wiki/Two_Generals%27_Problem](https://en.wikipedia.org/wiki/Two_Generals' target=" _blank"="" rel="noopener" _problem"="">^1</a>，又称为“两军悖论”，是计算机通信领域的一个思想实验，主要用来描述在一个不可靠的通信链上试图通过通信达成一致是存在缺陷与困难的，适用于任何可能通信失败情况下的两点通信，两军问题被证明无解。如果通信信道是可靠的，我们只需三次握手就可以解决问题，你将消息发给战友，战友确认回复，你再确认收到回复，经过这三次握手，基本就可以发起进攻，但是两军问题面临的通信通道是不可靠的，无论多少次握手也无法保证最后一次通信准确送达，最后一次通信的发送方就会一直面临着冒着失败风险的行动。</p><h3 id="5-拜占庭将军问题"><a href="#5-拜占庭将军问题" class="headerlink" title="5. 拜占庭将军问题"></a>5. 拜占庭将军问题</h3><p>拜占庭将军问题是一个共识问题: 首先由 Leslie Lamport 与另外两人在1982年提出，被称为 The Byzantine Generals Problem<a href="https://dl.acm.org/citation.cfm%3Fid%3D357176" target="_blank" rel="noopener">^2</a>或者 Byzantine Failure。核心描述是军中可能有叛徒，却要保证进攻一致，由此引申到计算领域，发展成了一种容错理论，即拜占庭容错（BFT，Byzantine Fault Tolerance）。简单来说，拜占庭容错（BFT）是能够抵抗拜占庭将军问题导致的一系列失败的系统属性。 这意味着即使某些节点出现故障或恶意行为，拜占庭容错系统也能够继续运行。</p><p>拜占庭将军的问题有多种可能的解决方案，因此，有多种方法可以构建拜占庭容错系统。同样地，区块链有各种不同的方法来实现拜占庭容错，这就是我们说的共识算法。</p><h4 id="5-1-问题描述"><a href="#5-1-问题描述" class="headerlink" title="5.1 问题描述"></a>5.1 问题描述</h4><p>拜占庭帝国想要进攻一个强大的敌人，为此派出了10支军队去包围这个敌人。这个敌人虽不比拜占庭帝国，但也足以抵御5支常规拜占庭军队的同时袭击。基于一些原因，这10支军队不能集合在一起单点突破，必须在分开的包围状态下同时攻击。他们任一支军队单独进攻都毫无胜算，除非有至少6支军队同时袭击才能攻下敌国。他们分散在敌国的四周，依靠通信兵相互通信来协商进攻意向及进攻时间。困扰这些将军的问题是，他们不确定他们中是否有叛徒，叛徒可能擅自变更进攻意向或者进攻时间。在这种状态下，拜占庭将军们能否找到一种分布式的协议来让他们能够远程协商，从而赢取战斗？这就是著名的拜占庭将军问题。</p><p>需要明确，拜占庭将军问题中并不去考虑通信兵是否会被截获或无法传达信息等问题，即消息传递的信道绝无问。</p><p>Lamport已经证明了<strong>在消息可能丢失的不可靠信道上试图通过消息传递的方式达到一致性是不可能的</strong>。所以，在研究拜占庭将军问题的时候，我们已经假定了信道是没有问题的，并在这个前提下，去做一致性和容错性相关研究。如果需要考虑信道是有问题的，这涉及到了另一个相关问题：<strong>两军问题</strong>。</p><p>拜占庭失效指一方向另一方发送消息，另一方没有收到，或者收到了错误的信息的情形。在容错的分布式计算中，拜占庭失效可以是分布式系统中算法执行过程中的任意一个错误。</p><p>Lamport提出并论证了口头算法和书面算法两种解决方法。</p><h4 id="5-2-口头协议"><a href="#5-2-口头协议" class="headerlink" title="5.2 口头协议"></a>5.2 口头协议</h4><p>首先，我们明确什么是口头协议。我们将满足以下三个条件的方式称为口头协议：</p><pre><code> (1) 每个被发送的消息都能够被正确的投递 (2) 信息接收者知道是谁发送的消息 (3) 能够知道缺少的消息</code></pre><p>简而言之，信道绝对可信，且消息来源可知。但要注意的是，口头协议并不会告知消息的上一个来源是谁。</p><p>Lamport 论证得出结论：采用口头协议，若叛徒数少于 1/3，则拜占庭将军问题可解。也就是说，若叛徒数为m，当将军总数n至少为 3m+1 时，问题可解。</p><h4 id="5-3-书面协议"><a href="#5-3-书面协议" class="headerlink" title="5.3 书面协议"></a>5.3 书面协议</h4><p>揭示了口头协议的缺点是消息不能追本溯源，这使得口头协议必须在四模冗余的情况下才能保证正确。由此引入了书面协议。</p><p>在口头协议的三个条件之上，再添加一个条件，使之成为书面协议。</p><pre><code> （a）签名不可伪造，一旦被篡改即可发现，而叛徒的签名可被其他叛徒伪造； （b）任何人都可以验证签名的可靠性。  </code></pre><p>可以论证：对于任意m，最多只有m个背叛者情况下，算法SM(m)能解决拜占庭将军问题。</p><p>书面协议的本质就是引入了签名系统，这使得所有消息都可追本溯源。这一优势，大大节省了成本，他化解了口头协议中1/3要求，只要采用了书面协议，忠诚的将军就可以达到一致。</p><h3 id="6-实用拜占庭容错（PBFT）"><a href="#6-实用拜占庭容错（PBFT）" class="headerlink" title="6. 实用拜占庭容错（PBFT）"></a>6. 实用拜占庭容错（PBFT）</h3><p>实用拜占庭容错协议<a href="http://pmg.csail.mit.edu/papers/osdi99.pdf" target="_blank" rel="noopener">^3</a>（PBFT，Practical Byzantine Fault Tolerance）是Miguel Castro (卡斯特罗)和Barbara Liskov（利斯科夫）在1999年提出来的，解决了原始拜占庭容错算法效率不高的问题，将算法复杂度由指数级降低到多项式级，使得拜占庭容错算法在实际系统应用中变得可行。</p><p>PBFT 是一个具有二轮投票的三阶段协议，每个视图(View)都会有一个特定的节点作为领导节点(Primary/Leader)，负责通知所有节点进入投票流程。各节点则会经历 Pre-prepare/Prepare/Commit 这三个阶段，并依据接收的讯息决定是否投票/进入下一阶段，每个节点投完票后将讯息发给所有其他的节点。</p><p>若个节点在两阶段投票之后取得多数共识，则各节点可以更新本机的状态，结束这一回合。视图变换(view change)仅当多数节点发起时执行，当目前的领导节点并未正常执行任务时，这可以替换当前的领导节点，保证协议正常运作。</p><p>PBFT 是一种状态机副本复制算法，即服务作为状态机进行建模，状态机在分布式系统的不同节点进行副本复制。每个状态机的副本都保存了服务的状态，同时也实现了服务的操作。将所有的副本组成的集合使用大写字母 R 表示，使用 0 到 R 减1的整数表示每一个副本。为了描述方便，假设 R=3f+1，这里 f 是有可能失效的副本的最大个数。尽管可以存在多于 3f+1 个副本，但是额外的副本除了降低性能之外不能提高可靠性。</p><p>主节点由公式<code>p = v mod R</code>计算得到，这里 v 是视图编号，p 是副本编号，R 是副本集合的个数。当主节点失效的时候就需要启动视图更换（view change）过程。Viewstamped Replication 算法和 Paxos 算法就是使用类似方法解决良性容错的。</p><p>每个副本节点的状态都包含了服务的整体状态，副本节点上的<strong>消息日志(message log)</strong>包含了该副本节点<strong>接受(accepted)</strong>的消息，并且使用一个整数表示副本节点的当前视图编号。</p><blockquote><p>为什么节点数需要大于 3f+1 </p><p>因为最坏的情况是：f 个节点是有问题的，由于到达顺序的问题，有可能 f 个有问题的节点比正常的 f 个节点先返回消息，又要保证收到的正常的节点比有问题的节点多，所以需要满足n-f-f&gt;f =&gt; n&gt;3f，所以至少3f+1个节点。</p><img src="/images/2019/pbft_1.png"></blockquote><h4 id="6-1-系统模型"><a href="#6-1-系统模型" class="headerlink" title="6.1 系统模型"></a>6.1 系统模型</h4><p>一组节点构成状态机复制系统，一个节点作为主节点（privary），其他节点作为备份节点(back-ups)。某个节点作为主节点时，这称为系统的一个 view。当节点出了问题，就进行 view 更新，切换到下一个节点担任主节点。主节点更替不需要选举过程，而是采用 round-robin 方式。</p><p>在系统的主节点接收 client 发来的请求，并产生 pre-prepare 消息，进入共识流程。</p><p>我们需要系统满足如下两个条件：</p><ul><li>在一个给定状态上的操作， 产生一样的执行结果</li><li>每个节点都有一样的起始状态</li></ul><p>要保证 non-fault 节点对于执行请求的<strong>全局顺序</strong>达成一致。</p><h4 id="6-2-安全性-safety-活性-liveness"><a href="#6-2-安全性-safety-活性-liveness" class="headerlink" title="6.2 安全性(safety) / 活性(liveness)"></a>6.2 安全性(safety) / 活性(liveness)</h4><ul><li><strong>safety</strong>: 坏的事情不会发生，即共识系统不能产生错误的结果，比如一部分节点说yes，另一部分说no。在区块链的语义下，指的是不会分叉。</li><li><strong>liveness</strong>: 好的事情一定会发生，即系统一直有回应，在区块链的语义下，指的是共识会持续进行，不会卡住。假如一个区块链系统的共识卡在了某个高度，那么新的交易是没有回应的，也就是不满 liveness。</li></ul><h4 id="6-3-PBFT算法的步骤"><a href="#6-3-PBFT算法的步骤" class="headerlink" title="6.3 PBFT算法的步骤"></a>6.3 PBFT算法的步骤</h4><ol><li>取一个节点作为主节点，其他的节点作为备份；</li><li>客户端向主节点发送使用服务操作的请求；</li><li>主节点通过广播将请求发送给其他节点；</li><li>所有节点执行请求并将结果发回客户端；</li><li>客户端需要等待 f+1 个不同节点发回相同的结果，作为整个操作的最终结果。</li></ol><p>同所有的状态机副本复制技术一样，PBFT 对每个节点提出了两个限定条件：</p><ol><li>所有节点必须是确定性的。也就是说，在给定状态和参数相同的情况下，操作执行的结果必须相同；</li><li>所有节点必须从相同的状态开始执行。</li></ol><p>这两个限定条件下，即使失效的节点存在，PBFT 算法对所有非失效节点的请求执行总顺序达成一致，从而保证安全性。</p><pre class=" language-假设节点总数为3f+1，f为拜赞庭错误节点："><code class="language-假设节点总数为3f+1，f为拜赞庭错误节点：">1. 当节点发现 leader 作恶时，通过算法选举其他的 replica 为 leader。2. leader 通过 pre-prepare 消息把它选择的 value 广播给其他 replica 节点，其他的 replica 节点如果接受则发送 prepare，如果失败则不发送。3. 一旦2f个节点接受 prepare 消息，则节点发送 commit 消息。4. 当2f+1个节点接受 commit 消息后，代表该 value 值被确定。</code></pre><p>如下图表示了4个节点，0为leader，同时节点3为fault节点，该节点不响应和发出任何消息，C为客户端。最终节点状态达到commited时，表示该轮共识成功达成。</p><img src="/images/2019/pbft.png"><h4 id="6-4-客户端C"><a href="#6-4-客户端C" class="headerlink" title="6.4 客户端C"></a>6.4 客户端C</h4><p>客户端c向主节点发送<code>&lt;REQUEST,o,t,c&gt;</code>请求执行状态机操作o，这里时间戳t用来保证客户端请求只会执行一次。客户端c发出请求的时间戳是全序排列的，后续发出的请求比早先发出的请求拥有更高的时间戳。例如，请求发起时的本地时钟值可以作为时间戳。</p><p>每个由副本节点发给客户端的消息都包含了当前的视图编号，使得客户端能够跟踪视图编号，从而进一步推算出当前主节点的编号。客户端通过点对点消息向它自己认为的主节点发送请求，然后主节点自动将该请求向所有备份节点进行广播。</p><p>副本发给客户端的响应为<code>&lt;REPLY,v,t,c,i,r&gt;</code>，v是视图编号，t是时间戳，i是副本的编号，r是请求执行的结果。</p><p>客户端等待f+1个从不同副本得到的同样响应，同样响应需要保证签名正确，并且具有同样的时间戳t和执行结果r。这样客户端才能把r作为正确的执行结果，因为失效的副本节点不超过f个，所以f+1个副本的一致响应必定能够保证结果是正确有效的。</p><p>如果客户端没有在有限时间内收到回复，请求将向所有副本节点进行广播。如果请求已经在副本节点处理过了，副本就向客户端重发一遍执行结果。如果请求没有在副本节点处理过，该副本节点将把请求转发给主节点。如果主节点没有将该请求进行广播，那么就有认为主节点失效，如果有足够多的副本节点认为主节点失效，则会触发一次视图变更。</p><p>本文假设客户端会等待上一个请求完成才会发起下一个请求，但是只要能够保证请求顺序，可以允许请求是异步的。</p><h4 id="6-5-预准备-pre-prepare"><a href="#6-5-预准备-pre-prepare" class="headerlink" title="6.5 预准备(pre-prepare)"></a>6.5 预准备(pre-prepare)</h4><p>在预准备阶段，主节点分配一个序列号 n 给收到的请求，然后向所有节点群发预准备消息，预准备消息的格式为<code>&lt;&lt;PRE-PREPARE,v,n,d&gt;,m&gt;</code>，这里 v 是视图编号，m 是客户端发送的请求消息，d 是请求消息 m 的摘要。</p><p>请求本身是不包含在预准备的消息里面的，这样就能使预准备消息足够小，因为<strong>预准备消息的目的是作为一种证明，确定该请求是在视图 v 中被赋予了序号n，从而在视图变更的过程中可以追索</strong>。另外一个层面，将“请求排序协议”和“请求传输协议”进行解耦，有利于对消息传输的效率进行深度优化。</p><p>只有满足以下条件，各个备份节点才会接受一个预准备消息：</p><ol><li>请求和预准备消息的签名正确，并且 d 与 m 的摘要一致。</li><li>当前视图编号是 v。</li><li>该备份节点从未在视图 v 中接受过序号为 n 但是摘要 d 不同的消息 m。</li><li>预准备消息的序号 n 必须在水线（watermark）上下限 h 和 H 之间。</li></ol><p>水线存在的意义在于防止一个失效节点使用一个很大的序号消耗序号空间。</p><h4 id="6-6-准备-prepare"><a href="#6-6-准备-prepare" class="headerlink" title="6.6 准备(prepare)"></a>6.6 准备(prepare)</h4><p>如果备份节点i接受了预准备消息<code>&lt;&lt;PRE-PREPARE,v,n,d&gt;,m&gt;</code>，则进入准备阶段。在准备阶段的同时，该节点向所有副本节点发送准备消息<code>&lt;PREPARE,v,n,d,i&gt;</code>，并且将预准备消息和准备消息写入自己的消息日志。如果看预准备消息不顺眼，就什么都不做。</p><p>包括主节点在内的所有副本节点在收到准备消息之后，对消息的签名是否正确，视图编号是否一致，以及消息序号是否满足水线限制这三个条件进行验证，如果验证通过则把这个准备消息写入消息日志中。</p><p>我们定义准备阶段完成的标志为副本节点i将<code>(m,v,n,i)</code>记入其消息日志，其中 m 是请求内容，预准备消息 m在视图 v 中的编号 n，以及 2f 个从不同副本节点收到的与预准备消息一致的准备消息。每个副本节点验证预准备和准备消息的一致性主要检查：视图编号 v 、消息序号 n 和摘要 d。</p><p>预准备阶段和准备阶段确保所有正常节点对同一个视图中的请求序号达成一致。接下去是对这个结论的形式化证明：如果 <code>prepared(m,v,n,i)</code> 为真，则<code>prepared(m',v,n,j)</code>必不成立，这就意味着至少 f+1 个正常节点在视图 v 的预准备或者准备阶段发送了序号为 n 的消息 m。</p><h4 id="6-7-确认-commit"><a href="#6-7-确认-commit" class="headerlink" title="6.7 确认(commit)"></a>6.7 确认(commit)</h4><p>当 (m,v,n,i) 条件为真的时候，副本 i 将<code>&lt;COMMIT,v,n,D(m),i&gt;</code> 向其他副本节点广播，于是就进入了确认阶段。</p><p>每个副本接受确认消息的条件是：</p><ol><li>签名正确；</li><li>消息的视图编号与节点的当前视图编号一致；</li><li>消息的序号 n 满足水线条件，在 h 和 H 之间。一旦确认消息的接受条件满足了，则该副本节点将确认消息写入消息日志中。（补充：需要将针对某个请求的所有接受的消息写入日志，这个日志可以是在内存中的）。</li></ol><p>确认阶段保证了以下这个不变式（invariant）：对某个正常节点 i 来说，如果 committed-local(m,v,n,i) 为真则 committed(m,v,n) 也为真。这个不变式和视图变更协议保证了所有正常节点对本地确认的请求的序号达成一致，即使这些请求在每个节点的确认处于不同的视图。更进一步地讲，这个不变式保证了任何正常节点的本地确认最终会确认 f+1 个更多的正常副本。</p><p>每个副本节点 i 在 committed-local(m,v,n,i) 为真之后执行 m 的请求，并且i的状态反映了所有编号小于 n 的请求依次顺序执行。这就确保了所有正常节点以同样的顺序执行所有请求，这样就保证了算法的正确性（safety）。在完成请求的操作之后，每个副本节点都向客户端发送回复。副本节点会把时间戳比已回复时间戳更小的请求丢弃，以保证请求只会被执行一次。</p><h4 id="6-8-检查点-垃圾回收"><a href="#6-8-检查点-垃圾回收" class="headerlink" title="6.8 检查点/垃圾回收"></a>6.8 检查点/垃圾回收</h4><p>为了节省内存，系统需要一种将日志中的无异议消息记录删除的机制。为了保证系统的安全性，节点在删除自己的消息日志前，需要确保至少 f+1 个正常节点执行了消息对应的请求，并且可以在视图变更时向其他节点证明。另外，如果一些节点错过部分消息，但是这些消息已经被所有正常节点删除了，这就需要通过传输部分或者全部服务状态实现该节点的同步。因此，节点同样需要证明状态的正确性。</p><p>在每一个操作执行后都生成这样的证明是非常消耗资源的。因此，证明过程只有在请求序号可以被某个常数（比如100）整除的时候才会周期性地进行。我们将这些请求执行后得到的状态称作检查点（checkpoint），并且将具有证明的检查点称作稳定检查点（stable checkpoint）。</p><p>节点保存了服务状态的多个逻辑拷贝，包括最新的稳定检查点，零个或者多个非稳定的检查点，以及一个当前状态。写时复制技术可以被用来减少存储额外状态拷贝的空间开销。</p><p>检查点的正确性证明的生成过程如下：当节点i生成一个检查点后，向其他节点广播检查点消息<code>&lt;CHECKPOINT,n,d,i&gt;</code>，这里 n 是最近一个影响状态的请求序号，d是状态的摘要。每个节点都默默地在各自的日志中收集并记录其他节点发过来的检查点消息，直到收到来自 2f+1 个不同节点的具有相同序号n和摘要d的检查点消息。这2f+1 个消息就是这个检查点的正确性证明。</p><p>具有证明的检查点成为稳定检查点，然后从节点就可以将所有序号小于等于n的预准备、准备和确认消息从日志中删除。同时也可以将之前的检查点和检查点消息一并删除。</p><p>检查点协议可以用来更新水线（watermark）的高低值（h和H），这两个高低值限定了可以被接受的消息。水线的低值h与最近稳定检查点的序列号相同，而水线的高值H=h+k，k 需要足够大才能使节点不至于为了等待稳定检查点而停顿。加入检查点每100个请求产生一次，k的取值可以是200。</p><h4 id="6-9-视图更换-view-change"><a href="#6-9-视图更换-view-change" class="headerlink" title="6.9 视图更换(view change)"></a>6.9 视图更换(view change)</h4><p>当主节点挂了（超时无响应）或者从节点集体认为主节点是问题节点时，就会触发 view change 事件，view change完成后，视图编号将会加1。</p><p>下图展示 view change 的三个阶段流程：</p><img src="/images/2019/pbft_2.png"><p>如图所示，view change 会有三个阶段，分别是 view-change，view-change-ack 和 new-view 阶段。从节点认为主节点有问题时，会向其它节点发送 view-change 消息，当前存活的节点编号最小的节点将成为新的主节点。当新的主节点收到2f个其它节点的 view-change 消息，则证明有足够多人的节点认为主节点有问题，于是就会向其它节点广播 new-view 消息。注意：从节点不会发起 new-view 事件。对于主节点，发送new-view 消息后会继续执行上个视图未处理完的请求，从 pre-prepare 阶段开始。其它节点验证 new-view 消息通过后，就会处理主节点发来的 pre-prepare 消息，这时执行的过程就是前面描述的 PBFT 过程。到这时，正式进入 v+1（视图编号加1）的视图了。</p><h4 id="6-10-算法复杂度"><a href="#6-10-算法复杂度" class="headerlink" title="6.10 算法复杂度"></a>6.10 算法复杂度</h4><p>PBFT 算法核心流程有三个阶段，分别是 pre-prepare（预准备）阶段，prepare（准备）阶段和 commit（提交）阶段。对于 pre-prepare 阶段，主节点广播 pre-prepare 消息给其它节点即可，因此通信次数为 n-1；对于 prepare 阶段，每个节点如果同意请求后，都需要向其它节点再 广播 parepare消息，所以总的通信次数为$n<em>(n-1)$，即$n^2-n$；对于 commit 阶段，每个节点如果达到 prepared 状态后，都需要向其它节点广播 commit 消息，所以总的通信次数也为$n</em>(n-1)$，即$n^2-n$。所以总通信次数为$(n-1)+(n^2-n)+(n^2-n)$，即$2n^2-n-1$，因此 pbft 算法复杂度为$O(n^2)$。</p><h3 id="7-HotStuff"><a href="#7-HotStuff" class="headerlink" title="7. HotStuff"></a>7. HotStuff</h3><p>一句话描述 HotStuff ： <strong>HotStuff 是一个在部分同步网络模型下的基于主节点的拜占庭容错共识协议。</strong> </p><blockquote><p>We present HotStuff, a leader-based Byzantine fault-tolerant replication protocol for the partially synchronous model.</p></blockquote><h4 id="7-1-PBFT-缺点"><a href="#7-1-PBFT-缺点" class="headerlink" title="7.1 PBFT 缺点"></a>7.1 PBFT 缺点</h4><p>原始的 PBFT 算法在设计时考虑的是部署在本地的只有 n = 4 或者 n = 7 个节点的网络，所以 PBFT 算法在现有的网络环境下有很大的缺陷。PBFT 中每个节点都需要与其他的节点进行 P2P 的共识同步，因此随着节点数量的增多，整体系统的性能会发生线性的速度下降。PBFT 由于其封闭性（节点数目提前确定并互相联通）和高性能开销($O(n^2)$的消息复杂度)，复杂的 view change 算法和开销，当节点数目 n = 2000 时，每次共识消息量将会爆炸到 4,000,000 ，已经不太适合现有的需求。</p><img src="/images/2019/hotstuff_0.png"><h4 id="7-2-HotStuff-流程"><a href="#7-2-HotStuff-流程" class="headerlink" title="7.2 HotStuff 流程"></a>7.2 HotStuff 流程</h4><p>HotStuff <strong>将视图切换流程和正常流程进行合并</strong>，即不再有单独的视图切换流程，降低了视图切换的复杂度。在 HotStuff 中切换视图时，系统中的某个节点也无需再确认“足够多的节点希望进行视图切换”这一消息后再通知新的主节点，它直接切换到新视图并通知新的主节点。HotStuff 把确认“足够多的节点希望进行视图切换”这一消息的行为放进了正常流程中。这一做法比较新颖，但必然会给正常流程引入新的确认阶段。因此，HotStuff 把 PBFT 的两阶段确认扩展成了三阶段确认。</p><p>HotStuff 以 prepare 阶段作为协议的开始阶段。在这一阶段中，当主节点收集到足够的节点发来新视图请求后，它开始新视图并提出自己的状态迁移要求，发送 prepare 消息给其它节点。系统中的其它节点在接收到 prepare 消息后，验证其合法性并进行如下三阶段确认：</p><ol><li><strong>pre-commit</strong> 阶段：其它节点对 prepare 消息进行投票。在收到足够多的投票后，主节点向所有节点广播 pre-commit 消息，向它节点表明足够多的节点确认了此次状态迁移的要求。 </li><li><strong>commit</strong> 阶段：其它节点对 pre-commit 消息进行投票。在收到足够多的投票后，主节点向所有节点广播 commit 消息。此时，收到 commit 消息的节点可以锁定当前状态迁移要求以便即使视图切换也可以顺利达成共识。</li><li><strong>decide</strong> 阶段：其它节点对 commit 消息进行投票。在收到足够多的投票后，主节点向所有节点广播 decide 消息。当某个节点收到 decide 消息后将执行状态迁移，并开始新的视图。</li></ol><img src="/images/2019/hotstuff_2.png"><h4 id="7-3-HotStuff-主要优化"><a href="#7-3-HotStuff-主要优化" class="headerlink" title="7.3 HotStuff 主要优化"></a>7.3 HotStuff 主要优化</h4><h5 id="7-3-1-通信复杂度优化"><a href="#7-3-1-通信复杂度优化" class="headerlink" title="7.3.1 通信复杂度优化"></a>7.3.1 通信复杂度优化</h5><p>HotStuff 每次通信都依靠主节点。节点不再通过 p2p 网络将消息广播给其它节点，而是将消息发送给主节点，由主节点处理后发送给其它节点, 系统的通信复杂度得到了大大降低。</p><p>传统 BFT 达成共识的方法是两轮共识，其中第一轮 prepare ，第二轮 commit。很多将 BFT 用于区块链的项目仍旧采取<strong>先做两轮通信，然后达成共识，最后上链</strong>的模式，而 Hotstuff 采用的是<strong>先上链，在区块中加入门限签名(threshold signature)</strong>，于是在 n 个区块之后就可以视为通过了 n 轮的通信达成共识。所以根本就不需要再去区分所谓 prepare，commit 这两轮通信的区别了，只需要简单地把每一轮节点的行为定义成<strong>leader负责出块和收集签名</strong>，然后<strong>其他节点负责对leader出的块进行签名</strong>，然后，只要收集到了2f+1 个签名，leader 就可以出一个块，然后后面有 n 个块就相当于达成了共识。这点的好处在于，O(n) 的通信复杂度可以让诚实节点知道 <strong>我知道消息 m 将成为共识</strong>，但是必须要 $O(n^2)$ 的通信才能让每个诚实节点都确信 <strong>我还知道所有诚实节点也知道消息m是共识</strong> ，而通过 leader 收集签名并出块这种方法，当所有人看到区块 b 的时候，诚实节点会知道 <strong>我知道b是共识</strong>，而在看到 b 后一块 b’ 的时候，诚实节点等于知道了<strong>所有签名的人也都知道了 b 是共识</strong>。于是，每次出块的时候都只需要 O(n) 的消息复杂度，但是，在一个诚实 leader 和聚合签名的帮助下，通过两轮的O(n)消息复杂度，我们达到了之前 $O(n^2)$ 的效果。</p><h5 id="7-3-2-引入门限签名（threshold-signature）"><a href="#7-3-2-引入门限签名（threshold-signature）" class="headerlink" title="7.3.2 引入门限签名（threshold signature）"></a>7.3.2 引入门限签名（threshold signature）</h5><p>为了提升效率，一个直觉的思路是：<strong>避免 $O(n^2)$ 的通讯</strong>。我们可以指定网络中的某节点作为协调者来发送/接收每个节点的投票，这样每个节点都只需要向协调者发送讯息即可，从而避免了 $O(n^2)$ 的通讯。然而，在这样的情境下，协调者有作恶的可能，因为协调者可以在未确实接收到指定数量的讯息前便执行下一轮投票或者进行状态更新。</p><p>我们可以使用门限签名来保证协调者的正当行为，门限签名可以保证：需集合<strong>超过门限数量(t-of-n)的签名才有效</strong>。也就是说，我们可以指定：唯有当协调者集合 2f+1 个签名后，协调者才能带着合法的签名继续推进共识，这在之前已经有很多项目采用这种做法，比如：Dfinity。</p><img src="/images/2019/hotstuff_4.jpg"><h5 id="7-3-3-流水线作业"><a href="#7-3-3-流水线作业" class="headerlink" title="7.3.3 流水线作业"></a>7.3.3 流水线作业</h5><p>其它节点对某一消息进行投票，主节点合成投票意见并通知给其它节点。这些过程可以统一表示，并采用流水化来处理。</p><img src="/images/2019/hotstuff_3.png"><p>如果每个内容都必须经过二轮投票/三个阶段才能达成共识，如果有 m 个内容就需要执行 2m 次投票。管线设计(Pipelining)可以减少投票的次数，HotStuff 的基本思路如下：让每个节点在投第 i 轮的 prepare 阶段时，同时也是对其前一个内容 i-1 的 commit 阶段投票。这样做便可以节省对同一个内容重复投票的冗余，大幅提升效率。</p><h5 id="7-3-4-view-change-优化"><a href="#7-3-4-view-change-优化" class="headerlink" title="7.3.4 view change 优化"></a>7.3.4 view change 优化</h5><p>PBFT 中当发生 view change 时，需要节点对 view change 达成共识，然后节点把这个共识（以及已经达成了共识这件事）告诉新的 leader，新的 leader 还要把这个消息广播出去宣布 view change，于是 view change的复杂度是 $O(n^3)$ , 采用了聚合签名之后是 $O(n^2)$。这带来两个问题：</p><ul><li>view change 的消息复杂度，</li><li>view change 必须要等到节点对于 view change 达成共识之后才会发生。</li></ul><p>Hotstuff  把 PBFT 的两轮共识变成了三轮，然后借此把 view change 的复杂度变成了 O(n)。这个可以这么理解：传统的 view change是 $O(n^2)$ 消息复杂度，也就是说，所有的节点在 view change 之前会确认所有的节点确实都进行到下一个 view，而在 Hotstuff 中，view change 不需要等<strong>我知道其他人也知道 view change 了</strong>这件事就可以进行，于是，消息复杂度就降到了 $O(n)$，也就是说，只要诚实节点的内置 time out 到了，那么就可以发 view change 给新的 leader 开始 view change。</p><p>HotStuff 为什么需要把两轮变成三轮呢？上面提到的 BFT+Chain 结构的简化中，严格来说这两个通信复杂度为 $O(n)$ 的区块和 PBFT $O(n^2)$消息复杂度的 prepare 和 commit 还是有区别的，当有两个区块连起来的时候两边是相当的，但是其实每一个区块的消息复杂度都只有 $O(n)$，并不说明所有诚实节点都知道–<strong>所有诚实节点都会达成共识</strong>。而同样，view change 的消息复杂度也只有 O(n)，于是如果一条消息刚有第一个区块的时候view change 了，那么诚实节点会对于第一个区块是否达成了共识产生不一致，因为 prepare 和 view change看起来都很有道理。</p><p>而把两轮变成三轮之后我们就解决了这个问题。因为我们可以规定任何两轮之后的东西才是共识，而如果没有到两轮就不算–<strong>对于 prepare 和 view change 都是如此</strong>。于是，如果 view change 发生在第一轮之后，那么我们不认为之前 prepare 的是正确的，而 view change 也同理。相反，如果在第二轮之后发生 view change，那么由于已经经过了两轮，所以这条消息已经经过了 prepare，即便在 view change 之后也会最终达成共识。</p><h5 id="7-3-5-Pacemaker-机制"><a href="#7-3-5-Pacemaker-机制" class="headerlink" title="7.3.5 Pacemaker 机制"></a>7.3.5 Pacemaker 机制</h5><p>HotStuff 通过 pacemaker 机制从算法层面对共识安全（safety）和活性（liveness) 进行解耦合，将保证系统安全的部分抽离出来，然后将与具体应用相关的 heuristics 部分分离，来实现 liveness。</p><blockquote><p>HotStuff also implements a mechanism called <em>Pacemaker</em>, that guarantees liveness after GST. Pacemaker a) synchronizes all correct replicas and a unique leader into a common height for a sufficiently long period of time. It chooses the unique leader such that the correct replicas synchronized will make progress with the chosen leader. This mechanism decouples <strong>liveness</strong> from the protocol, which in turn decouples it from <strong>safety</strong>.</p></blockquote><h4 id="7-4-总结"><a href="#7-4-总结" class="headerlink" title="7.4 总结"></a>7.4 总结</h4><p>总体来说，Hotstuff 的核心思路如下：</p><ol><li><p>采用门限签名把每一轮的消息复杂度变成 $O(n)$。</p></li><li><p>用 BFT+Chain 结构把 $O(n^2)$ 的共识变成了两轮 $O(n)$ 消息复杂度的区块提交。</p></li><li><p>在这种结构下，把 view change 的消息复杂度降到 $O(n)$，然后为了防止 view change 造成的不一致，把两轮区块提交变成了三轮。</p></li><li><p>共识过程采用流水化处理。</p></li></ol><h3 id="8-LibraBFT"><a href="#8-LibraBFT" class="headerlink" title="8. LibraBFT"></a>8. LibraBFT</h3><h4 id="8-1-LibraBFT-简介"><a href="#8-1-LibraBFT-简介" class="headerlink" title="8.1 LibraBFT 简介"></a>8.1 LibraBFT 简介</h4><p>LibraBFT[^5] 基于 HotStuff[^4] ，进一步完善了 HotStuff 协议，LibraBFT 在 HotStuff的基础上引入显示的活跃机制并提供了具体的延时分析。LibraBFT在一个有全局统一时间（GST），并且网络最大延时（ΔT）可控的 Partial Synchrony 的网络中是有效的。并且，LibraBFT在所有验证节点都重启的情况下，也能够保证网络的一致性。</p><blockquote><p>LibraBFT is ==based on HotStuff==, a recent protocol that leverages several decades of scientific advances in Byzantine fault tolerance (BFT) and achieves the strong scalability and security properties required by internet settings. </p></blockquote><p>LibraBFT 每一轮(round)共识都会选举出一个 leader 节点，然后由 leader 节点发起提案(proposals)，收集投票(vote)，最后达成共识。在 LibraBFT 中，所有参与共识的节点称之为 validator，即验证节点。</p><p>LibraBFT 是变体的 HotStuff chain(这个链不是 block chain ,而是用于共识的 hash 链),在 HotStuff 的每轮(round)共识流程中，所有的信息交互都只和 leader 节点进行，然后 leader 节点的提案会以一条加密的 hash链组成(HotStuff chain)。在每轮共识中，被选举出的 leader 节点会基于节点自身最长的 HotStuff chain 提出 block 提案，如果提案是有效并且及时，剩余的诚实节点会使用自身的私钥签名该提案，并将通过的 vote 发送回 leader节点。当 leader 节点收集到足够的 (Quorum vote) 时，会将 vote 聚合成 Quorum证书(Quorum Certificate，QC)，当然，leader 会基于上述已延伸的最长 HotStuff chain 继续追加 QC，换言之，一轮共识成功后，leader 节点会基于自身最长的 HotStuff chain，按序追加提案 block(缩写B) 以及 QC(缩写C)，然后在将 QC 再次广播至剩余的节点，并开启下一轮的共识。当然这是共识成功的情况。在异常情况下，无论任何原因，如果当前 leader 节点没法及时共识成功，共识参与者会一直等到当前 round 的超时时间，然后在发起下一轮的共识。</p><p> 最后，如果足够的 blocks 以及 QCs 都能连续及时的通过共识，并且其中一个 block 达到了 commit 条件，那么，该 block 会被 commit ，换言之，该 block 以及 block 中 transaction 集合都会被落盘，并被确认。</p><img src="/images/2019/librabft_0.png"><pre><code>                                                                                   HotStuff Chain</code></pre><p> 上图描述的 HotStuff Chain，其可以表现为： 【ℎinit ← 𝐵1 ← 𝐶1 ← 𝐵2 ← 𝐶2 … ← 𝐵𝑛+1 ← 𝐶𝑛+1】</p><h4 id="8-2-LibraBFT-共识流程"><a href="#8-2-LibraBFT-共识流程" class="headerlink" title="8.2 LibraBFT 共识流程"></a>8.2 LibraBFT 共识流程</h4><p>根据论文描述 LibraBFT 流程如下图：</p><img src="/images/2019/librabft_1.png"><pre><code>             Overview of the LibraBFT protocol (simplified, excluding round synchronization)                                                                        </code></pre><p>*<em>简单分析： *</em></p><ol><li>round 1 的 leader node3 出了 block B1，广播消息到所有 nodes。</li><li>其它 node 同意，回传 vote V1。</li><li>node3 收集投票 (包含自己的 vote)，形成 C1，传给所有 nodes。</li><li>(3 和 1 之间的间隔时间) node0 是 round 2 的 leader，收集其它 nodes 的状态，确定有 <code>N — f</code> 个 nodes 进入 round 2 后，产生 B2，回到步骤 1 ~ 3。</li></ol><p><strong>详细分析：</strong></p><p>通过 round 3 来详细分析共识流程：</p><ol><li><p>node1 被选举为 leader 节点，然后 node1 会基于自身最长链尾部 C2 发起 B3 提案，然后将提案广播至剩余节点(node0，2，3)，广播完成后，node1 会执行 B3 中的 transaction 列表，得到 execute state；</p></li><li><p>当剩余节点(node0，2，3)收到 B3提案后，会执行 B3 中的交易，然后将 execute state 打包到 vote 中，在将其签名，并发送给 node1;</p></li><li><p>一起都正常情况下，node1 会收到自身以外的 vote 请求，当收集到足够多的 vote 时，并且 vote 验证通过,包括 execute state 、签名、round 等，leader 节点会将 vote 集合打包成 quorum certificate(QC)，并将 QC 广播至剩余节点，到这里，一轮共识完毕。     </p></li></ol><p><strong>block 提交</strong><br>共识轮次(round)用 int 表示，并且只会递增。在每一轮共识轮次中，都仅由一个 leader 节点发起一次提案，轮次仅在共识成功后或当前共识轮次超时才会结束，然后轮次自增1，启动下轮次共识。因此，假设 round(Bi) 为提案 Bi 的当前轮次值，并且，依据递增的规定可以得到 round(𝐵𝑖) &lt; round(𝐵𝑖+1)；另外，如果 round(𝐵𝑖) + 1 = round(𝐵𝑖+1)，我们则称之为连续共识成功两轮，代表在这两轮共识中，都没有发生超时，并且共识都成功。如果同时满足以下两个条件：</p><ul><li>𝐵1 ← 𝐶1 ← 𝐵2 ← 𝐶2 ← 𝐵3 ← 𝐶3</li><li>round(𝐵3) = round(𝐵2) + 1 = round(𝐵1) + 2</li></ul><p>那么，B1 则会被 commit，换言之，连续三个共识轮次成功的情况下，第一个共识的 block 就会被提交。总的来说，相对于 PBFT 的三阶段提交来说，LibraBFT 的只需1.5阶段，既可完成一轮共识，上述的 round(B3) 完成后，round(B1) 才会被 commit 相当于 PBFT 的 commit 阶段。其实这就是 HotStuff 中的做法。</p><h4 id="8-3-Data-Synchronization"><a href="#8-3-Data-Synchronization" class="headerlink" title="8.3 Data Synchronization"></a>8.3 Data Synchronization</h4><p>Leader 在提案以前，会先确保足够人数进入同一 round 才会出块。nodes 之间会定时互相传播自己的状态，然后向別人取得缺少的部份。同步的流程为:</p><ol><li>广播 DataSyncNotaification。</li><li>依其它人的状态，向对方发送 DataSyncRequest。</li><li>收到 DataSyncRequest 后，回复 DataSyncResponse。</li></ol><p>目前的实现，request 一次传自己全部的状态，response 一次回复全部缺少的部份。详细实现如下:</p><img src="/images/2019/librabft_2.png"><p>目前代码跟白皮书上的伪代码有出入。</p><h4 id="8-4-Voting-Constraint"><a href="#8-4-Voting-Constraint" class="headerlink" title="8.4 Voting Constraint"></a>8.4 Voting Constraint</h4><p>符号说明：</p><ul><li>B 表示 区块(block)。</li><li>C 表示 (法定证书)quorum certificate。</li><li>B ← C 表示 C 的上一个 record 指向 B，即 C 有记录 B 的 hash。</li><li>round(B) 表示 B 的 round 是多少。</li><li>对 B’ ← C’ ← B 来说，previous_round(B) 表示 round(B’)</li></ul><p>除了只能投目前 round 的 block 以外，nodes 投票时还要遵守两个规则:</p><ul><li>First voting constraint: 投过 round x 的票后只能投 round y (y &gt; x) 的票。</li><li>Second voting constraint: 看过 2-chain B0 ← C0 ← B1 ← C1 后，收到新的 block B，previous_round(B) ≥ round(B0)</li></ul><p>第一个规则符合自觉，只能投更新的 block。若同一 round 里，leader 不守规则产生两个不同的 block，voter 只会投看到的第一个，不会 double vote。</p><p>第二个规则表示有看到两个连续通过的 block 后，新的 block B 至少要指向 B0 或 round 数比它大的 block。注意，这里沒有要求 B 所在的 chain 上面一定有 B0。</p><h4 id="8-5-Commit-Rule"><a href="#8-5-Commit-Rule" class="headerlink" title="8.5 Commit Rule"></a>8.5 Commit Rule</h4><p>对 3-chain B0 ← C0 ← B1 ← C1 ← B2 ← C2 且 round(B2) = round(B1)+1 = round(B0)+2 来说，B0 以及它之前的 records 的状态称为 committed，一但 committed，表示记录就不会掉了。</p><p>QC 有个选择性的栏位 commitment，用来记录最新的 committed state。以这里的例子来说，C2 的 commitment 会记录 state(C0)。</p><p>只管来说，若 node A 看到上述的 B0 ← … ← C2，表示 A 知道有 <code>N — f</code> 的 nodes 知道 B0 ← C0 ← B1 ← C1。所以之后通过的 block B，会满足 previous_round(B) ≥ round(B0)。表示 B 所在的 chain 上必定包含 B0。</p><h4 id="8-6-Punishment"><a href="#8-6-Punishment" class="headerlink" title="8.6 Punishment"></a>8.6 Punishment</h4><p>有了 voting constraint 和 commit rule，大家可以举报谁不遵守规则，验证后可惩罚 (例如沒收 stake-in 的 token)。</p><h4 id="8-7-Network"><a href="#8-7-Network" class="headerlink" title="8.7 Network"></a>8.7 Network</h4><p>文中提到在 P2P synchronization protocol 之上有加一层 gossip overlay，在 broadcast 的时候会随机传給 K (≤N) 个 nodes，然后通过收到的 nodes 继续传播消息。不过为简化讨论，假设 K = N。</p><p>考虑到网络状态会变化，timeout 的值由以下公式确定:</p><pre class=" language-rust"><code class="language-rust"><span class="token function">duration</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span> <span class="token operator">=</span> delta <span class="token operator">*</span> <span class="token punctuation">(</span>n <span class="token operator">-</span> nc <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token operator">^</span>r</code></pre><ul><li>n 表示目前的 round。</li><li>nc 表示最后一个 committed block 的 round。</li><li>delta 和 r 是常数。</li></ul><p>直观来说，愈久没有新的 committed block，timeout 时间愈久。假设无法同意新的 block 是因为网络状态不佳，逐渐加长 timeout 时间合理。但若是因为 byzantine node (拜占庭节点) 造成的，反而让 byzantine node 拖更久没有 liveness。实际情况依「拜占庭节点和网络状态不佳」何者更容易发生，来决定参数怎么设置。</p><h4 id="8-8-总结"><a href="#8-8-总结" class="headerlink" title="8.8 总结"></a>8.8 总结</h4><p>We have presented LibraBFT, a state machine replication system based on the HotStuff protocol [5]<br>and designed for the Libra Blockchain [2]. LibraBFT provides safety and liveness in a Byzantine<br>setting when up to one-third of voting rights are held by malicious actors, assuming that the network is partially synchronous. In this report, we have presented detailed proofs of safety and liveness and covered many important practical considerations, such as networking and data structures. We have shown that LibraBFT is compatible with proof of stake and can generate incentives for a variety of behaviors, such as proposing blocks and voting. Thanks to the simplicity of the safety argument in LibraBFT, we also provided criteria to detect malicious attempts to break safety. These criteria will be instrumental for the progressive migration of the Libra infrastructure to a permissionless model.</p><h4 id="8-9-Future-work"><a href="#8-9-Future-work" class="headerlink" title="8.9 Future work"></a>8.9 Future work</h4><p>This report constitutes an initial proposal for LibraBFT and is meant to be updated in the future. In the next version, we intend to share the code for our reference implementation in a simulated environment and provide experimental results, both using this simulation and using the production implementation currently developed by Calibra engineers.</p><p>In the future, we would like to improve our theoretical analysis in several ways. We plan to make<br>our networking assumptions more precise, with additional studies on message sizes and probabilistic gossiping. Regarding the integration of LibraBFT with the Libra Blockchain, we would like to cover fairness and discuss how light clients can authenticate the set of validators for each epoch. Economic incentives should reward additional positive behaviors, such as creating timeouts, and specifications should provide an external protocol for auditors to report violations of safety rules.</p><p>On a practical level, we have not yet analyzed resource consumption (memory, CPU, etc.) in the<br>presence of malicious participants. Heuristics for leader selection, a precise description of the VRF<br>solution, and possibly adaptive policies will likely be required to increase the robustness of the system in case of malicious leaders or targeted attacks on leaders.</p><p>In the long term, we hope that our efforts on precise specifications and detailed proofs will pave the<br>way for mechanized proofs of safety and liveness of LibraBFT.</p><h3 id="9-参考资料"><a href="#9-参考资料" class="headerlink" title="9. 参考资料"></a>9. 参考资料</h3><ul><li><a href="https://arxiv.org/pdf/1803.05069.pdf" target="_blank" rel="noopener">HotStuff: BFT Consensus in the Lens of Blockchain</a></li><li><a href="https://developers.libra.org/docs/papers/libra-consensus-state-machine-replication-in-the-libra-blockchain.pdf" target="_blank" rel="noopener">State Machine Replication in the Libra Blockchain</a></li><li><a href="https://zhuanlan.zhihu.com/p/72776441" target="_blank" rel="noopener">Libra 采用的 HotStuff 算法作者亲述：「尤物」诞生记</a></li><li><a href="https://www.chainnews.com/articles/215569914405.htm" target="_blank" rel="noopener">一文简述 HotStuff 的工作原理</a></li><li><a href="https://bbs.vechainworld.io/topic/200/librabft算法简述" target="_blank" rel="noopener">LibraBFT算法简述</a></li></ul><p>[^4]: M. Yin, D. Malkhi, M. K. Reiterand, G. G. Gueta, and I. Abraham, “HotStuff: BFT consensus</p><p>in the lens of blockchain,” 2019. <a href="https://arxiv.org/pdf/1803.05069.pdf" target="_blank" rel="noopener">https://arxiv.org/pdf/1803.05069.pdf</a></p><p>[^5]: State Machine Replication in the Libra Blockchain <a href="https://developers.libra.org/docs/papers/libra-consensus-state-machine-replication-in-the-libra-blockchain.pdf" target="_blank" rel="noopener">https://developers.libra.org/docs/papers/libra-consensus-state-machine-replication-in-the-libra-blockchain.pdf</a><br>[^6]: Impossibility of Distributed Consensus with One Faulty Process  <a href="https://groups.csail.mit.edu/tds/papers/Lynch/jacm85.pdf" target="_blank" rel="noopener">https://groups.csail.mit.edu/tds/papers/Lynch/jacm85.pdf</a><br>[^7]: <a href="https://en.wikipedia.org/wiki/Clock_drift" target="_blank" rel="noopener">https://en.wikipedia.org/wiki/Clock_drift</a><br>[^8]: <a href="https://en.wikipedia.org/wiki/Clock_skew" target="_blank" rel="noopener">https://en.wikipedia.org/wiki/Clock_skew</a><br>[^9]: <a href="https://en.wikipedia.org/wiki/Network_Time_Protocol" target="_blank" rel="noopener">https://en.wikipedia.org/wiki/Network_Time_Protocol</a><br>[^10]: <a href="https://en.wikipedia.org/wiki/Real-time_clock" target="_blank" rel="noopener">https://en.wikipedia.org/wiki/Real-time_clock</a></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Blockchain </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Blockchain </tag>
            
            <tag> Libra </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>深入理解 IO</title>
      <link href="/2020/05/20/io/"/>
      <url>/2020/05/20/io/</url>
      
        <content type="html"><![CDATA[<p>文件 I/O 的性能对数据库系统的性能有直接的影响，我们需要全面了解和掌握文件I/O。</p><h2 id="整体架构"><a href="#整体架构" class="headerlink" title="整体架构"></a>整体架构</h2><p>Linux 文件系统采用分层设计，对不同层进行抽象达到架构清晰、解耦的作用。</p><h3 id="Linux-Storage-Stack"><a href="#Linux-Storage-Stack" class="headerlink" title="Linux Storage Stack"></a>Linux Storage Stack</h3><img src="/images/2015/Linux-storage-stack-diagram_v4.10.png"><h2 id="硬盘"><a href="#硬盘" class="headerlink" title="硬盘"></a>硬盘</h2><img src="/images/2015/disk_26.png"><p>HDD 和早期 SSD 绝大多数都是使用 SATA 接口，跑的是 AHCI（Advanced Host Controller Interface），它是由Intel联合多家公司研发的系统接口标准。AHCI 支持 NCQ（Native Command Queuing）功能和热插拔技术。NCQ 最大深度为32，即主机可以发最多32条命令给 HDD 或者 SSD 执行，跟之前硬盘只能一条命令一条命令执行相比，硬盘性能大幅提升。</p><p>这在 HDD 时代，或者 SSD 早期，AHCI 协议和 SATA 接口足够满足系统性能需求，因为整个系统性能瓶颈在硬盘端（低速，高延时），而不是在协议和接口端。然而，随着 SSD 技术的飞速发展，SSD 盘的性能飙升，底层闪存带宽越来越宽，介质访问延时越来越低，系统性能瓶颈已经由下转移到上面的接口和协议处了。AHCI 和 SATA已经不能满足高性能和低延时 SSD 的需求，因此 SSD 迫切需要自己更快、更高效的协议和接口。</p><p>在这样的背景下，NVMe 横空出世。2009年下半年，在带头大哥 Intel 领导下，美光、戴尔、三星、Marvell等巨头，一起制定了专门为 SSD 服务的 NVMe 协议，旨在让 SSD 从老旧的 SATA 和 AHCI 中解放出来。</p><p>何为NVMe？Non-Volatile Memory Express，非易失性存储器标准，是跑在 PCIe 接口上的协议标准。NVMe 的设计之初就有充分利用到 PCIe SSD 的低延时以及并行性，还有当代处理器、平台与应用的并行性。SSD的并行性可以充分被主机的硬件与软件充分利用，相比于现在的 AHCI 标准，NVMe 标准可以带来多方面的性能提升。NVMe为SSD而生，但不局限于以闪存为媒介的SSD，它同样可以应用在高性能和低延时的3D XPoint这类新型的介质上。</p><p>NVMe和AHCI相比，它的优势主要体现在以下几点：</p><p><strong>低时延（Latency）</strong></p><p>造成硬盘存储时延的三大因素：存储介质本身、控制器以及软件接口标准。</p><p>存储介质层面，闪存（Flash）比传统机械硬盘速度快的太多；</p><p>控制器方面，从 SATA SSD 发展成 PCIe SSD，原生 PCIe 主控与 CPU 直接相连，而不是传统方式，通过南桥控制器中转，再连接 CPU，因此基于 PCIe 的 SSD 时延更低；</p><p>软件接口方面，NVMe 缩短了 CPU 到 SSD 的指令路径，比如 NVMe 减少了对寄存器的访问次数；MSI-X 和中断管理的应用；并行&amp;多线程优化，NVMe 减少了各个 CPU 核之间的锁同步操作。</p><p>所以基于 PCIe+NVMe 的SSD，具有非常低的延时。</p><img src="/images/2015/nvme1.png"><p><strong>高性能（Throughput &amp; IOPS）</strong></p><p>理论上，IOPS=队列深度/ IO延迟，故 IOPS 的性能，与队列深度有较大的关系（但 IOPS 并不与队列深度成正比，因为实际应用中，随着队列深度的增大，IO 延迟也会提高）。市面上性能不错的 SATA 接口 SSD，在队列深度上都可以达到32，然而这也是 AHCI 所能做到的极限。但目前高端的企业级 PCIe SSD，其队列深度可能要达到128，甚至是256才能够发挥出最高的 IOPS 性能。而 NVMe 标准下，最大的队列深度可达64K。此外，NVMe 的队列数量也从 AHCI 的1，提高到了64K。</p><p>PCIe 接口本身在性能上碾压 SATA，再加上 NVMe具有比AHCI 更深、更宽的命令队列，NVMe SSD 在性能上秒杀 SATA SSD 是水到渠成的事情。图是 NVMe SSD，SAS SSD和SATA SSD 性能对比图：</p><img src="/images/2015/nvme2.png"><p><strong>低功耗</strong></p><p>NVMe加入了自动功耗状态切换和动态能耗管理功能</p><h3 id="硬盘分类"><a href="#硬盘分类" class="headerlink" title="硬盘分类"></a>硬盘分类</h3><p>硬盘的种类比较多，若是按照硬盘接口类型的不同来分，大致可以分为 IDE 硬盘、SATA 硬盘、SCSI 硬盘、移动硬盘、固态硬盘。<br> 硬盘按照其工作形式的不同可以分为两种，一种是机械硬盘，另一种是固态硬盘。比较常见的机械硬盘按照其接口形式的不同可以分为 IDE 硬盘、SATA 硬盘、SCSI 硬盘三种。</p><p><strong>IDE 硬盘</strong></p><img src="/images/2015/disk_10.png"><p>IDE（Integrated Drive Electronics）硬盘是指采用 IDE 接口的硬盘。如图，为 IDE 硬盘。IDE 是所有现存并行 ATA 接口规格的统称。这种硬盘相对来说价格低廉、兼容性强、工作稳定、容量大、噪音低，应用比较多。但是，这种硬盘采用并行数据传输方式，传输速度的不断提升使得信号干扰逐渐变强，不利于数据的传输。</p><p><strong>SATA 硬盘</strong></p><img src="/images/2015/disk_11.png"><p>SATA（Serial Advande Technology Attachment）硬盘是指采用 SATA 接口的硬盘，如图，为 SATA 硬盘。SATA 接口采用串行数据传输方式，理论上传输速度比 IDE 接口要快很多，解决了IDE硬盘数据传输信号干扰限制传输速率的问题，并且采用该接口的硬盘支持热插拔，执行率也很高。</p><p><strong>SCSI 硬盘</strong></p><img src="/images/2015/disk_12.png"><p>SCSI（Small Computer System Interface）硬盘就是采用SCSI接口的硬盘，采用这种接口的硬盘主要用于服务器，如图为SCIS硬盘。这种接口共有50针，外观和普通硬盘接口有些相似。SCSI硬盘和普通IDE硬盘相比有很多优点：接口速度快，并且由于主要用于服务器，因此硬盘本身的性能也比较高，硬盘转速快，缓存容量大，CPU占用率低，扩展性远优于IDE硬盘，并且同样支持热插拔。</p><p><strong>固态硬盘</strong></p><p>固态硬盘（Solid State Disk）用固态电子存储芯片列阵而制成的硬盘，如图，所示为固态硬盘，它主要由控制单元和存储单元（FLASH芯片）组成。固态硬盘的接口规范和定义、功能及使用方法上与普通硬盘的完全相同，在产品外形和尺寸上与普通硬盘几乎一致。固态硬盘的存储介质分为两种，一种是采用闪存（FLASH芯片）作为存储介质，另外一种是采用DRAM作为存储介质。</p><h3 id="SSD-与-HDD-比较"><a href="#SSD-与-HDD-比较" class="headerlink" title="SSD 与 HDD 比较"></a>SSD 与 HDD 比较</h3><table><thead><tr><th></th><th align="center">SSD</th><th align="center">HDD</th></tr></thead><tbody><tr><td>启动时间</td><td align="center">由于没有马达和转臂，所以几乎可以瞬间完成。<br>同时从休眠模式中唤醒也大约只需要几毫秒即可。</td><td align="center">可能需要数秒以启动马达。而且当磁盘量非常大的时候，需要依次启动以防止瞬间电流过载。</td></tr><tr><td>随机访问时间</td><td align="center">大约仅需0.1毫秒，因为无需寻道。</td><td align="center">大约需要5–10毫秒。</td></tr><tr><td>读取潜伏期</td><td align="center">通常很短，因为直接读取。</td><td align="center">通常比较高，因为磁头需要额外的时间等待扇区的到来。</td></tr><tr><td>读取性能一致性</td><td align="center">读取性能不因数据在SSD上的存储位置不同而不同。</td><td align="center">读取性能与存放在磁盘的内圈还是外圈有关，也与文件的碎片程度有关。</td></tr><tr><td>碎片整理</td><td align="center">SSD基本不需要进行碎片整理，因为读取连续的数据并不明显比读取分散的数据快。<br>并且碎片整理会额外增加NAND闪存的写入次数，从而降低其寿命。</td><td align="center">HDD通常需要在文件碎片达到一定程度后进行整理，否则性能会有明显下降。特别是在含有大量文件的情况下更是如此。</td></tr><tr><td>噪音</td><td align="center">SSD无任何噪音</td><td align="center">HDD有明显的噪音，并且在读写频繁的时候噪音更大。</td></tr><tr><td>机械可靠性</td><td align="center">无机械故障</td><td align="center">随着时间的推移，机械故障概率会逐渐增加。</td></tr><tr><td>环境敏感性</td><td align="center">对震动、磁场、碰撞不敏感</td><td align="center">对震动、磁场、碰撞敏感</td></tr><tr><td>体积和重量</td><td align="center">体积小、重量轻</td><td align="center">性能越高，体积和重量越大</td></tr><tr><td>并行操作</td><td align="center">多数控制器可以使用多个芯片进行并发读写</td><td align="center">HDD虽然有多个磁头，但是由于共享同一个位置控制电机，所以不能并发读写。</td></tr><tr><td>写入寿命</td><td align="center">基于闪存的SSD有写入寿命限制，且一旦损坏，整个SSD的数据都将丢失。</td><td align="center">无写入寿命限制</td></tr><tr><td>数据安全问题</td><td align="center">NAND闪存的存储块不能被直接覆盖重写，只能重新写入先前被擦除的块中。<br>如果一个软件加密程序对已经存在于SSD上的数据进行加密，那些原始的、看上去已经被覆盖掉的原始数据实际上并没有被覆盖，它们依然可以被读取，从而造成信息泄漏。<br>但是SSD自身基于硬件的加密装置没有这个问题。<br>此外，也不能简单的通过覆盖原文件的办法来清除原有的数据，除非该SSD有内建的安全删除机制，并且确实已经被启用。</td><td align="center">HDD可以直接覆盖掉指定的扇区，因而不存在这个问题。</td></tr><tr><td>单位容量成本</td><td align="center">贵。但是大约每两年下降一半。</td><td align="center">便宜</td></tr><tr><td>最大存储容量</td><td align="center">小。但是大约每两年可翻一倍。</td><td align="center">大</td></tr><tr><td>读/写性能对称</td><td align="center">低端SSD的读取速度远高于写入速度，但是高端产品的读写速度可以做到一致。</td><td align="center">HDD的读取速度通常比写入速度快一些，但是差距并不很大。</td></tr><tr><td>TRIM与可用空白块</td><td align="center">SSD的写入性能受可用空白块数量影响很大。<br>先前曾经写入过数据且现在未被使用的块，可以通过TRIM来回收，使其成为可用的空白块。<br>但是即使经过TRIM回收的块，其性能依然会出现下降。</td><td align="center">HDD完全没有这些问题，其性能不会因为多次读写而出现下降，也不需要进行TRIM操作。</td></tr><tr><td>能耗</td><td align="center">即使是高性能的SSD通常其能耗也只有HDD的1/2到1/3。</td><td align="center">高性能HDD通常需要大约12-18瓦，而为笔记本设计的节能HDD的功耗通常在2-3瓦。</td></tr></tbody></table><h3 id="HDD（Hard-Disk-Drive）"><a href="#HDD（Hard-Disk-Drive）" class="headerlink" title="HDD（Hard Disk Drive）"></a>HDD（Hard Disk Drive）</h3><p>硬盘驱动器是一种较旧的技术，最初由IBM在60多年前推出。它是硬盘驱动器的简称形式，并使用磁力进行数据存储。HDD具有高速旋转的旋转磁盘，同时其上方具有读/写头，其在旋转磁盘上读取和写入数据。HDD 的性能取决于磁盘的旋转速度。目前使用的 HDD 驱动器的通常转速范围在5,400 RPM（RPM）到7,200 RPM（RPM）之间。基于服务器的磁盘可以实现高达15,000 rpm（RPM）的旋转速度。</p><p>我们分别从硬盘的物理结构和逻辑结构分析。</p><h4 id="物理结构"><a href="#物理结构" class="headerlink" title="物理结构"></a>物理结构</h4><p>硬盘的物理结构可分为外部结构和内部结构。</p><h5 id="外部结构"><a href="#外部结构" class="headerlink" title="外部结构"></a>外部结构</h5><p>硬盘的外部结构主要包括金属固定面板、控制电路板和接口三部分。</p><p><strong>金属固定面板</strong><br>硬盘外部会有一个金属的面板，用于保护整个硬盘。<br>金属面板和地板结合成一个密封的整体，保证硬盘盘体和机构的稳定运行。</p><img src="/images/2015/disk_1.png"><p><strong>控制电路板</strong></p><p>控制电路板上的电子元器件大多采用贴片式元件焊接，这些电子元器件组成了功能不同的电子电路，这些电路包括主轴调速电路、磁头驱动与伺服定位电路、读写电路、控制与接口电路等。在电路板上有几个主要的芯片：主控芯片、BIOS芯片、缓存芯片、电机驱动芯片。</p><img src="/images/2015/disk_2.png"><p><strong>接口</strong></p><p>在硬盘的顶端会有几个不同的硬盘接口，这些接口主要包括电源插座接口、数据接口和主、从跳线接口，其中电源插口与主机电源相联，为硬盘工作提供电力保证。中间的主、从盘跳线接口，用以设置主、从硬盘，即设置硬盘驱动器的访问顺序。</p><img src="/images/2015/disk_3.png"><h5 id="内部结构"><a href="#内部结构" class="headerlink" title="内部结构"></a>内部结构</h5><p>硬盘内部主要包括磁头组件、磁头驱动组件、盘体、主轴组件、前置控制电路等。</p><img src="/images/2015/disk_4.png"><p><strong>磁头组件</strong><br>磁头组件包括读写磁头、传动手臂、传动轴三部分组成。</p><img src="/images/2015/disk_5.png"><p>磁头组件中最主要的部分是磁头，另外的两个部分可以看作是磁头的辅助装置。传动轴带动传动臂，使磁头到达指定的位置。<br>磁头是硬盘中对盘片进行读写工作的工具，是硬盘中最精密的部位之一。磁头是用线圈缠绕在磁芯上制成的，工作原理则是利用特殊材料的电阻值会随着磁场变化的原理来读写盘片上的数据。硬盘在工作时，磁头通过感应旋转的盘片上磁场的变化来读取数据；通过改变盘片上的磁场来写入数据。为避免磁头和盘片的磨损，在工作状态时，磁头悬浮在高速转动的盘片上方，间隙只有0.1~0.3um，而不是盘片直接接触，在电源关闭之后，磁头会自动回到在盘片上着陆区，此处盘片并不存储数据，是盘片的起始位置。</p><p><strong>磁头驱动组件</strong></p><p>磁头的移动是靠磁头驱动组件实现的，硬盘寻道时间的长短与磁头驱动组件关系非常密切。磁头的驱动机构由电磁线圈电机、磁头驱动小车、防震动装置构成，高精度的轻型磁头驱动机构能够对磁头进行正确的驱动和定位，并能在很短时间内精确定位系统指令指定的磁道，保证数据读写的可靠性。电磁线圈电机包含着一块永久磁铁，该磁铁的磁力很强，对于传动手臂的运动起着关键性的作用。防震装置是为了避免磁头将盘片刮伤等情况的发生而设计的。</p><p><strong>盘片与主轴组件</strong></p><p>盘片是硬盘存储数据的载体，盘片是在铝合金或玻璃基底上涂覆很薄的磁性材料、保护材料和润滑材料等多种不同作用的材料层加工而成，其中磁性材料的物理性能和磁层机构直接影响着数据的存储密度和所存储数据的稳定性。金属盘片具有很高的存储密度、高剩磁及高娇顽力；玻璃盘片比普通金属盘片在运行时具有更好的稳定性。<br>主轴组件包括主轴部件轴瓦和驱动电机等。随着硬盘容量的扩大和速度的提高，主轴电机的速度也在不断提升，有厂商开始采用精密机械工业的液态轴承机电技术，这种技术的应用有效地降低了硬盘工作噪音。</p><p><strong>前置控制电路</strong></p><p>前置放大电路控制磁头感应的信号、主轴电机调速、磁头驱动和伺服定位等，由于磁头读取的信号微弱，将放大电路密封在腔体内可减少外来信号的干扰，提高操作指令的准确性。</p><h4 id="逻辑结构"><a href="#逻辑结构" class="headerlink" title="逻辑结构"></a>逻辑结构</h4><p>新硬盘是不能直接使用的，必须对它进行分区进行格式化才能存储数据。经过格式化分区后，逻辑上每个盘片的每一面都会被分为磁道、扇区、柱面这几个虚拟的概念。如图所示为硬盘划分的逻辑结构图。另外，不同的硬盘中盘片数不同，一个盘片有两面，这两面都能存储数据，每一面都会对应一个磁头，习惯上将盘面数计为磁头数，用来计算硬盘容量。</p><p>扇区、磁道（或柱面）和磁头数构成了硬盘结构的基本参数，用这些参数计算硬盘的容量，其计算公式为：</p><blockquote><p>存储容量 = 磁头数 * 磁道（柱面）数 * 每道扇区数 * 每扇区字节数</p></blockquote><img src="/images/2015/disk_6.png"><p>查看 ubuntu 磁盘信息 </p><pre class=" language-shell"><code class="language-shell">sudo fdisk -l /dev/mapper/ubuntu--vg-root</code></pre><img src="/images/2015/disk_13.png"><h5 id="磁道"><a href="#磁道" class="headerlink" title="磁道"></a>磁道</h5><img src="/images/2015/disk_7.png"><p>当磁盘旋转时，磁头若保持在一个位置上，则每个磁头都会在磁盘表面划出一个圆形轨迹，这些圆形轨迹就叫磁道。磁道上的磁道是一组记录密度不同的同心圆，如图。磁表面存储器是在不同形状（如盘状、带状等）的载体上，涂有磁性材料层，工作时，靠载磁体高速运动，由磁头在磁层上进行读写操作，信息被记录在磁层上，这些信息的轨迹就是磁道。这些磁道用肉眼是根本看不到的，因为他们仅是盘面上以特殊方式磁化了的一些磁化区，磁盘上的信息便是沿着这样的轨道存放的。相邻磁道之间并不是紧挨着的，这是因为磁化单元相隔太近时磁性会产生相互影响，同时也为磁头的读写带来困难，通常盘片的一面有成千上万个磁道。</p><h5 id="扇区"><a href="#扇区" class="headerlink" title="扇区"></a>扇区</h5><img src="/images/2015/disk_8.png" width="400px"><p>分区格式化磁盘时，每个盘片的每一面都会划分很多同心圆的磁道，而且还会将每个同心圆进一步的分割为多个相等的圆弧，这些圆弧就是扇区。为什么要进行扇区的划分呢？因为，读取和写入数据的时候，磁盘会以扇区为单位进行读取和写入数据，即使电脑只需要某个扇区内的几个字节的文件，也必须一次把这几个字节的数据所在的扇区中的全部512字节的数据全部读入内存，然后再进行筛选所需数据，所以为了提高电脑的运行速度，就需要对硬盘进行扇区划分。另外，每个扇区的前后两端都会有一些特定的数据，这些数据用来构成扇区之间的界限标志，磁头通过这些界限标志来识别众多的扇区。</p><p>扇区是硬盘的最小操作单位，但扇区对于操作系统来说还是太小了，一般操作系统有自己的硬盘操作最小单位，在 linux 下一般为 4k</p><pre class=" language-shell"><code class="language-shell">xiehui@xiehui-desktop:~$ sudo tune2fs -l  /dev/mapper/ubuntu--vg-root | grep "Block size"Block size:               4096xiehui@xiehui-desktop:~$ </code></pre><h5 id="柱面"><a href="#柱面" class="headerlink" title="柱面"></a>柱面</h5><img src="/images/2015/disk_9.png" width="400px"><p>硬盘通常由一个或多个盘片构成，而且每个面都被划分为数目相等的磁道，并从外缘开始编号（即最边缘的磁道为0磁道，往里依次累加）。如此磁盘中具有相同编号的磁道会形成一个圆柱，此圆柱称为磁盘的柱面。磁盘的柱面数与一个盘面上的磁道数是相等的。由于每个盘面都有一个磁头，因此，盘面数等于总的磁头数。</p><h4 id="访盘过程"><a href="#访盘过程" class="headerlink" title="访盘过程"></a>访盘过程</h4><p>即一次访盘请求（读/写）完成过程由三个动作组成：</p><ol><li>寻道（时间）：磁头移动定位到指定磁道 </li><li>旋转延迟（时间）：等待指定扇区从磁头下旋转经过 </li><li>数据传输（时间）：数据在磁盘与内存之间的实际传输</li></ol><p>此在磁盘上读取扇区数据（一块数据）所需时间：</p><p>$T_{io} = t_{seek}+t{la}+ n * t_{wm}$</p><p>其中:</p><p>$t_{seek}$ 为寻道时间</p><p>$t_{la}$为旋转时间</p><p>$t_{wm}$ 为传输时间</p><h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><p>HDD 顺序读写的性能远高于随机读写，我们需要充分利用这一特性。</p><h3 id="SSD（Solid-State-Drives）"><a href="#SSD（Solid-State-Drives）" class="headerlink" title="SSD（Solid State Drives）"></a>SSD（Solid State Drives）</h3><p>SSD 用固态电子存储芯片列阵而制成的硬盘，如图，所示为固态硬盘，它主要由控制单元和存储单元（FLASH芯片）组成。固态硬盘的接口规范和定义、功能及使用方法上与普通硬盘的完全相同，在产品外形和尺寸上与普通硬盘几乎一致。固态硬盘的存储介质分为两种，一种是采用闪存（FLASH芯片）作为存储介质，另外一种是采用DRAM作为存储介质。</p><h4 id="组成结构"><a href="#组成结构" class="headerlink" title="组成结构"></a>组成结构</h4><p>SSD 主要由主控制器，存储单元，缓存（可选），以及跟主机接口（诸如SATA，SAS, PCIe等）组成。</p><img src="/images/2015/disk_14.png"><h5 id="主控制器"><a href="#主控制器" class="headerlink" title="主控制器"></a>主控制器</h5><p>每个 SSD 都有一个控制器(controller)将存储单元连接到电脑，主控器可以通过若干个通道（channel）并行操作多块FLASH颗粒，类似 RAID0，大大提高底层的带宽。控制器是一个执行固件(firmware)代码的嵌入式处理器。主要功能如下：</p><ul><li>错误检查和纠正(ECC)</li><li>磨损平衡(Wear leveling)</li><li>坏块映射(Bad block mapping)</li><li>Read disturb(读取某个块的数据的时候会影响到相邻块的数据)管理</li><li>缓存控制</li><li>垃圾回收</li><li>加密</li></ul><h5 id="存储单元"><a href="#存储单元" class="headerlink" title="存储单元"></a>存储单元</h5><p>尽管有某些厂商推出了基于更高速的 DRAM 内存的产品，但 NAND 闪存依然最常见，占据着绝对主导地位。低端产品一般采用 MLC(multi-level cell) 甚至 TLC(Triple Level Cell) 闪存，其特点是容量大、速度慢、可靠性低、存取次数低、价格也低。高端产品一般采用 SLC(single-level cell) 闪存，其特点是技术成熟、容量小、速度快、可靠性高、存取次数高、价格也高。但是事实上，取决于不同产品的内部架构设计，速度和可靠性的差别也可以通过各种技术加以弥补甚至反转。</p><h5 id="缓存"><a href="#缓存" class="headerlink" title="缓存"></a>缓存</h5><p>基于 NAND 闪存的 SSD 通常带有一个基于 DRAM 的缓存，其作用与普通的机械式硬盘类似，但是还会存储一些诸如 Wear leveling 数据之类的其他数据。把数据先缓存在 DRAM 中，然后集中写入，从而减少写入次数。特例之一是 SandForce 生产的控制器，它并不含有缓存，但是性能依旧很出色，由于其结构简单，故而可以生产体积更小的 SSD，并且掉电时数据更安全。</p><h5 id="主机接口"><a href="#主机接口" class="headerlink" title="主机接口"></a>主机接口</h5><p>主机接口与控制器紧密相关，但是通常与传统的机械式硬盘相差不大，主要有以下几种：</p><ul><li>SATA</li><li>SAS</li><li>PCI-E</li><li>Fibre Channel</li><li>USB</li></ul><h4 id="存储原理"><a href="#存储原理" class="headerlink" title="存储原理"></a>存储原理</h4><p>SSD内部一般使用 NAND Flash 来作为存储介质，其逻辑结构如下：</p><img src="/images/2015/disk_15.png"><p>SSD 中一般有多个 NAND Flash，每个 NAND Flash 包含多个  Block，每个Block 包含多个 Page。由于NAND 的特性，其存取都必须以 page 为单位，即每次读写至少是一个 page，通常地，每个 page 的大小为4k或者8k。另外，NAND还有一个特性是，其只能是读或写单个 page，但不能覆盖写如某个 page，必须先要清空里面的内容，再写入。由于清空内容的电压较高，必须是以 block 为单位。因此，没有空闲的 page 时，必须要找到没有有效内容的 block，先擦写，然后再选择空闲的 page 写入。</p><p>操作系统通常将硬盘理解为一连串 512B 大小的<strong>扇区</strong>[注意：操作系统对磁盘进行一次读或写的最小单位并不是扇区，而是文件系统的<strong>块</strong>，一般为 512B/1KB/4KB 之一(也可能更大)，其具体大小在格式化时设定]，但是闪存的读写单位是 4/8/16KB 大小的<strong>页</strong>，而且闪存的擦除(又叫编程)操作是按照 128 或 256 页大小的<strong>块</strong>来操作的。更要命的是写入数据前必须要先擦除整个块，而不能直接覆盖。这完全不符合现有的、针对传统硬盘设计的文件系统的操作方式，很明显，我们需要更高级、专门针对 SSD 设计的文件系统来适应这种操作方式。但遗憾的是，目前还没有这样的文件系统。</p><p>为了兼容现有的文件系统，就出现了 FTL(闪存转换层)，它位于文件系统和物理介质之间，把闪存的操作习惯虚拟成以传统硬盘的 512B 扇区进行操作。这样，操作系统就可以按照传统的扇区方式操作，而不用担心之前说的擦除/读/写问题。一切逻辑到物理的转换，全部由 FTL 层包了。</p><p>FTL 算法，本质上就是一种逻辑到物理的映射，因此，当文件系统发送指令说要写入或者更新一个特定的逻辑扇区时，FTL 实际上写入了另一个空闲物理页，并更新映射表，再把这个页上包含的旧数据标记为无效(更新后的数据已经写入新地址了，旧地址的数据自然就无效了)。</p><p>在 SSD 中，一般会维护一个 mapping table，维护逻辑地址到物理地址的映射。每次读写时，可以通过逻辑地址直接查表计算出物理地址，与传统的机械磁盘相比，省去了寻道时间和旋转时间。</p><h4 id="读写特性"><a href="#读写特性" class="headerlink" title="读写特性"></a>读写特性</h4><p>从NAND Flash的原理可以看出，其和HDD的主要区别为</p><ul><li>定位数据快：HDD 需要经过寻道和旋转，才能定位到要读写的数据块，而 SSD 通过mapping table直接计算即可</li><li>读取速度块：HDD 的速度取决于旋转速度，而 SSD 只需要加电压读取数据，一般而言，要快于 HDD</li></ul><p>因此，在顺序读测试中，由于定位数据只需要一次，定位之后，则是大批量的读取数据的过程，此时，HDD 和SSD 的性能差距主要体现在读取速度上，HDD 能到200M左右，而普通 SSD 是其两倍。</p><p>在随机读测试中，由于每次读都要先定位数据，然后再读取，HDD 的定位数据的耗费时间很多，一般是几毫秒到十几毫秒，远远高于 SSD 的定位数据时间(一般0.1ms左右)，因此，随机读写测试主要体现在两者定位数据的速度上，此时，SSD 的性能是要远远好于 HDD 的。</p><p>对于SSD的写操作，针对不同的情况，有不同的处理流程，主要是受到 NAND Flash 的如下特性限制</p><ul><li>NAND Flash 每次写必须以 page 为单位，且只能写入空闲的 page，不能覆盖写原先有内容的page</li><li>擦除数据时，由于电压较高，只能以 block 为单位擦除</li></ul><p>SSD的写分为新写入和更新两种，处理流程不同。</p><p><strong>新写入的数据的流程</strong></p><img src="/images/2015/disk_16.png"><p>假设新写入了一个page，其流程如下：</p><ul><li>找到一个空闲page</li><li>把数据写入到空闲page中</li><li>更新mapping table</li></ul><p><strong>更新操作的流程</strong></p><img src="/images/2015/disk_17.png"><p>假设是更新了page G 中的某些字节，流程如下：</p><ul><li>由于 SSD 不能覆盖写，因此，先找到一个空闲页 H</li><li>读取 page G 中的数据到 SSD 内部的 buffer 中，把更新的字节更新到 buffer</li><li>把 buffer 中的数据写入到 H</li><li>更新 mapping table 中 G 页，置为无效页</li><li>更新 mapping table 中 H 页，添加映射关系</li></ul><p>可以看出，如果在更新操作比较多的情况下，会产生较多的无效页，类似于磁盘碎片，此时，需要SSD的over-provisioning和garbage-collection。</p><h4 id="磨损平衡"><a href="#磨损平衡" class="headerlink" title="磨损平衡"></a>磨损平衡</h4><p>简单说来，磨损平衡(Wear leveling)是确保闪存的每个块被写入的次数相等的一种机制。</p><p>通常情况下，在 NAND 块里的数据更新频度是不同的：有些会经常更新，有些则不常更新。很明显，那些经常更新的数据所占用的块会被快速的磨损掉，而不常更新的数据占用的块磨损就小得多。为了解决这个问题，需要让每个块的编程(擦写)次数尽可能保持一致：这就是需要对每个页的读取/编程操作进行监测，在最乐观的情况下，这个技术会让全盘的颗粒物理磨损程度相同并同时报废。</p><p>磨损平衡算法分静态和动态。动态磨损算法是基本的磨损算法：只有用户在使用中更新的文件占用的物理页地址被磨损平衡了。而静态磨损算法是更高级的磨损算法：在动态磨损算法的基础上，增加了对于那些不常更新的文件占用的物理地址进行磨损平衡，这才算是真正的全盘磨损平衡。简单点说来，动态算法就是每次都挑最年轻的 NAND 块来用，老的 NAND 块尽量不用。静态算法就是把长期没有修改的老数据从一个年轻 NAND 块里面搬出来，重新找个最老的 NAND 块放着，这样年轻的 NAND 块就能再度进入经常使用区。概念很简单，但实现却非常的复杂，特别是静态。</p><p>尽管磨损均衡的目的是避免数据重复在某个空间写入，以保证各个存储区域内磨损程度基本一致，从而达到延长固态硬盘的目的。但是，它对固态硬盘的性能有不利影响。</p><p>以一个例子，说明损耗均衡控制的重要性：</p><p>假如一个 NAND Flash 总共有 4096个block，每个 block 的擦写次数最大为10000。其中有3个文件，每个文件占用50个block，平均10分钟更新1个文件，假设没有均衡控制，那么只会3 * 50 + 50共200个block，则这个SSD的寿命如下：</p><img src="/images/2015/disk_18.png"><p>大约为278天。而如果是完美的损耗均衡控制，即4096个block都均衡地参与更新，则使用寿命如下：</p><img src="/images/2015/disk_19.png"><p>大约5689天。因此，设计一个好的损耗均衡控制算法是非常有必要的，主流的方法主要有两种：</p><ul><li>dynamic wear leveling</li><li>static wear leveling</li></ul><p>这里的 dynamic 和 static 是指的是数据的特性，如果数据频繁的更新，那么数据是 dynamic 的，如果数据写入后，不更新，那么是 static 的。</p><p>dynamic wear leveling 的原理是记录每个 block 的擦写次数，每次写入数据时，找到被擦除次数最小的空block。</p><p>static wear leveling 的原理分为两块：</p><ul><li>每次找到每擦除次数最小的可用 block</li><li>当某个 block 的擦除次数小于阈值时，会将它与擦写次数较高的 block 的数据进行交换</li></ul><p>以一个例子来说明，两种擦写算法的不同点：</p><p>假如 SSD 中有25%的数据是 dynamic 的，另外75%的数据是 static 的。对于 dynamic wear leveling 方法，每次要找的是擦除了数据的 block，而 static 的 block 里面是有数据的，因此，每次都只会在 dynamic 的 block 中，即最多会在25%的 block 中做均衡；对于 static 算法，每次找的 block 既可能是 dynamic 的，也可能是 static 的，因此，最多有可能在全部的 block 中做均衡。</p><p>相对而言，static 算法能使得 SSD 的寿命更长，但也有其缺点：</p><ul><li>算法逻辑更复杂</li><li>在写入时，可能会移动数据，导致写放大，降低写入性能</li><li>更高的能耗</li></ul><h4 id="垃圾回收"><a href="#垃圾回收" class="headerlink" title="垃圾回收"></a>垃圾回收</h4><p>由前面的磨损平衡机制知道，磨损平衡的执行需要有“空白块”来写入更新后的数据。当可以直接写入数据的“备用空白块”数量低于一个阀值后，SSD 主控制器就会把那些包含无效数据的块里的所有有效数据合并起来写到新的“空白块”中，然后擦除这个块以增加“备用空白块”的数量。这个操作就是 SSD 的垃圾回收。</p><img src="/images/2015/gc_1.jpg" width="400px"><img src="/images/2015/gc_2.jpg" width="400px"><p>有三种垃圾回收策略：</p><ol><li><p>闲置垃圾回收：很明显在进行垃圾回收时候会消耗大量的主控处理能力和带宽造成处理用户请求的性能下降，SSD 主控制器可以设置在系统闲置时候做“预先”垃圾回收(提前做垃圾回收操作)，保证一定数量的”备用空白块”，让 SSD 在运行时候能够保持较高的性能。闲置垃圾回收的缺点是会增加额外的”写入放大”，因为你刚刚垃圾回收的”有效数据”，也许马上就会被更新后的数据替代而变成”无效数据”，这样就造成之前的垃圾回收做无用功了。</p></li><li><p>被动垃圾回收：每个 SSD 都支持的技术，但是对主控制器的性能提出了很高的要求，适合在服务器里用到，SandForce 的主控就属这类。在垃圾回收操作消耗带宽和处理能力的同时处理用户操作数据，如果没有足够强劲的主控制器性能则会造成明显的速度下降。这就是为啥很多 SSD 在全盘写满一次后会出现性能下降的道理，因为要想继续写入数据就必须要边垃圾回收边做写入。</p></li><li><p>手动垃圾回收：用户自己手动选择合适的时机运行垃圾回收软件，执行垃圾回收操作。</p></li></ol><p>可以想象，如果系统经常进行垃圾回收处理，频繁的将一些区块进行擦除操作，那么 SSD 的寿命反而也会进一步下降。由此把握这个垃圾回收的频繁程度，同时确保 SSD 中的闪存芯片拥有更高的使用寿命，这确实需要找到一个完美的平衡点。所以，SSD 必须要支持 Trim 技术，不然 GC 就显不出他的优势了。</p><h4 id="Trim"><a href="#Trim" class="headerlink" title="Trim"></a>Trim</h4><p>Trim 是一个 ATA 指令，当操作系统删除文件或格式化的时候，由操作系统同时把这个文件地址发送给 SSD 的主控制器，让主控制器知道这个地址的数据无效了。</p><p>当你删除一个文件的时候，文件系统其实并不会真正去删除它，而只是把这个文件地址标记为“已删除”，可以被再次使用，这意味着这个文件占的地址已经是“无效”的了。这就会带来一个问题，硬盘并不知道操作系统把这个地址标记为“已删除”了，机械盘的话无所谓，因为可以直接在这个地址上重新覆盖写入，但是到了 SSD 上问题就来了。NAND 需要先擦除才能再次写入数据，要得到空闲的 NAND 空间，SSD 必须复制所有的有效页到新的空闲块里，并擦除旧块(垃圾回收)。如果没有 Trim 指令，意味着 SSD 主控制器不知道这个页是“无效”的，除非再次被操作系统要求覆盖上去。</p><p>Trim 只是条指令，让操作系统告诉 SSD 主控制器这个页已经“无效”了。Trim 会减少写入放大，因为主控制器不需要复制“无效”的页(没 Trim 就是“有效”的)到空白块里，这同时代表复制的“有效”页变少了，垃圾回收的效率和 SSD 性能也提升了。</p><p>Trim 能大量减少伪有效页的数量，它能大大提升垃圾回收的效率。</p><p>目前，支持 Trim 需要三个要素，缺一不可：</p><ul><li>系统： 操作系统必须会发送 Trim 指令，Win7, Win2008R2 , Linux-2.6.33 以上。</li><li>固件： SSD 的厂商在固件里要放有 Trim 算法，也就是 SSD 的主控制器必须认识 Trim 指令。</li><li>驱动： 控制器驱动必须要支持 Trim 指令的传输，也就是能够将 Trim 指令传输到 SSD 控制器。MS 的驱动，Intel 的 AHCI 驱动目前支持。别的要看之后的更新了。</li></ul><p>目前，RAID 阵列里的盘明确不支持 TRIM，不过 RAID 阵列支持 GC。</p><h4 id="NCQ"><a href="#NCQ" class="headerlink" title="NCQ"></a>NCQ</h4><p>NCQ(Native Command Queuing) 的意思是原生指令排序。使用 NCQ 技术可以对将要读取的文件进行内部排序，然后对文件的排序做最佳化线路读写，达到提升读写效率的目地。NCQ 最早是 SCSI 的标准之一，只是那时候不叫 NCQ，对这个标准稍作修改后，在 SATA 的应用上就叫做 NCQ 了，SAS 接口也支持 NCQ。SSD 虽然没有机械臂，但是 SSD 有多通道。开启 NCQ 后，SSD 主控制器会根据数据的请求和 NAND 内部数据的分布，充分利用主控制器通道的带宽达到提升性能的目地，所以 NCQ 对 SSD 也有帮助，理想状况下性能提升可达5-10倍。目前原生支持 SATA 的 SSD 都能支持 NCQ。当然，要开启NCQ，必须要使用 AHCI 模式。</p><h4 id="预留空间"><a href="#预留空间" class="headerlink" title="预留空间"></a>预留空间</h4><p>预留空间(Over-provisioning)是指用户不可操作的容量，为实际物理闪存容量减去用户可用容量。这块区域一般被用来做优化，包括磨损均衡，GC和坏块映射。</p><p>第一层为固定的7.37%，这个数字是如何得出的哪？我们知道机械硬盘和 SSD 的厂商容量是这样算的，1GB 是1,000,000,000字节(10的9 次方)，但是闪存的实际容量是每 GB=1,073,741,824，(2的30次方) ，两者相差7.37%。所以说假设1块 128GB 的 SSD，用户得到的容量是 128,000,000,000 字节，多出来的那个 7.37% 就被主控固件用做OP了。</p><p>第二层来自制造商的设置，通常为 0%，7%，28% 等，打个比方，对于 128G 颗粒的 SandForce 主控 SSD，市场上会有 120G 和 100G 两种型号卖，这个取决于厂商的固件设置，这个容量不包括之前的第一层 7.37% 。</p><p>第三层是用户在日常使用中可以分配的预留空间，用户可以在分区的时候，不分到完全的 SSD 容量来达到这个目的。不过需要注意的是，需要先做安全擦除(Secure Erase)，以保证此空间确实没有被使用过。</p><img src="/images/2015/op_1.jpg" width="400px"><p>预留空间虽然让 SSD 的可用容量小了，但是带来了减少写入放大、提高耐久性、提高性能的效果。根据经验，预留空间在 20%-35% 之间是最佳平衡点。</p><p>以一个例子，说明 SSD 的预留空间和 GC：</p><img src="/images/2015/disk_20.png"><p>如上图所示，假设系统中就两个 block，最终还剩下两个无效的 page，此时，要写入一个新 page，根据 NAND 原理，必须要先对两个无效的 page 擦除才能用于写入。此时，就需要用到 SSD 提供的额外空间，才能用 GC 方法整理出可用空间。</p><img src="/images/2015/disk_21.png" width="400px"><p>GC 的整理流程如上图所示</p><ul><li>首先，从预留空间中，找到一个空闲的 block</li><li>把 Block0 的 ABCDEFH 和 Block1 的 A 复制到空闲 block</li><li>擦除 Block0</li><li>把 Block1 的 BCDEFH  复制到Block0，此时 Block0 就有两个空闲 page 了</li><li>擦除 BLock1</li></ul><p>有空闲 page 之后，就可以按照正常的流程来写入了。</p><p>SSD 的 GC 会带来两个问题：</p><ul><li>SSD 的寿命减少，NAND Flash 中每个原件都有擦写次数限制，超过一定擦写次数后，就只能读取不能写入了</li><li>写放大问题，即内部真正写入的数据量大于用户请求写入的数据量</li></ul><p>如果频繁的在某些 block 上做 GC，会使得这些元件比其他部分更快到达擦写次数限制，因此，需要某个算法，能使得原件的擦写次数比较平均，这样才能延长 SSD 的寿命，这就需要损耗均衡控制了。</p><h4 id="写入放大"><a href="#写入放大" class="headerlink" title="写入放大"></a>写入放大</h4><p>写入放大(Write amplification)，因为闪存必须先擦除(也叫编程)才能写入，在执行这些操作的时候，移动或覆盖用户数据和元数据(metadata)不止一次。这些额外的操作，不但增加了写入数据量，减少了SSD的使用寿命，而且还吃光了闪存的带宽，间接地影响了随机写入性能。这种效应就叫写入放大(Write amplification)。一个主控的好坏主要体现在写入放大上。</p><p>比如我要写入一个 4KB 的数据，最坏的情况是，一个块里已经没有干净空间了，但是有无效数据可以擦除，所以主控就把所有的数据读到缓存，擦除块，从缓存里更新整个块的数据，再把新数据写回去。这个操作带来的写入放大就是：我实际写4K的数据，造成了整个块(1024KB)的写入操作，那就是256倍放大。同时带来了原本只需要简单的写4KB的操作变成闪存读取(1024KB)，缓存改(4KB)，闪存擦(1024KB)，闪存写(1024KB)，造成了延迟大大增加，速度急剧下降也就是自然的事了。所以，写入放大是影响 SSD 随机写入性能和寿命的关键因素。</p><p>用100%随机4KB来写入 SSD，对于目前的大多数 SSD 主控而言，在最糟糕的情况下，写入放大的实际值可能会达到或超过20倍。当然，用户也可以设置一定的预留空间来减少写入放大，假设你有个 128G 的 SSD，你只分了 64G 的区使用，那么最坏情况下的写入放大就能减少约3倍。</p><p>许多因素影响 SSD 的写入放大。下面列出了主要因素，以及它们如何影响写入放大。</p><ol><li>垃圾回收虽然增加了写入放大(被动垃圾回收不影响，闲置垃圾回收影响)，但是速度有提升。</li><li>预留空间可以减少写入放大，预留空间越大，写入放大越低。</li><li>开启 TRIM 指令后可以减少写入放大</li><li>用户使用中没有用到的空间越大，写入放大越低(需要有 Trim 支持)。</li><li>持续写入可以减少写入放大。理论上来说，持续写入的写入放大为1，但是某些因素还是会影响这个数值。</li><li>随机写入将会大大提升写入放大，因为会写入很多非连续的 LBA。</li><li>磨损平衡机制直接提高了写入放大</li></ol><h4 id="SSD-读写速度"><a href="#SSD-读写速度" class="headerlink" title="SSD 读写速度"></a>SSD 读写速度</h4><p>从软件开发人员作为 SSD 的用户角度来讲，首先需要了解的是 SSD 和普通 HDD 的性能对比，如下：</p><img src="/images/2015/disk_27.png"><p><strong>顺序读和顺序写</strong></p><p>HDD 的顺序读速度差不多为最慢的  SSD的一半，顺序写稍微好点，但也比大部分慢一倍左右的速度。</p><p><strong>随机读和随机写</strong></p><p>可以看出，HDD的随机读的性能是普通SSD的几十分之一，随机写性能更差。</p><p>因此，SSD的随机读和写性能要远远好于HDD。</p><h4 id="总结-1"><a href="#总结-1" class="headerlink" title="总结"></a>总结</h4><p>使用 SSD 时，我们需要考虑如下情况：</p><ul><li>需要充分利用其随机读写快的特性</li><li>尽可能在软件层面更新小块数据，减轻 SSD 写放大问题</li><li>避免频繁的更新数据，减轻 SSD 写放大及寿命减少的问题，尽可能使用追加的方式写数据</li></ul><h3 id="Linux测试磁盘I-O性能"><a href="#Linux测试磁盘I-O性能" class="headerlink" title="Linux测试磁盘I/O性能"></a>Linux测试磁盘I/O性能</h3><p>我们常用<code>dd</code>命令测试 Linux 磁盘 I/O 情况，<code>dd</code>只是测试顺序读写性能。对于随机读写性能测试，可采用<code>FIO</code>工具。</p><h4 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h4><p>下载并安装</p><pre class=" language-shell"><code class="language-shell">wget http://brick.kernel.dk/snaps/fio-2.2.5.tar.gzyum install libaio-devel gcc  -ytar -zxvf fio-2.2.5.tar.gzcd fio-2.2.5makemake install</code></pre><h4 id="FIO参数"><a href="#FIO参数" class="headerlink" title="FIO参数"></a>FIO参数</h4><p>随机读：</p><pre class=" language-shell"><code class="language-shell">fio -filename=/tmp/test_randread -direct=1 -iodepth 1 -thread -rw=randread -ioengine=psync -bs=16k -size=30G -numjobs=10 -runtime=60 -group_reporting -name=mytest####################说明：filename=/dev/sdb1       测试文件名称，通常选择需要测试的盘的data目录。direct=1                 测试过程绕过机器自带的buffer。使测试结果更真实。rw=randwrite             测试随机写的I/Orw=randrw                测试随机写和读的I/Obs=16k                   单次io的块文件大小为16kbsrange=512-2048         同上，提定数据块的大小范围size=5g    本次的测试文件大小为5g，以每次4k的io进行测试。numjobs=30               本次的测试线程为30.runtime=1000             测试时间为1000秒，如果不写则一直将5g文件分4k每次写完为止。ioengine=psync           io引擎使用pync方式rwmixwrite=30            在混合读写的模式下，写占30%group_reporting          关于显示结果的，汇总每个进程的信息。此外lockmem=1g               只使用1g内存进行测试。zero_buffers             用0初始化系统buffer。</code></pre><h4 id="常用测试命令"><a href="#常用测试命令" class="headerlink" title="常用测试命令"></a>常用测试命令</h4><p>随机读</p><pre class=" language-shell"><code class="language-shell">fio -filename=/tmp/test_randread -direct=1 -iodepth 1 -thread -rw=randread -ioengine=psync -bs=16k -size=30G -numjobs=10 -runtime=600 -group_reporting -name=mytest</code></pre><p>随机写</p><pre class=" language-shell"><code class="language-shell">fio -filename=/tmp/test_randread -direct=1 -iodepth 1 -thread -rw=randread -ioengine=psync -bs=16k -size=30G -numjobs=10 -runtime=600 -group_reporting -name=mytest</code></pre><p>顺序写</p><pre class=" language-shell"><code class="language-shell">fio -filename=/data/test_randread -direct=1 -iodepth 1 -thread -rw=write -ioengine=psync -bs=16k -size=30G -numjobs=10 -runtime=600 -group_reporting -name=mytest</code></pre><p>顺序读</p><pre class=" language-shell"><code class="language-shell">fio -filename=/tmp/test_randread -direct=1 -iodepth 1 -thread -rw=read -ioengine=psync -bs=16k -size=30G -numjobs=10 -runtime=60 -group_reporting -name=mytest</code></pre><p>混合随机读写</p><pre class=" language-shell"><code class="language-shell">fio -filename=/tmp/test_randread -direct=1 -iodepth 1 -thread -rw=randrw -rwmixread=70 -ioengine=psync -bs=16k -size=30G -numjobs=10 -runtime=600 -group_reporting -name=mytest -ioscheduler=noop</code></pre><h4 id="IOPS-和-吞吐量"><a href="#IOPS-和-吞吐量" class="headerlink" title="IOPS 和 吞吐量"></a><strong>IOPS 和 吞吐量</strong></h4><p>为何随机是关注IOPS，顺序关注吞吐量？</p><p>因为随机读写的话，每次IO操作的寻址时间和旋转延时都不能忽略不计，而这两个时间的存在也就限制了IOPS的大小；而顺序读写可以忽略不计寻址时间和旋转延时，主要花费在数据传输的时间上。</p><h2 id="分层详解"><a href="#分层详解" class="headerlink" title="分层详解"></a>分层详解</h2><img src="/images/2015/Linux.IO.stack_v1.0.png"><p>程序处理文件的目的就是把数据写到磁盘或者从磁盘把数据读取到内存中, 我们先用程序将数据写入到磁盘中：</p><pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span>  <span class="token string">&lt;stdio.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span>  <span class="token string">&lt;stdlib.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span><span class="token keyword">char</span> <span class="token operator">*</span>argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    FILE <span class="token operator">*</span>fp1<span class="token punctuation">,</span> <span class="token operator">*</span>fp2<span class="token punctuation">;</span>       <span class="token comment" spellcheck="true">//流指针</span>    <span class="token keyword">char</span> buf<span class="token punctuation">[</span><span class="token number">1024</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//缓冲区</span>    <span class="token keyword">int</span> n<span class="token punctuation">;</span>                 <span class="token comment" spellcheck="true">//存放fread和fwrite函数的返回值</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>argc <span class="token operator">&lt;=</span><span class="token number">2</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>       <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"请输入正确的参数\n!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>fp1 <span class="token operator">=</span> <span class="token function">fopen</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">(</span>argv<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"rb"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>         <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"读源文件%s发生错误\n"</span><span class="token punctuation">,</span><span class="token operator">*</span><span class="token punctuation">(</span>argv<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>fp2 <span class="token operator">=</span> <span class="token function">fopen</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">(</span>argv<span class="token operator">+</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"wb"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>         <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"打开目标文件%s失败\n"</span><span class="token punctuation">,</span><span class="token operator">*</span><span class="token punctuation">(</span>argv<span class="token operator">+</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token keyword">return</span> <span class="token number">2</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>n <span class="token operator">=</span> <span class="token function">fread</span><span class="token punctuation">(</span>buf<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">1024</span><span class="token punctuation">,</span> fp1<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">fwrite</span><span class="token punctuation">(</span>buf<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">)</span><span class="token punctuation">,</span> n<span class="token punctuation">,</span> fp2<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"写入文件发生错误\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token number">3</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"从源文件%s读数据写入目标文件%s中完成\n"</span><span class="token punctuation">,</span><span class="token operator">*</span><span class="token punctuation">(</span>argv<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token operator">*</span><span class="token punctuation">(</span>argv<span class="token operator">+</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//输出对应的提示</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>n <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>         <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"读文件发生错误\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token keyword">return</span> <span class="token number">4</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">fclose</span><span class="token punctuation">(</span>fp1<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">fclose</span><span class="token punctuation">(</span>fp2<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>文件先写入应用程序 buffer；调用<code>fwrite</code>后，把数据从 buffer 拷贝到了 CLib buffer，即C库标准 IO buffer。<code>fwrite</code>返回后，数据还在 CLib buffer，如果这时候进程 crash 掉，这些数据会丢失。没有写到磁盘介质上。当调用<code>fclose</code>的时候，<code>fclose</code>调用会把这些数据刷新到磁盘介质上。除了<code>fclose</code>方法外，还有一个主动刷新操作<code>fflush</code>函数，不过<code>fflush</code>函数只是把数据从 CLib buffer 拷贝到 page  cache 中，并没有刷新到磁盘上，从 page cache 刷新到磁盘上可以通过调用<code>fsync</code>函数完成。</p><p>当进程 crash 时如果数据还处在应用 cache 或 CLib cache 时候，数据会丢失。如果数据在 page cache，进程crash 掉，即使数据还没有到硬盘。数据也不会丢失。当内核 crash 掉后，只要数据没有到达 disk cache，数据都会丢失。</p><h3 id="Linux-File-I-O"><a href="#Linux-File-I-O" class="headerlink" title="Linux File I/O"></a>Linux File I/O</h3><p>Linux 给我们提供各种风格的 IO 接口来使用：</p><ul><li>Syscalls: <a href="http://man7.org/linux/man-pages/man2/open.2.html" target="_blank" rel="noopener">open</a>, <a href="http://man7.org/linux/man-pages/man2/write.2.html" target="_blank" rel="noopener">write</a>, <a href="http://man7.org/linux/man-pages/man2/read.2.html" target="_blank" rel="noopener">read</a>, <a href="http://man7.org/linux/man-pages/man2/fsync.2.html" target="_blank" rel="noopener">fsync</a>, <a href="http://man7.org/linux/man-pages/man2/sync.2.html" target="_blank" rel="noopener">sync</a>, <a href="http://man7.org/linux/man-pages/man2/close.2.html" target="_blank" rel="noopener">close</a></li><li>Standard I/O: <a href="https://linux.die.net/man/3/fopen" target="_blank" rel="noopener">fopen</a>, <a href="https://linux.die.net/man/3/fwrite" target="_blank" rel="noopener">fwrite</a>, <a href="https://linux.die.net/man/3/fread" target="_blank" rel="noopener">fread</a>, <a href="https://linux.die.net/man/3/fflush" target="_blank" rel="noopener">fflush</a>, <a href="https://linux.die.net/man/3/fclose" target="_blank" rel="noopener">fclose</a></li><li>Vectored I/O: <a href="https://linux.die.net/man/2/writev" target="_blank" rel="noopener">writev</a>, <a href="https://linux.die.net/man/2/readv" target="_blank" rel="noopener">readv</a></li><li>Memory mapped I/O: <a href="http://man7.org/linux/man-pages/man2/open.2.html" target="_blank" rel="noopener">open</a>, <a href="http://man7.org/linux/man-pages/man2/mmap.2.html" target="_blank" rel="noopener">mmap</a>, <a href="http://man7.org/linux/man-pages/man2/msync.2.html" target="_blank" rel="noopener">msync</a>, <a href="http://man7.org/linux/man-pages/man2/munmap.2.html" target="_blank" rel="noopener">munmap</a></li></ul><h4 id="标准-I-O（Standard-I-O）"><a href="#标准-I-O（Standard-I-O）" class="headerlink" title="标准 I/O（Standard I/O）"></a>标准 I/O（Standard I/O）</h4><h5 id="缓存-I-O"><a href="#缓存-I-O" class="headerlink" title="缓存 I/O"></a>缓存 I/O</h5><img src="/images/2015/disk_28.png" width="400px"><p>大多数文件系统的默认 I/O 操作都是缓存 I/O。在 Linux 的缓存 I/O 机制中，操作系统会将 I/O 的数据缓存在文件系统的页缓存（ page cache ）中，也就是说，数据会先被拷贝到操作系统内核的缓冲区中，然后才会从操作系统内核的缓冲区拷贝到应用程序的地址空间。缓存 I/O 有以下这些优点：</p><ul><li>缓存 I/O 使用了操作系统内核缓冲区，在一定程度上分离了应用程序空间和实际的物理设备。</li><li>缓存 I/O 可以减少读盘的次数，从而提高性能。</li></ul><p>标准IO通过系统调用 <code>read()</code> 和 <code>write()</code> 执行 IO 操作。当应用程序尝试读取某块数据的时候，如果这块数据已经存放在了 Page Cache 中，那么这块数据就可以立即返回给应用程序，而不需要经过实际的物理读盘操作。当然，如果数据在应用程序读取之前并未被存放在页缓存中，则会触发<em>*Page Fault</em> **然后将数据从磁盘读到 Page Cache 中去。对于写操作来说，应用程序也会将数据先写到 Page Cache 中去，数据是否被立即写到磁盘上去取决于应用程序所采用的写操作机制：如果用户采用的是同步写机制（ synchronous writes ）, 那么数据会立即被写回到磁盘上，应用程序会一直等到数据被写完为止；如果用户采用的是延迟写机制（ deferred writes ），那么应用程序就完全不需要等到数据全部被写回到磁盘，数据只要被写到 Page Cache 中去就可以了。在延迟写机制的情况下，操作系统会定期地将放在 Page Cache 中的数据刷到磁盘上。与异步写机制（ asynchronous writes ）不同的是，延迟写机制在数据完全写到磁盘上的时候不会通知应用程序，而异步写机制在数据完全写到磁盘上的时候是会返回给应用程序的。所以延迟写机制本身是存在数据丢失的风险的，而异步写机制则不会有这方面的担心。</p><p><strong>缓存 I/O 的缺点</strong></p><p>在缓存 I/O 机制中，DMA 方式可以将数据直接从磁盘读到页缓存中，或者将数据从页缓存直接写回到磁盘上，而不能直接在应用程序地址空间和磁盘之间进行数据传输，这样的话，数据在传输过程中需要在应用程序地址空间和页缓存之间进行多次数据拷贝操作，这些数据拷贝操作所带来的 CPU 以及内存开销是非常大的。</p><p>对于某些特殊的应用程序来说，避开操作系统内核缓冲区而直接在应用程序地址空间和磁盘之间传输数据会比使用操作系统内核缓冲区获取更好的性能。</p><h5 id="直接-I-O"><a href="#直接-I-O" class="headerlink" title="直接 I/O"></a>直接 I/O</h5><img src="/images/2015/disk_29.png" width="400px"><p>凡是通过直接 I/O 方式进行数据传输，数据均直接在用户地址空间的缓冲区和磁盘之间直接进行传输，完全不需要页缓存的支持。操作系统层提供的缓存往往会使应用程序在读写数据的时候获得更好的性能，但是对于某些特殊的应用程序，比如说数据库系统，它们更倾向于选择他们自己的缓存机制，因为数据库系统往往比操作系统更了解数据库中存放的数据，数据库系统可以提供一种更加有效的缓存机制来提高数据库中数据的存取性能。</p><p>要在块设备中执行直接 I/O，进程必须在打开文件的时候设置对文件的访问模式为 <code>O_DIRECT</code>，这样就等于告诉操作系统进程在接下来使用 <code>read()</code> 或者 <code>write()</code> 系统调用去读写文件的时候使用的是直接 I/O 方式，所传输的数据均不经过操作系统内核缓存空间。使用直接 I/O 读写数据必须要注意缓冲区对齐（ buffer alignment ）以及缓冲区的大小的问题，即对应 <code>read()</code> 以及 <code>write()</code> 系统调用的第二个和第三个参数。这里边说的对齐指的是文件系统块大小的对齐，缓冲区的大小也必须是该块大小的整数倍。</p><p><strong>直接 I/O 的优点</strong></p><p>直接 I/O 最主要的优点就是通过减少操作系统内核缓冲区和应用程序地址空间的数据拷贝次数，降低了对文件读取和写入时所带来的 CPU 的使用以及内存带宽的占用。这对于某些特殊的应用程序，比如自缓存应用程序来说，不失为一种好的选择。如果要传输的数据量很大，使用直接 I/O 的方式进行数据传输，而不需要操作系统内核地址空间拷贝数据操作的参与，这将会大大提高性能。<code>O_DIRECT</code> 特别适用于数据库系统这类应用。</p><p><strong>直接 I/O 潜在可能存在的问题</strong></p><p>直接 I/O 并不一定总能提供令人满意的性能上的飞跃。设置直接 I/O 的开销非常大，而直接 I/O 又不能提供缓存 I/O 的优势。缓存 I/O 的读操作可以从高速缓冲存储器中获取数据，而直接 I/O 的读数据操作会造成磁盘的同步读，这会带来性能上的差异 , 并且导致进程需要较长的时间才能执行完；对于写数据操作来说，使用直接 I/O 需要 <code>write()</code> 系统调用同步执行，否则应用程序将会不知道什么时候才能够再次使用它的 I/O 缓冲区。与直接 I/O 读操作类似的是，直接 I/O 写操作也会导致应用程序关闭缓慢。所以，应用程序使用直接 I/O 进行数据传输的时候通常会和使用异步 I/O 结合使用。</p><blockquote><p>引用Linus的话：” The thing that has always disturbed me about O_DIRECT is that the whole interface is just stupid, and was probably designed by a deranged monkey on some serious mind-controlling substances.”—Linus（O_DIRECT 就是傻逼设计）</p></blockquote><p><strong>实例</strong></p><ol><li>打开文件时，添加<code>O_DIRECT</code>参数，需要定义<code>_GNU_SOURCE</code>，否则找不到<code>O_DIRECT</code>宏定义</li></ol><pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">define</span> _GNU_SOURCE</span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;sys/types.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;sys/stat.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;fcntl.h></span></span><span class="token keyword">int</span> fd <span class="token operator">=</span> <span class="token function">open</span><span class="token punctuation">(</span><span class="token string">"test.out"</span><span class="token punctuation">,</span> O_RDWR <span class="token operator">|</span> O_CREAT <span class="token operator">|</span> O_DIRECT<span class="token punctuation">,</span> <span class="token number">0644</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><ol start="2"><li><p>读写操作的传输数据大小和缓冲区地址都需要按照一定的规则对齐,对于不同的文件系统和内核版本，需要的对齐边界不同，也没有统一的接口可以获取到该边界值。</p><ul><li><p>对于 kernel 2.4 版本：传输大小和缓冲区地址均需要按照访问文件系统的逻辑块大小对齐，比如文件系统的块大小是4K，buffer 地址需要按照4K对齐，需要读写4K倍数的数据</p></li><li><p>对于 kernel 2.6 版本：传输大小和缓冲区地址按照目标存储设备的扇区大小（一般512）对齐</p></li></ul><p>可使用<code>memalign （malloc.h）</code>来分配指定地址对齐的资源接口：<code>void *memalign(size_t boundary, size_t size)</code>;</p></li></ol><pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">define</span> _GNU_SOURCE</span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;sys/types.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;fcntl.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;malloc.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;errno.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">char</span> hello_str<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"Hello World!"</span><span class="token punctuation">;</span>        <span class="token keyword">void</span> <span class="token operator">*</span>write_buffer<span class="token punctuation">;</span>        <span class="token keyword">void</span> <span class="token operator">*</span>read_buffer<span class="token punctuation">;</span>        <span class="token keyword">int</span> fd<span class="token punctuation">;</span>         <span class="token keyword">int</span> ret <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        fd <span class="token operator">=</span> <span class="token function">open</span><span class="token punctuation">(</span><span class="token string">"test.out"</span><span class="token punctuation">,</span> O_RDWR <span class="token operator">|</span> O_CREAT <span class="token operator">|</span> O_DIRECT<span class="token punctuation">,</span> <span class="token number">0644</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>fd <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Failed to open file\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> fd<span class="token punctuation">;</span>         <span class="token punctuation">}</span>           <span class="token comment" spellcheck="true">/* allocate a 1024 bytes buffer */</span>        write_buffer <span class="token operator">=</span> <span class="token function">memalign</span><span class="token punctuation">(</span><span class="token number">512</span><span class="token punctuation">,</span> <span class="token number">512</span> <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// align by 512</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>write_buffer<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Failed to alloc write buffer\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                ret <span class="token operator">=</span> <span class="token operator">-</span>ENOMEM<span class="token punctuation">;</span>                <span class="token keyword">goto</span> bad_write_buffer<span class="token punctuation">;</span>        <span class="token punctuation">}</span>           <span class="token function">memcpy</span><span class="token punctuation">(</span>write_buffer<span class="token punctuation">,</span> hello_str<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>hello_str<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ret <span class="token operator">=</span> <span class="token function">write</span><span class="token punctuation">(</span>fd<span class="token punctuation">,</span> write_buffer<span class="token punctuation">,</span> <span class="token number">512</span> <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token keyword">if</span> <span class="token punctuation">(</span>ret <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Failed to write file\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                 <span class="token keyword">goto</span> bad_write<span class="token punctuation">;</span>        <span class="token punctuation">}</span>           <span class="token function">lseek</span><span class="token punctuation">(</span>fd<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> SEEK_SET<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// read  previous write data</span>        read_buffer <span class="token operator">=</span> <span class="token function">memalign</span><span class="token punctuation">(</span><span class="token number">512</span><span class="token punctuation">,</span> <span class="token number">512</span> <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>read_buffer<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Failed to alloc read buffer\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                ret <span class="token operator">=</span> <span class="token operator">-</span>ENOMEM<span class="token punctuation">;</span>                <span class="token keyword">goto</span> bad_read_buffer<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        ret <span class="token operator">=</span> <span class="token function">read</span><span class="token punctuation">(</span>fd<span class="token punctuation">,</span> read_buffer<span class="token punctuation">,</span> <span class="token number">512</span> <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>ret <span class="token operator">&lt;</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Failed to read file\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">goto</span> bad_read<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"read from file : %s\n"</span><span class="token punctuation">,</span> read_buffer<span class="token punctuation">)</span><span class="token punctuation">;</span>bad_read<span class="token punctuation">:</span>        <span class="token function">free</span><span class="token punctuation">(</span>read_buffer<span class="token punctuation">)</span><span class="token punctuation">;</span>bad_read_buffer<span class="token punctuation">:</span>bad_write<span class="token punctuation">:</span>        <span class="token function">free</span><span class="token punctuation">(</span>write_buffer<span class="token punctuation">)</span><span class="token punctuation">;</span>bad_write_buffer<span class="token punctuation">:</span>        <span class="token function">close</span><span class="token punctuation">(</span>fd<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> ret<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>O_DIRECT的详细描述，可以看linux open系统调用的<a href="http://man7.org/linux/man-pages/man2/open.2.html" target="_blank" rel="noopener">文档</a></p><h4 id="AIO"><a href="#AIO" class="headerlink" title="AIO"></a>AIO</h4><p>Asynchronous I/O 帮助用户程序提高 CPU 和 IO 设备的利用率和提高程序性能，特别是在高负载的IO操作下。比如各种代理服务器，数据库，流服务器等等。</p><p>很多人会将 AIO 理解成磁盘 IO 的异步方案，会将 AIO 狭隘化为类 epoll 接口在磁盘 IO 的特殊化，其实 AIO 应该是横架于整个内核的接口，它把所有的 IO 包括(本地设备，网络，管道等)以统一的异步接口提供给用户程序，每个子系统都针对接口实现自己的异步方案，而同步IO(Synchronous IO)只是在内核内部的”AIO+Blocking”.</p><img src="/images/2015/disk_31.png" width="400px"><h5 id="Linux-Native-Aio"><a href="#Linux-Native-Aio" class="headerlink" title="Linux Native Aio"></a>Linux Native Aio</h5><p>由操作系统内核提供的AIO，头文件为<code>&lt;linux/aio_abi.h&gt;</code>。Native Aio 是真正的 AIO，完全非阻塞异步的，而不是用阻塞IO和线程池模拟。主要的几个系统调用为<code>io_submit/io_setup/io_getevents</code>。</p><ul><li><strong>优点</strong>：由操作系统提供，读写操作可以直接投递到硬件，不会浪费 CPU。</li><li><strong>缺点</strong>：仅支持 Linux，必须使用 Direct_IO，所以无法利用到操作系统的 Page Cache。对于写文件来说native aio 的作用不大，应为本身写文件就是先写到 PageCache 上，直接返回，没有 IO 等待。</li></ul><h5 id="GCC-AIO"><a href="#GCC-AIO" class="headerlink" title="GCC AIO"></a>GCC AIO</h5><p>gcc 遵循 posix 标准实现了AIO。头文件为 <code>&lt;aio.h&gt;</code>，支持 FreeBSD/Linux。是通过阻塞 IO+线程池来实现的。主要的几个函数是<code>aio_read/aio_write/aio_return</code>。</p><ul><li><strong>优点</strong>：支持平台多，兼容性好，无需依赖第三方库，阻塞 IO 可以利用到操作系统的 Page Cache。</li><li><strong>缺点</strong>：据说有一些 bug 和陷阱，一直未解决。</li></ul><h5 id="Libeio"><a href="#Libeio" class="headerlink" title="Libeio"></a>Libeio</h5><p>libev 的作者开发的 AIO 实现，与 gcc aio 类似也是使用阻塞IO+线程池实现的。优点与缺点参见上面。它与gcc aio 的不同之处，代码更简洁，所以 bug 少更安全稳定。但这是一个第三方库，你的代码需要依赖 libeio。</p><h4 id="Vectored-IO"><a href="#Vectored-IO" class="headerlink" title="Vectored IO"></a>Vectored IO</h4><img src="/images/2015/disk_32.png" width="400px"><p> Vectored IO（也称为Scatter / Gather）是一种可以在单次系统调用中对多个缓冲区输入输出的方法，可以把多个缓冲区的数据写到单个数据流，也可以把单个数据流读到多个缓冲区中。其命名的原因在于数据会被分散到指定缓冲区向量，或者从指定缓冲区向量中聚集数据。这种输入输出方法也称为向量 I/O（vector I/O）。与之不同，标准读写系统调用（read，write）可以称为线性I/O（linear I/O）。</p><p>与线性 I/O 相比，分散/聚集 I/O 有如下几个优势：</p><ol><li><p>编码模式更自然</p><ul><li>如果数据本身是分段的（比如预定义的结构体的变量），向量 I/O 提供了直观的数据处理方式。</li></ul></li><li><p>效率更高</p><ul><li>单个向量 I/O 操作可以取代多个线性 I/O 操作。</li></ul></li><li><p>性能更好</p><ul><li>除了减少了发起的系统调用次数，通过内部优化，向量 I/O 可以比线性 I/O 提供更好的性能。</li></ul></li><li><p>支持原子性</p><ul><li>和多个线性 I/O 操作不同，一个进程可以执行单个向量 I/O 操作，避免了和其他进程交叉操作的风险。</li></ul></li></ol><p>Linux实现了 POSIX 1003.1-2001 中定义的一组实现 Scatter / Gather I/O 机制的系统调用。该实现满足了上面所述的所有特性。</p><p><code>readv()</code> 函数从文件描述符 fd 中读取 count 个段 (segment) (一个段即一个 iovec 结构体）到参数 iov 所指定的缓冲区中：</p><pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;sys/uio.h></span></span>ssize_t <span class="token function">readv</span> <span class="token punctuation">(</span><span class="token keyword">int</span> fd<span class="token punctuation">,</span><span class="token keyword">const</span> <span class="token keyword">struct</span> iovec <span class="token operator">*</span>iov<span class="token punctuation">,</span><span class="token keyword">int</span> count<span class="token punctuation">)</span></code></pre><p>write() 函数从参数 iov 指定的缓冲区中读取 count 个段的数据，并写入 fd 中：</p><pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;sys/uio.h></span></span>ssize_t <span class="token function">writev</span><span class="token punctuation">(</span><span class="token keyword">int</span> fd<span class="token punctuation">,</span><span class="token keyword">const</span> <span class="token keyword">struct</span> iovec <span class="token operator">*</span>iov<span class="token punctuation">,</span><span class="token keyword">int</span> count<span class="token punctuation">)</span></code></pre><p> 除了同时操作多个缓冲区外，readv() 函数和 writev() 函数的功能分别和 read()，write() 的功能一致。</p><p>每个 iovec 结构体描述一个独立的，物理不连续的缓冲区，我们称其为段(segment)：</p><pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;sys/uio.h></span></span><span class="token keyword">struct</span> iovec <span class="token punctuation">{</span>   <span class="token keyword">void</span>      <span class="token operator">*</span>iov_base<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/* pointer to start of buffer */</span>   size_t   iov_len<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/* size of buffer in bytes */</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><p>一组段的集合称为向量(vector)。每个段描述了内存中所要读写的缓冲区的地址和长度。readv() 函数在处理下个缓冲区之前，会填满当前缓冲区的 iov_len 个字节。write() 函数在处理下个缓冲区之前，会把当前缓冲区所有 iov_len 个字节数据输出，这两个函数都会顺序处理向量中的段，从 iov[0] 开始，接着是 iov[1]，一直到 iov[count - 1] 。</p><p>目前只有很少的数据库使用 Vectored IO，毕竟它们要处理很多文件，关注延时，按块访问和缓存，而分析型或列式数据库比较适合使用 Vectored IO，比如： <a href="https://github.com/apache/arrow/blob/master/java/memory/src/main/java/io/netty/buffer/ArrowBuf.java#L26-L27" target="_blank" rel="noopener">Apache Arrow</a>。</p><h4 id="Memory-Mapping"><a href="#Memory-Mapping" class="headerlink" title="Memory Mapping"></a>Memory Mapping</h4><img src="/images/2015/disk_30.png" width="400px"><p> Linux 中内存区域（ memory region ）是可以跟一个普通的文件或者块设备文件的某一个部分关联起来的，若进程要访问内存页中某个字节的数据，操作系统就会将访问该内存区域的操作转换为相应的访问文件的某个字节的操作。Linux 中提供了系统调用 <code>mmap()</code> 来实现这种文件访问方式。与标准的访问文件的方式相比，内存映射方式可以减少标准访问文件方式中 <code>read()</code> 系统调用所带来的数据拷贝操作，即减少数据在用户地址空间和操作系统内核地址空间之间的拷贝操作。映射通常适用于较大范围，对于相同长度的数据来讲，映射所带来的开销远远低于 CPU 拷贝所带来的开销。当大量数据需要传输的时候，采用内存映射方式去访问文件会获得比较好的效率。数据库引擎中大量采用 mmap 的方式。</p><p>用户调用<code>mmap</code>将文件映射到内存时，内核进行一系列的参数检查，然后创建对应的<code>vma</code>，然后给该<code>vma</code>绑定<code>vma_ops</code>。当用户访问到<code>mmap</code>对应的内存时，CPU会触发<code>page fault</code>，在<code>page fault</code>回调中，将申请<code>pagecache</code>中的匿名页，读取文件到其物理内存中，然后将<code>pagecache</code>中所属的物理页与用户进程的<code>vma</code>进行映射。</p><p>其整个内核逻辑流程可以用下图来表示:</p><img src="/images/2015/disk_33.png"><h3 id="Page-Cache"><a href="#Page-Cache" class="headerlink" title="Page Cache"></a>Page Cache</h3><p>引入<code>Cache</code> 层的目的是为了提高 Linux 对磁盘访问的性能。Cache 层在内存中缓存了磁盘上的部分数据。当数据的请求到达时，如果在 Cache 中存在该数据且是最新的，则直接将数据传递给用户程序，免除了对底层磁盘的操作，提高了性能。Cache 层也正是磁盘 IOPS 为什么能突破200的主要原因之一。</p><p>在 Linux 的实现中，文件 Cache 分为两个层面，一是 Page Cache，另一个 Buffer Cache，每一个 Page Cache 包含若干 Buffer Cache。Page Cache 主要用来作为文件系统上的文件数据的缓存来用，尤其是针对当进程对文件有<code>read/write</code>操作的时候。Buffer Cache 则主要是设计用来在系统对块设备进行读写的时候，对块进行数据缓存的系统来使用。</p><p>磁盘 Cache 有两大功能：预读和回写。预读其实就是利用了局部性原理，具体过程是：对于每个文件的第一个读请求，系统读入所请求的页面并读入紧随其后的少数几个页面（通常是三个页面），这时的预读称为同步预读。对于第二次读请求，如果所读页面不在 Cache 中，即不在前次预读的页中，则表明文件访问不是顺序访问，系统继续采用同步预读；如果所读页面在 Cache 中，则表明前次预读命中，操作系统把预读页的大小扩大一倍，此时预读过程是异步的，应用程序可以不等预读完成即可返回，只要后台慢慢读页面即可，这时的预读称为异步预读。任何接下来的读请求都会处于两种情况之一：第一种情况是所请求的页面处于预读的页面中，这时继续进行异步预读；第二种情况是所请求的页面处于预读页面之外，这时系统就要进行同步预读。</p><p>回写是通过暂时将数据存在 Cache 里，然后统一异步写到磁盘中。通过这种异步的数据I/O模式解决了程序中的计算速度和数据存储速度不匹配的鸿沟，减少了访问底层存储介质的次数，使存储系统的性能大大提高。Linux 2.6.32内核之前，采用 pdflush 机制来将脏页真正写到磁盘中，什么时候开始回写呢？下面两种情况下，脏页会被写回到磁盘：</p><ol><li>在空闲内存低于一个特定的阈值时，内核必须将脏页写回磁盘，以便释放内存。</li><li>当脏页在内存中驻留超过一定的阈值时，内核必须将超时的脏页写会磁盘，以确保脏页不会无限期地驻留在内存中。</li></ol><p>回写开始后，pdflush 会持续写数据，直到满足以下两个条件：</p><ol><li>已经有指定的最小数目的页被写回到磁盘。</li><li>空闲内存页已经回升，超过了阈值。</li></ol><p>Linux 2.6.32 内核之后，放弃了原有的 pdflush 机制，改成了 bdi_writeback  机制。bdi_writeback 机制主要解决了原有 fdflush 机制存在的一个问题：在多磁盘的系统中，pdflush 管理了所有磁盘的 Cache，从而导致一定程度的 I/O 瓶颈。bdi_writeback 机制为每个磁盘都创建了一个线程，专门负责这个磁盘的 Page Cache 的刷新工作，从而实现了每个磁盘的数据刷新在线程级的分离，提高了 I/O 性能。</p><p>回写机制存在的问题是回写不及时引发数据丢失（可由<code>sync|fsync</code>解决），回写期间读 I/O 性能很差。</p><p>详细的分析可以参见：<a href="/assets/book/linux/Linux.Kernel.Cache.pdf">Linux内核文件Cache 机制</a>、<a href="/assets/book/linux/Linux.Kernel.Delay.Write.pdf">Linux内核延迟写机制</a></p><h4 id="Page-Cache-优化"><a href="#Page-Cache-优化" class="headerlink" title="Page Cache 优化"></a>Page Cache 优化</h4><h5 id="fadvise"><a href="#fadvise" class="headerlink" title="fadvise"></a>fadvise</h5><p>在典型的 I/O 密集型的数据库服务器如 MySQL 中，会涉及到大量的文件读写，通常这些文件都是通过 buffer io 来使用的，以便充分利用到 Linux的 Page Cache。</p><p>Buffer I/O 的特点是读的时候，先检查页缓存里面是否有需要的数据，如果没有就从设备读取，返回给用户的同时，加到缓存一份;写的时候，直接写到缓存去，再由后台的进程定期刷到磁盘去。这样的机制看起来非常的好，在实践中也效果很好。</p><p>但是如果你的 I/O 非常密集，就会出现问题。首先由于 pagesize 是4K，内存的利用效率比较低。其次缓存的淘汰算法很简单，由操作系统自主进行，用户不大好参与。当你的写很多，超过系统内存的某个上限的时候，后台的进程(swapd)要出来回收页面，而且一旦回收的速度小于写入的速度，就会出现不可预期的行为。<br><strong>这里面最大的问题是：当你使用的内存包括缓存，没超过操作系统规定的上限的时候，操作系统选择不作为，让用户充分使用缓存，从它的角度来看这样效率最高。但是正是由于这种策略在实践中会导致问题。</strong></p><p>比如说MySQL服务器，我们可以把数据直接走 direct IO ,但是它的日志是走 bufferio 的。因为走 directio 需要对写入文件的偏移和大小都要扇区对全，这对日志系统来讲太麻烦了。由于 MySQL 是基于事务的，会涉及到大量的日志动作，频繁的写入，然后 <code>fsync</code> 日志一旦写入磁盘，buffer page 就没用了，但是一直会在内存呆着，直到达到内存上限，引起操作系统突然大量回收页面，出现 IO 柱塞或者内存交换等负面问题。</p><p>那么我们知道了困境在哪里，我们可以主动避免这个现象的发生。有二种方法：</p><ol><li>日志也走 direct io ,需要规模的修改 MySQL 代码，如 percona 就这么做了，提供相应的 patch。</li><li>日志还是走 buffer io, 但是定期清除无用 Page Cache.</li></ol><p>第一张方法不是我们要讨论的，我们重点讨论第二种如何做：</p><p>我们在程序里知道文件的句柄，是不是就可以很轻松的用：</p><pre class=" language-c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">posix_fadvise</span><span class="token punctuation">(</span><span class="token keyword">int</span> fd<span class="token punctuation">,</span> off_t offset<span class="token punctuation">,</span> off_t len<span class="token punctuation">,</span> <span class="token keyword">int</span> advice<span class="token punctuation">)</span><span class="token punctuation">;</span>POSIX_FADV_DONTNEEDThe specified data will not be accessed in the near future<span class="token punctuation">.</span></code></pre><p>来解决问题呢？<br>比如写类似 <code>posix_fadvise(fd, 0, len_of_file, POSIX_FADV_DONTNEED)</code>；这样的代码来清掉文件所属的缓存。但是你会发现内存根本就没下来, <strong>为什么相关的内存没有被释放出来：页面还脏是最关键的因素。</strong></p><p>但是我们如何保证页面全部不脏呢？<code>fdatasync</code>或者<code>fsync</code>都是选择, 或者 Linux 下新系统调用<code>sync_file_range</code>都是可用的，这几个都是使用<code>WB_SYNC_ALL</code>模式强制要求回写完毕才返回的。<br>如这样做：</p><pre class=" language-C"><code class="language-C">`fdatasync(fd);`</code></pre><h5 id="mlock-文件预热"><a href="#mlock-文件预热" class="headerlink" title="mlock/文件预热"></a>mlock/文件预热</h5><p>使用 <code>mlock</code> 可以将进程使用的部分或者全部的地址空间锁定在物理内存中，防止其被交换到 swap 空间。对于高吞吐量的分布式消息队列来说，追求的是消息读写低延迟，那么肯定希望尽可能地多使用物理内存，提高数据读写访问的操作效率。</p><p>文件预热的目的主要有两点：</p><ol><li>由于仅分配内存并进行<code>mlock</code>系统调用后并不会为程序完全锁定这些内存，因为其中的分页可能是写时复制的。因此，就有必要对每个内存页面中写入一个假的值。比如：RocketMQ 是在创建并分配MappedFile 的过程中，预先写入一些随机值至<code>mmap</code>映射出的内存空间里。</li><li>调用<code>mmap</code>进行内存映射后，OS 只是建立虚拟内存地址至物理地址的映射表，而实际并没有加载任何文件至内存中。程序要访问数据时OS会检查该部分的分页是否已经在内存中，如果不在，则发出一次缺页中断。这里，可以想象下1G的 CommitLog 需要发生多少次缺页中断，才能使得对应的数据才能完全加载至物理内存中。RocketMQ 的做法是，在做<code>mmap</code>内存映射的同时进行<code>madvise</code>系统调用，目的是使 OS 做一次内存映射后对应的文件数据尽可能多的预加载至内存中，从而达到内存预热的效果。</li></ol><h3 id="虚拟文件系统（VFS-）"><a href="#虚拟文件系统（VFS-）" class="headerlink" title="虚拟文件系统（VFS ）"></a>虚拟文件系统（VFS ）</h3><img src="/images/2015/disk_34.png" width="400px"><p>VFS（Virtual File System）虚拟文件系统是一种软件机制，更确切的说扮演着文件系统管理者的角色，与它相关的数据结构只存在于物理内存当中。它的作用是：屏蔽下层具体文件系统操作的差异，为上层的操作提供一个统一的接口。正是因为有了这个层次，Linux 中允许众多不同的文件系统共存并且对文件的操作可以跨文件系统而执行。</p><p>VFS 中包含着向物理文件系统转换的一系列数据结构，如 VFS 超级块、VFS 的 inode、各种操作函数的转换入口等。Linux 中 VFS 依靠四个主要的数据结构来描述其结构信息，分别为超级块、索引结点、目录项和文件对象。</p><ol><li>超级块（Super Block）：超级块对象表示一个文件系统。它存储一个已安装的文件系统的控制信息，包括文件系统名称（比如Ext2）、文件系统的大小和状态、块设备的引用和元数据信息（比如空闲列表等等）。VFS超级块存在于内存中，它在文件系统安装时建立，并且在文件系统卸载时自动删除。同时需要注意的是对于每个具体的文件系统来说，也有各自的超级块，它们存放于磁盘。</li><li>索引结点（inode）：索引结点对象存储了文件的相关元数据信息，例如：文件大小、设备标识符、用户标识符、用户组标识符等等。inode 分为两种：一种是 VFS 的 inode，一种是具体文件系统的 inode。前者在内存中，后者在磁盘中。所以每次其实是将磁盘中的 inode调进填充内存中的 inode，这样才是算使用了磁盘文件 inode。当创建一个文件的时候，就给文件分配了一个 inode。一个 inode 只对应一个实际文件，一个文件也会只有一个 inode。</li><li>目录项（Dentry）：引入目录项对象的概念主要是出于方便查找文件的目的。不同于前面的两个对象，目录项对象没有对应的磁盘数据结构，只存在于内存中。一个路径的各个组成部分，不管是目录还是普通的文件，都是一个目录项对象。如，在路径<code>/home/test.java</code>中，目录 /, home, source和文件 test.java 都对应一个目录项对象。VFS 在查找的时候，根据一层一层的目录项找到对应的每个目录项的Inode，那么沿着目录项进行操作就可以找到最终的文件。</li><li>文件对象（File）：文件对象描述的是进程已经打开的文件。因为一个文件可以被多个进程打开，所以一个文件可以存在多个文件对象。一个文件对应的文件对象可能不是惟一的，但是其对应的索引节点和目录项对象肯定是惟一的。</li></ol><p>详细的分析可以参见：<a href="/assets/book/linux/Linux.Virtual.Filesystem.pdf">inux虚拟文件系统</a></p><h3 id="Ext-4-文件系统"><a href="#Ext-4-文件系统" class="headerlink" title="Ext 4 文件系统"></a>Ext 4 文件系统</h3><p>全称 Linux extended file system, extfs，即 Linux 扩展文件系统，Ext2 就代表第二代文件扩展系统，Ext3/Ext4 以此类推，它们都是 Ext2 的升级版，只不过为了快速恢复文件系统，减少一致性检查的时间，增加了日志功能，所以 Ext2 被称为<strong>索引式文件系统</strong>，而 Ext3/Ext4 被称为<strong>日志式文件系统</strong>。</p><blockquote><p> Linux支持很多文件系统，包括网络文件系统(NFS)、Windows的Fat文件系统。  </p></blockquote><p>查看Linux支持的文件系统：<code>ls -l /lib/modules/$(uname -r)/kernel/fs</code></p><pre class=" language-shell"><code class="language-shell">xiehui@xiehui-desktop:~/apps$ ls -l /lib/modules/$(uname -r)/kernel/fs总用量 236drwxr-xr-x 2 root root  4096 4月  24 09:59 9pdrwxr-xr-x 2 root root  4096 4月  24 09:59 adfsdrwxr-xr-x 2 root root  4096 4月  24 09:59 affsdrwxr-xr-x 2 root root  4096 4月  24 09:59 afsdrwxr-xr-x 2 root root  4096 4月  24 09:59 aufsdrwxr-xr-x 2 root root  4096 4月  24 09:59 autofsdrwxr-xr-x 2 root root  4096 4月  24 09:59 befsdrwxr-xr-x 2 root root  4096 4月  24 09:59 bfs........</code></pre><p>查看Linux支持的文件系统(已载入到内存中)：<code>cat /proc/filesystems</code></p><pre class=" language-shell"><code class="language-shell">xiehui@xiehui-desktop:~/apps$ cat /proc/filesystemsnodev    sysfsnodev    rootfsnodev    ramfsnodev    pipefsnodev    hugetlbfsnodev    devpts    ext3    ext2    ext4...</code></pre><p>查看当前机器使用的文件系统类型<code>df -T</code></p><pre class=" language-shell"><code class="language-shell">xiehui@xiehui-desktop:~/apps$ df -T文件系统                    类型         1K-块     已用      可用 已用% 挂载点udev                        devtmpfs   3939508        0   3939508    0% /devtmpfs                       tmpfs       792544     2112    790432    1% /run/dev/mapper/ubuntu--vg-root ext4     243559804 77716804 153401196   34% /</code></pre><h4 id="主要特性"><a href="#主要特性" class="headerlink" title="主要特性"></a>主要特性</h4><p><strong>兼容性(Compatibility)</strong></p><p>Ext4 兼容 Ext3，升级只需运行一些命令即可，不需要变动磁盘格式，升级中不会影响已有的数据。</p><p><strong>更大的文件系统和文件大小(Bigger File System and File Sizes )</strong></p><table><thead><tr><th align="left">File System</th><th align="left">Max FS Size</th><th align="left">Max File Size</th><th align="left">block addressing bits</th></tr></thead><tbody><tr><td align="left">Ext3</td><td align="left">16TB</td><td align="left">2TB</td><td align="left">32</td></tr><tr><td align="left">Ext4</td><td align="left">1EB</td><td align="left">16TB</td><td align="left">48</td></tr></tbody></table><p>​    Tips:</p><ul><li><p>1 EB = 1024 * 1024 TB</p></li><li><p>block size： 4 bytes</p></li></ul><p><strong>拓展子目录数量(Sub directory scalability )</strong></p><p>在一个目录中 :</p><ul><li><p>Ext3 支持 32000 个子目录</p></li><li><p>Ext4 支持 64000 个子目录</p></li></ul><p><strong>拓展块大小(Extents)</strong></p><p>Ext3 为每个文件维护一个 block 表，用于保存这个文件在磁盘上的块号，因为一个 block 只有 4kb 的大小，所以对于一个大文件来说的话，需要维护的 block 表占用的空间就比较可观了，删除和截断等操作的效率也就比较低。</p><p>Ext4 使用 extents 代替 block。 extents 由多个连续的 block 组成。能够有效的减少需要维护的 block 表的长度，进而提高在文件上操作的效率</p><p><strong>多块分配(Multiblock allocation)</strong></p><p>当需要将新数据写入磁盘上时，需要块分配器决定将数据写入哪一个空闲块中。</p><p>但是 Ext3 写入的时候，每次只分配一个 block(4kb), 也就是说如果要写入 100 Mb 的数据时会调用块分配器 25600 词，效率很低，分配器也无法作优化。</p><p>Ext4 使用多块分配器，根据需要，一次调用分配多个块(一个 extents)</p><p><strong>延迟分配(Delayed allocation)</strong></p><p>传统的文件系统尽可能早的分配磁盘 blocks，当进程调用 <code>write()</code> 时，文件系统立即为其分配 block，即使数据并没有立即写入磁盘(在缓存中临时存放)。这种方式的缺点是当进程持续向文件写入数据，文件增长时需要分配另外的 block 来存放新增的数据，块分配器无法对分配方式作优化。</p><p>而延迟分配策略解决了这个问题，当进程调用 <code>write()</code> 时它并不立即分配 blocks，直到数据从缓存写入磁盘时进行分配。写入磁盘时，数据基本就不再增长了，此时使用多块分配器为该文件分配多个 extents</p><p><strong>快速文件系统检测(Fast fsck)</strong></p><p>文件系统检测是一项非常慢的操作，特别是检查文件系统中所有的 inode 节点。</p><p>Ext4 跳过未使用的 inode 节点来加快检测速度，根据已使用的 inode 节点的数量不同，性能会提升 2 到 20 倍。</p><p><strong>日志校验(Journal checksumming)</strong></p><p>使用校验和来判断一个日志块是否已失效。</p><p>Ext3 使用两阶段(执行 + commit/rollback)提交来保证正确性。</p><p>Ext4 使用一阶段提交 + 日志校验来保证正确性，性能提升大约 20%。</p><p><strong>禁用日志模式(“No Journaling” mode )</strong></p><p>日志确保了磁盘上内容变动时文件系统的完整性，但是却带来了少量的额外开销(日志记录)。</p><p>通过禁用日志特性可以获得少量的性能提升</p><p><strong>在线磁盘整理(Online defragmentation )</strong></p><p>这个特性正在开发中，会包含到之后的版本中。</p><p>通过使用延迟分配、extents 和 多块分配能够有效减少磁盘碎片，但是文件内容变动(可以需要另外的 block 来存放数据，这个 block 可能会离原来的地方比较远，从而引发一次额外的寻道)也会带来很多碎片，磁盘碎片整理可以将文件尽可能的重分配到连续的 block 中，从而减少磁盘碎片，提高访问效率。</p><p><strong>Inode 相关特性(Inode-related features)</strong></p><ol><li>更大的 inodes：Ext3 支持配置 inode 大小，默认为 128 bytes，Ext4 默认为 256 bytes。增加了一些额外的域(比如纳秒级的 timestamps 或 inode 版本)，剩余的空间用来保存拓展属性。这种方式可以使访问这些属性的速度更快，从而提高应用程序的性能。</li><li>当创建目录时，直接为其创建几个保留的 inode 节点，当在这个目录中创建新文件时，就可以直接使用这些保留的 inode 节点，从而提高文件创建和删除的效率。</li><li>Ext3 的时间属性是秒级的，Ext4 的时间属性是纳秒级的。</li></ol><p><strong>磁盘预分配(Persistent preallocation )</strong></p><p>这个特性允许应用程序预先分配磁盘空间，应用通知文件系统预先分配空间，文件系统预先分配需要的块和数据结构，直到应用程序向该空间写数据前，该空间中是没有数据的。</p><p><strong>屏障默认开启(Barriers on by default)</strong></p><p>这个选项改善了文件系统的完整性，但损失了一些性能。</p><p>文件系统在写入数据之前必须先将事务信息记录到日志，然后根据顺序写入，但是这种方式效率比较低。现代的驱动有很大的内部缓存并且为了得到更好的性能会进行操作重排序，所以在写入数据之前，文件系统必须先显式的指示磁盘加载所有的日志。</p><p>内核的 阻塞 I/O 子系统使用屏障来实现，即在加载日志时进行阻塞，其他数据 I/O 操作就无法再进行了。</p><h3 id="通用块层"><a href="#通用块层" class="headerlink" title="通用块层"></a>通用块层</h3><img src="/images/2015/disk_35.png"><p>通用块层的主要工作是：接收上层发出的磁盘请求，并最终发出 I/O 请求。该层隐藏了底层硬件块设备的特性，为块设备提供了一个通用的抽象视图。</p><p>对于 VFS 和具体的文件系统来说，块（Block）是基本的数据传输单元，当内核访问文件的数据时，它首先从磁盘上读取一个块。但是对于磁盘来说，扇区是最小的可寻址单元，块设备无法对比它还小的单元进行寻址和操作。由于扇区是磁盘的最小可寻址单元，所以块不能比扇区还小，只能整数倍于扇区大小，即一个块对应磁盘上的一个或多个扇区。一般来说，块大小是2的整数倍，而且由于 Page Cache 层的最小单元是页（Page），所以块大小不能超过一页的长度。</p><p>大多情况下，数据的传输通过 DMA 方式。旧的磁盘控制器，仅仅支持简单的 DMA 操作：每次数据传输，只能传输磁盘上相邻的扇区，即数据在内存中也是连续的。这是因为如果传输非连续的扇区，会导致磁盘花费更多的时间在寻址操作上。而现在的磁盘控制器支持“分散/聚合”DMA操作，这种模式下，数据传输可以在多个非连续的内存区域中进行。为了利用“分散/聚合”DMA操作，块设备驱动必须能处理被称为段（segments）的数据单元。一个段就是一个内存页面或一个页面的部分，它包含磁盘上相邻扇区的数据。</p><p>通用块层是粘合所有上层和底层的部分，一个页的磁盘数据布局如下图所示：</p><img src="/images/2015/1.jpeg"><p>详细的分析可以参见：<a href="/assets/book/linux/Linux.Generic.Block.Layer.pdf">Linux通用块设备层</a></p><h3 id="I-O调度层"><a href="#I-O调度层" class="headerlink" title="I/O调度层"></a>I/O调度层</h3><p>I/O调度层的功能是管理块设备的请求队列。即接收通用块层发出的I/O请求，缓存请求并试图合并相邻的请求。并根据设置好的调度算法，回调驱动层提供的请求处理函数，以处理具体的 I/O 请求。</p><p>如果简单地以内核产生请求的次序直接将请求发给块设备的话，那么块设备性能肯定让人难以接受，因为磁盘寻址是整个计算机中最慢的操作之一。为了优化寻址操作，内核不会一旦接收到 I/O 请求后，就按照请求的次序发起块 I/O 请求。为此 Linux 实现了几种 I/O 调度算法，算法基本思想就是通过合并和排序 I/O 请求队列中的请求，以此大大降低所需的磁盘寻道时间，从而提高整体I/O性能。</p><p>常见的 I/O 调度算法包括 Noop 调度算法（No Operation）、CFQ（完全公正排队I/O调度算法）、DeadLine（截止时间调度算法）、AS 预测调度算法等。</p><ul><li>Noop 算法：最简单的 I/O 调度算法。该算法仅适当合并用户请求，并不排序请求。新的请求通常被插在调度队列的开头或末尾，下一个要处理的请求总是队列中的第一个请求。这种算法是为不需要寻道的块设备设计的，如 SSD。因为其他三个算法的优化是基于缩短寻道时间的，而 SSD 硬盘没有所谓的寻道时间且I/O响应时间非常短。</li><li>CFQ 算法：算法的主要目标是在触发 I/O 请求的所有进程中确保磁盘 I/O 带宽的公平分配。算法使用许多个排序队列，存放了不同进程发出的请求。通过散列将同一个进程发出的请求插入同一个队列中。采用轮询方式扫描队列，从第一个非空队列开始，依次调度不同队列中特定个数（公平）的请求，然后将这些请求移动到调度队列的末尾。</li><li>Deadline 算法：算法引入了两个排队队列分别包含读请求和写请求，两个最后期限队列包含相同的读和写请求。本质就是一个超时定时器，当请求被传给电梯算法时开始计时。一旦最后期限队列中的超时时间已到，就想请求移至调度队列末尾。Deadline算法避免了电梯调度策略（为了减少寻道时间，会优先处理与上一个请求相近的请求）带来的对某个请求忽略很长一段时间的可能。</li><li>AS 算法：AS 算法本质上依据局部性原理，预测进程发出的读请求与刚被调度的请求在磁盘上可能是“近邻”。算法统计每个进程 I/O 操作信息，当刚刚调度了由某个进程的一个读请求之后，算法马上检查排序队列中的下一个请求是否来自同一个进程。如果是，立即调度下一个请求。否则，查看关于该进程的统计信息，如果确定进程p可能很快发出另一个读请求，那么就延迟一小段时间。</li></ul><p>前文中计算出的 IOPS 是理论上的随机读写的最大 IOPS，在随机读写中，每次 I/O 操作的寻址和旋转延时都不能忽略不计，有了这两个时间的存在也就限制了 IOPS 的大小。现在如果我们考虑在读取一个很大的存储连续分布在磁盘的文件，因为文件的存储的分布是连续的，磁头在完成一个读 I/O 操作之后，不需要重新寻址，也不需要旋转延时，在这种情况下我们能到一个很大的 IOPS 值。这时由于不再考虑寻址和旋转延时，则性能瓶颈仅是数据传输时延，假设数据传输时延为0.4ms，那么IOPS=1000 / 0.4 = 2500 IOPS。</p><p>在许多的开源框架如 Kafka、HBase中，都通过追加写的方式来尽可能的将随机 I/O 转换为顺序 I/O，以此来降低寻址时间和旋转延时，从而最大限度的提高 IOPS。</p><p>详细的分析可以参见：<a href="/assets/book/linux/Linux.Kernel.IO.Scheduler.pdf">Linux内核IO调度层</a></p><h3 id="块设备驱动层"><a href="#块设备驱动层" class="headerlink" title="块设备驱动层"></a>块设备驱动层</h3><p>驱动层中的驱动程序对应具体的物理块设备。它从上层中取出I/O请求，并根据该I/O请求中指定的信息，通过向具体块设备的设备控制器发送命令的方式，来操纵设备传输数据。</p><h2 id="系统调用"><a href="#系统调用" class="headerlink" title="系统调用"></a>系统调用</h2><h3 id="open"><a href="#open" class="headerlink" title="open"></a>open</h3><p><code>open</code> 负责在内核生成与文件相对应的<code>struct file</code>元数据结构，并且与文件系统中该文件的<code>struct inode</code>进行关联，装载对应文件系统的操作回调函数，然后返回一个<code>int fd</code>给用户进程。后续用户对该文件的相关操作，会涉及到其相关的<code>struct file</code>、<code>struct inode</code>、<code>inode-&gt;i_op</code>、<code>inode-&gt;i_fop</code>和<code>inode-&gt;i_mapping-&gt;a_ops</code>等。</p><blockquote><p>文件操作对应的偏移存储于struct file中，每个open的文件单独维护一份，同一个文件的读写操作共享同一个偏移。</p></blockquote><p>其整个内核逻辑流程可以用下图来表示：</p><img src="/images/2015/disk_36.png"><h3 id="write"><a href="#write" class="headerlink" title="write"></a>write</h3><p><code>write</code>的写逻辑路径有好几条，最常使用的就是利用<code>pagecache</code>延迟写的这条路径，所以主要分析这个。在<code>write</code>调用的调用、返回之间，其负责分配新的<code>pagecache</code>，将数据写入<code>pagecache</code>，同时根据系统参数，判断<code>pagecache</code>中的脏数据占比来确定是否要触发回写逻辑。其详细的代码分析可以参考：<a href="/assets/book/linux/Linux.Kernel.Write.Procedure.pdf">《Linux内核写文件过程》</a>和<a href="/assets/book/linux/Linux.Kernel.Delay.Write.pdf">《Linux内核延迟写机制》</a>。</p><p>其整个内核逻辑流程可以用下图来表示：</p><img src="/images/2015/disk_37.png"><h3 id="read"><a href="#read" class="headerlink" title="read"></a>read</h3><p><code>read</code>的读逻辑中包含预期<code>readahead</code>的逻辑，其可以通过与<code>fadvise</code>的配合达到文件预取的效果。这部分的代码分析可以参考：<a href="/assets/book/linux/Linux.Kernel.Read.Procedure.pdf">《Linux内核读文件过程》</a></p><p>其整个内核逻辑流程可以用下图来表示：</p><img src="/images/2015/disk_38.png"><h3 id="fsync-fdatasync"><a href="#fsync-fdatasync" class="headerlink" title="fsync/fdatasync"></a>fsync/fdatasync</h3><p><code>fsync</code>和<code>fdatasync</code>主要逻辑流程基本相同。其通过触发对应文件的<code>pagecache</code>脏页回写，并且阻塞等待到回写逻辑完成，以达到同步数据的目的。</p><p>其整个内核逻辑流程可以用下图来表示：</p><img src="/images/2015/disk_39.png"><h3 id="mmap"><a href="#mmap" class="headerlink" title="mmap"></a>mmap</h3><p>用户调用<code>mmap</code>将文件映射到内存时，内核进行一系列的参数检查，然后创建对应的<code>vma</code>，然后给该<code>vma</code>绑定<code>vma_ops</code>。当用户访问到<code>mmap</code>对应的内存时，CPU会触发<code>page fault</code>，在<code>page fault</code>回调中，将申请<code>pagecache</code>中的匿名页，读取文件到其物理内存中，然后将<code>pagecache</code>中所属的物理页与用户进程的<code>vma</code>进行映射。</p><p>其整个内核逻辑流程可以用下图来表示，其中<code>page fault</code>部分比较简略，可以参考<a href="/assets/book/linux/linux-page-fault/">Linux Page Fault(缺页异常)</a>： </p><img src="/images/2015/disk_40.png"><h3 id="munmap"><a href="#munmap" class="headerlink" title="munmap"></a>munmap</h3><img src="/images/2015/disk_41.png"><h3 id="msync"><a href="#msync" class="headerlink" title="msync"></a>msync</h3><p><code>msync</code>的实际实现与其手册中的描述有很大不同，其调用时，<code>flag=MS_SYNC</code>等同于对<code>mmap</code>对应的文件调用<code>fsync</code>；<code>flag=MS_ASYNC/MS_INVALIDATE</code>其实什么都不执行。</p><img src="/images/2015/disk_42.png"><h3 id="madvise"><a href="#madvise" class="headerlink" title="madvise"></a>madvise</h3><img src="/images/2015/disk_43.png"><h3 id="fadvise-1"><a href="#fadvise-1" class="headerlink" title="fadvise"></a>fadvise</h3><img src="/images/2015/disk_44.png"><h2 id="编程实践"><a href="#编程实践" class="headerlink" title="编程实践"></a>编程实践</h2><h3 id="File-IO"><a href="#File-IO" class="headerlink" title="File IO"></a>File IO</h3><p><code>java.io</code> 包下的 <code>FileReader</code>、 <code>FileWriter</code> 之类 API ，性能太差基本不考虑使用。</p><h3 id="FileChannel"><a href="#FileChannel" class="headerlink" title="FileChannel"></a>FileChannel</h3><p>FileChannel 采用了 ByteBuffer 内存缓冲区，让我们可以非常精准的控制写盘的大小，这是普通 IO 无法实现的。我们在写入时注意控制 ByteBuffer 的大小，FileChannel 只有在一次写入 4kb 的整数倍时，才能发挥出实际的性能，主要取决你机器的磁盘结构，并且受到操作系统，文件系统，CPU 的影响，需要对使用的机器进行测试获取到最佳写入大小。</p><img src="/images/2015/disk_45.png"><p>FIleChannel <code>write</code> 和 <code>read</code> 方法均是<strong>线程安全</strong>的，FileChannel 内部通过一把 <code>private final Object positionLock = new Object();</code> 锁来控制并发。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>FileInputStream<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>FileOutputStream<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>nio<span class="token punctuation">.</span>ByteBuffer<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>nio<span class="token punctuation">.</span>channels<span class="token punctuation">.</span>FileChannel<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestFileChannel</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        FileInputStream inputStream <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span><span class="token string">"/home/xiehui/test.in"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        FileChannel in <span class="token operator">=</span> inputStream<span class="token punctuation">.</span><span class="token function">getChannel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        FileOutputStream outputStream <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span><span class="token string">"/home/xiehui/test.out"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        FileChannel out <span class="token operator">=</span> outputStream<span class="token punctuation">.</span><span class="token function">getChannel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ByteBuffer buffer <span class="token operator">=</span> ByteBuffer<span class="token punctuation">.</span><span class="token function">allocate</span><span class="token punctuation">(</span><span class="token number">4096</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">/**         * long position = 1024L;         * 指定 position 读取 4kb 的数据         * fileChannel.read(buffer,position)；         * 从当前文件指针的位置读取 4kb 的数据         * fileChannel.read(buffer);         */</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>in<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>buffer<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            buffer<span class="token punctuation">.</span><span class="token function">flip</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">/**             * byte[] data = new byte[4096];             * long position = 1024L;             * 指定 position 写入 4kb 的数据             * fileChannel.write(ByteBuffer.wrap(data), position);             * 从当前文件指针的位置写入 4kb 的数据             * fileChannel.write(ByteBuffer.wrap(data));             */</span>            out<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>buffer<span class="token punctuation">)</span><span class="token punctuation">;</span>            buffer<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        out<span class="token punctuation">.</span><span class="token function">force</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//将文件数据和元数据强制写到磁盘上</span>        inputStream<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        outputStream<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="MMAP"><a href="#MMAP" class="headerlink" title="MMAP"></a>MMAP</h3><p>从代码层面上看，从硬盘上将文件读入内存，都要经过文件系统进行数据拷贝，并且数据拷贝操作是由文件系统和硬件驱动实现的，理论上来说，拷贝数据的效率是一样的。但是通过内存映射的方法访问硬盘上的文件，效率要比read和write系统调用高，原因是：</p><p><code>read()</code>是系统调用，首先将文件从硬盘拷贝到内核空间的一个缓冲区，再将这些数据拷贝到用户空间，实际上进行了两次数据拷贝；</p><p><code>map()</code>也是系统调用，<strong>但没有进行数据拷贝，当缺页中断发生时，直接将文件从硬盘拷贝到用户空间，只进行了一次数据拷贝</strong>。</p><p>所以，<strong>理论</strong>上采用内存映射的读写效率要比传统的<code>read/write</code>性能高。</p><p><strong>优缺点</strong>：</p><ol><li><p>MMAP 使用虚拟内存，因此分配(map)的内存大小不受JVM的-Xmx参数限制，但是也是有大小限制的。MMAP 使用时必须实现指定好内存映射的大小，并且一次 map 的大小限制在 1.5G 左右，重复 map 又会带来虚拟内存的回收、重新分配的问题，对于文件不确定大小的情形不太友好。</p></li><li><p>如果当文件超出1.5G限制时，可以通过 position 参数重新 map 文件后面的内容；</p></li><li><p>MMAP 使用的是虚拟内存，和 PageCache 一样是由操作系统来控制刷盘的，虽然可以通过 <code>force()</code> 来手动控制，但这个时间把握不好，在小内存场景下会很令人头疼。</p></li><li><p>MMAP 的回收问题，当 MappedByteBuffer 不再需要时，可以手动释放占用的虚拟内存，注意 JDK 不同版本的区别。</p></li></ol><p>MMAP 在实际使用中并没有表现出比 FileChannel 优异的性能。建议<strong>优先使用 FileChannel</strong>。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>File<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>FileOutputStream<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>RandomAccessFile<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span>Method<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>nio<span class="token punctuation">.</span>ByteBuffer<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>nio<span class="token punctuation">.</span>MappedByteBuffer<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>nio<span class="token punctuation">.</span>channels<span class="token punctuation">.</span>FileChannel<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>security<span class="token punctuation">.</span>AccessController<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>security<span class="token punctuation">.</span>PrivilegedAction<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span>Field<span class="token punctuation">;</span><span class="token keyword">import</span> sun<span class="token punctuation">.</span>misc<span class="token punctuation">.</span>Unsafe<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestMMAP</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">int</span> count <span class="token operator">=</span> <span class="token number">1024</span> <span class="token operator">*</span> <span class="token number">1024</span> <span class="token operator">*</span> <span class="token number">1024</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 1G</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> Unsafe UNSAFE<span class="token punctuation">;</span>        <span class="token keyword">static</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            Field field <span class="token operator">=</span> Unsafe<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getDeclaredField</span><span class="token punctuation">(</span><span class="token string">"theUnsafe"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            field<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            UNSAFE <span class="token operator">=</span> <span class="token punctuation">(</span>Unsafe<span class="token punctuation">)</span> field<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>null<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        File f <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">"/home/xiehui/largeFile.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        RandomAccessFile rf <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RandomAccessFile</span><span class="token punctuation">(</span>f<span class="token punctuation">,</span> <span class="token string">"rw"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// Mapping a file into memory</span>        MappedByteBuffer out <span class="token operator">=</span> rf<span class="token punctuation">.</span><span class="token function">getChannel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>FileChannel<span class="token punctuation">.</span>MapMode<span class="token punctuation">.</span>READ_WRITE<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> count<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// Writing into Memory Mapped File</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> count<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            out<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">byte</span><span class="token punctuation">)</span> <span class="token string">'A'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Writing to Memory Mapped File is completed"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// reading from memory file in Java</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">)</span> out<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Reading from Memory Mapped File is completed"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        rf<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        UNSAFE<span class="token punctuation">.</span><span class="token function">invokeCleaner</span><span class="token punctuation">(</span>out<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// >= jdk 9 采用这个方法 unmap</span>        <span class="token comment" spellcheck="true">//clean(out); // &lt; jdk 9 采用这个方法</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">clean</span><span class="token punctuation">(</span>MappedByteBuffer mappedByteBuffer<span class="token punctuation">)</span> <span class="token punctuation">{</span>        ByteBuffer buffer <span class="token operator">=</span> mappedByteBuffer<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>buffer <span class="token operator">==</span> null <span class="token operator">||</span> <span class="token operator">!</span>buffer<span class="token punctuation">.</span><span class="token function">isDirect</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">||</span> buffer<span class="token punctuation">.</span><span class="token function">capacity</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token function">invoke</span><span class="token punctuation">(</span><span class="token function">invoke</span><span class="token punctuation">(</span><span class="token function">viewed</span><span class="token punctuation">(</span>buffer<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"cleaner"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"clean"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 在MappedByteBuffer释放后再对它进行读操作的话就会引发 jvm crash，在并发情况下很容易发生     * 正在释放时另一个线程正开始读取，于是 crash 就发生了。所以为了系统稳定性释放前一般需要检查是否还有线程在读或写     * @param target     * @param methodName     * @param args     * @return     */</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> Object <span class="token function">invoke</span><span class="token punctuation">(</span><span class="token keyword">final</span> Object target<span class="token punctuation">,</span> <span class="token keyword">final</span> String methodName<span class="token punctuation">,</span> <span class="token keyword">final</span> Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> AccessController<span class="token punctuation">.</span><span class="token function">doPrivileged</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">PrivilegedAction</span><span class="token operator">&lt;</span>Object<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">public</span> Object <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">try</span> <span class="token punctuation">{</span>                    Method method <span class="token operator">=</span> <span class="token function">method</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> methodName<span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>                    method<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">return</span> method<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>target<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalStateException</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> Method <span class="token function">method</span><span class="token punctuation">(</span>Object target<span class="token punctuation">,</span> String methodName<span class="token punctuation">,</span> Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> NoSuchMethodException <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> target<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getMethod</span><span class="token punctuation">(</span>methodName<span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">NoSuchMethodException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> target<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getDeclaredMethod</span><span class="token punctuation">(</span>methodName<span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> ByteBuffer <span class="token function">viewed</span><span class="token punctuation">(</span>ByteBuffer buffer<span class="token punctuation">)</span> <span class="token punctuation">{</span>        String methodName <span class="token operator">=</span> <span class="token string">"viewedBuffer"</span><span class="token punctuation">;</span>        Method<span class="token punctuation">[</span><span class="token punctuation">]</span> methods <span class="token operator">=</span> buffer<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getMethods</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> methods<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>methods<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"attachment"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                methodName <span class="token operator">=</span> <span class="token string">"attachment"</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        ByteBuffer viewedBuffer <span class="token operator">=</span> <span class="token punctuation">(</span>ByteBuffer<span class="token punctuation">)</span> <span class="token function">invoke</span><span class="token punctuation">(</span>buffer<span class="token punctuation">,</span> methodName<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>viewedBuffer <span class="token operator">==</span> null<span class="token punctuation">)</span>            <span class="token keyword">return</span> buffer<span class="token punctuation">;</span>        <span class="token keyword">else</span>            <span class="token keyword">return</span> <span class="token function">viewed</span><span class="token punctuation">(</span>viewedBuffer<span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>可以参考 kafka 的工具类<a href="https://github.com/apache/kafka/blob/e554dc518eaaa0747899e708160275f95c4e525f/clients/src/main/java/org/apache/kafka/common/utils/MappedByteBuffers.java" target="_blank" rel="noopener">MappedByteBuffers</a>的实现方式。</p><h3 id="Direct-IO"><a href="#Direct-IO" class="headerlink" title="Direct IO"></a>Direct IO</h3><p>Java 中常用的文件操作接口为：FileChannel，并且没有直接操作 Direct IO 的接口。这也就意味着 Java 无法绕开 PageCache 直接对存储设备进行读写，但对于使用 Java 语言来编写的数据库，消息队列等产品而言，的确存在绕开 PageCache 的需求：</p><ul><li>PageCache 属于操作系统层面的概念，用户层面很难干预，User BufferCache 显然比 Kernel PageCache 要可控</li><li>现代操作系统会使用尽可能多的空闲内存来充当 PageCache，当操作系统回收 PageCache 内存的速度低于应用写缓存的速度时，会影响磁盘写入的速率，直接表现为写入 RT 增大，这被称之为“毛刺现象”</li></ul><p>PageCache 可能会好心办坏事，采用 Direct IO + 自定义内存管理机制会使得产品更加的可控，高性能。</p><p><strong>Direct IO 的限制</strong></p><p>在 Java 中使用 Direct IO 最终需要调用到 c 语言的 pwrite 接口，并设置 O_DIRECT flag，使用 O_DIRECT 存在不少限制:</p><ul><li>操作系统限制：Linux 操作系统在 2.4.10 及以后的版本中支持 O_DIRECT flag，老版本会忽略该 Flag；Mac OS 也有类似于 O_DIRECT 的机制</li><li>用于传递数据的缓冲区，其内存边界必须对齐为 blockSize 的整数倍</li><li>用于传递数据的缓冲区，其传递数据的大小必须是 blockSize 的整数倍。</li><li>数据传输的开始点，即文件和设备的偏移量，必须是 blockSize 的整数倍</li></ul><p>如果想在 Java 中使用 Direct IO  可以参考项目 <a href="https://github.com/lexburner/kdio" target="_blank" rel="noopener">https://github.com/lexburner/kdio</a> </p><h2 id="总结-2"><a href="#总结-2" class="headerlink" title="总结"></a>总结</h2><p>本文对文件 IO 的知识进行了全面的梳理和整理，为后续在实现存储类项目时提供参考。</p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p><a href="http://www.ssdfans.com/blog/2018/05/17/从sata、sas到nvme-ssd/" target="_blank" rel="noopener">从SATA、SAS到NVMe SSD</a></p><p><a href="http://www.ssdfans.com/?p=131" target="_blank" rel="noopener">SSD背后的秘密：SSD基本工作原理</a></p><p><a href="http://www.jinbuguo.com/storage/ssd_intro.html" target="_blank" rel="noopener">SSD(固态硬盘)简介</a></p><p><a href="https://www.infoq.cn/article/pWEW6yTk_9QrAUp4EH85" target="_blank" rel="noopener">NVMe SSD 性能影响因素</a></p><p><a href="https://www.cnblogs.com/zengkefu/p/6372148.html" target="_blank" rel="noopener">如何提高Linux下块设备IO的整体性能？</a></p><p> <a href="https://tech.meituan.com/2017/05/19/about-desk-io.html" target="_blank" rel="noopener">磁盘I/O那些事</a></p><p><a href="http://blog.yufeng.info/archives/1917" target="_blank" rel="noopener">posix_fadvise清除缓存的误解和改进措施</a></p><p><a href="https://www.ibm.com/developerworks/cn/linux/l-vfs/index.html" target="_blank" rel="noopener">解析 Linux 中的 VFS 文件系统机制</a></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> IO </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2020/05/19/hello-world/"/>
      <url>/2020/05/19/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class=" language-bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class=" language-bash"><code class="language-bash">$ hexo server</code></pre><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class=" language-bash"><code class="language-bash">$ hexo generate</code></pre><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class=" language-bash"><code class="language-bash">$ hexo deploy</code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
